%group

    %piper,output="geogebra"  //Note: make indent level of output one more level than the indent level of the fold.  
        Write(2+2);

        %geogebra
          4
        %end

    %end
        
%end


%beanshell
import java.io.*;
//Print the contents of the Piper script zip file.
 instance = org.mathrider.jpiperplugin.JPiperInterpreter.getInstance();
 scriptZip = instance.getScriptsZip();
 entries = scriptZip.entries();
 
 while( entries.hasMoreElements())
 {
    element = entries.nextElement();
    System.out.println("XXXXX " + element);
 }
 
 entry = scriptZip.getEntry("assoc.rep/code.pi");
 System.out.println("YYYYYY " + entry);
 
 fis = scriptZip.getInputStream(entry);
 //
        entry = entry.toString().replaceAll("/","-");
         // Create temp file.
        File tempFile = File.createTempFile(entry, ".pi");
    
        // Delete temp file when program exits.
        tempFile.deleteOnExit();
    
	//File originFile = new File("c:\\file1.txt");
    //File destinationFile = new File("c:\\file1.txt");
    //if (!originFile.exists() || destinationFile.exists()) {
      //return;
    //}
    try {
      byte[] readData = new byte[1024];
      //FileInputStream fis = new FileInputStream(originFile);
      FileOutputStream fos = new FileOutputStream(tempFile);
      int i = fis.read(readData);

      while (i != -1) {
        fos.write(readData, 0, i);
        i = fis.read(readData);
      }
      fis.close();
      fos.flush();
      fos.close();
    } catch (IOException e) {
      System.out.println(e);
    }//end try/catch.
    
    
    
    //textArea = org.gjt.sp.jedit.jEdit.createTextArea();
    
    activeView = org.gjt.sp.jedit.jEdit.getActiveView();
    
    //buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());
    
   // jf = new javax.swing.JFrame();
   // cf = jf.getContentPane();
   // cf.add(textArea);
   // jf.show();
   
   
				void delayDisplay()
				{
					//Buffer update needs to be done later in the AWT thread because of needing
					// to wait for the buffer to be saved (which was requested earlier).
					void run()
					{
						buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());//

					}
					org.gjt.sp.jedit.io.VFSManager.runInAWTThread(this);
				
				}//end method.
				
	delayDisplay();

    %error 
      Sourced file: C:\DOCUME~1\Ted\LOCALS~1\Temp\mathrider49640.mws_tmp : Cannot access field: toString, on object: assoc.rep/code.pi entry .toString .replaceAll ( "/" , "-" )  Line: 33
    %end

%end


%piper
c := Sum(i,1,11,1/(i*(i+1)));
Write(V(N(c)));

f := 10/(10+1);
Write(N(f));

    %output
      11/12 10/11
    %end

%end

%piper
k := 10;
g := k/(k+1) + 1/((k+1) * ((k+1)+1));
h := (k+1) / (k+1)+1;
Write(g, h);

    %output
      11/12 2
    %end

%end

%piper
Set(e,2.71828182847786963038);
f(x) = N((.6*10^-6)* D(x) 40*(e^(-15000*x))*Sin(30000*x));
Write(f(x));

    %output
      6e-7*(40*2.71828182847786963038^(-15000*x)*30000*Cos(30000*x)+(-600000)*2.71828182847786963038^(-15000*x)*Sin(30000*x))
    %end

%end
f(x) := (.6*10^-6) *

%piper
Set(e,Exp(1));
a := (.6*10^-6) * N((.6*10^-6)* D(x) 40*(e^(-15000*x))*Sin(30000*x));
Write(a);

    %output
      (3.6e-7*(40*Exp(1)^(-15000*x)*30000*Cos(30000*x)+(-600000)*Exp(1)^(-15000*x)*Sin(30000*x)))/1000000
    %end

%end

%piper
Set(e,2.71828);
df := D(x) 40*e^(-15000*x)*Sin(30000*x);
Write(df);

    %output
      40*2.71828^(-15000*x)*30000*Cos(30000*x)+(-40)*2.71828^(-15000*x)*15000*Ln(2.71828)*Sin(30000*x)
    %end

%end

%piper
Write(25!);

    %output
      15511210043330985984000000
    %end

%end

%piper
b := (6*a + 5) / (a + 2);
Write(b);

    %output
      (6*a+5)/(a+2)
    %end

%end

%piper
c := 



;
d := k * e(k-1);
%end



%piper

e := 2.71828;
d(x) := N(Eval((0.6*10^-6) * D(x) 40*(e^(-15000*x))*Sin(30000*x) ));
y := d(0);
Write(y);

    %output
      0.72
    %end

%end







%piper,macro="P2D_GeoGebra"
f(a) := (6*a + 5)/(a+2);
b := 1;
ForEach(x,1 .. 10)
    [
        c := f(b);
        Write(N(Eval(c)));
        b := c;
    ];

    %output
      3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508
    %end

%end


%beanshell,name="P2D_GeoGebra",scope="global"


P2D_GeoGebra(str)
{
    vals = str.split(" ");
    
    x = 0;
    for(val:vals)
    {
        ggb.evalCommand("(" + x++ +"," + val + ")");
    }//end for.

    output(str);
    
}

data = "3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508";
P2D_GeoGebra(data);

    %output 
      3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508
    %end

%end


%piper,output="latex"
    /* This is a great example problem to use in MathRider.
    1) Enter expression.
    2) If it is a complicated expression, view it in LaTeX form to make sure it has been entered
    correctly.  In this problem, if parentheses are not placed around the exponents then then the
    expression is evaluated differently than if they are present.
    3) Adjust the expression until it is correct.
    */
    
    a :=((1-x^(2*k))/(1-x))*((1-x^(2*(k+1)))/(1-x));
    Write(a);

    %hoteqn
      $\frac{\left( 1 - x ^{2 \left( k + 1\right) }\right)  \left( 1 - x ^{2 k}\right) }{\left( 1 - x\right)  ^{2}} $
    %end

%end

%piper, output="latex"

Write(Simplify(a));

    %hoteqn
      $\frac{x ^{2 k + 2 \left( k + 1\right) } - x ^{2 \left( k + 1\right) } + 1 - x ^{2 k}}{x ^{2} - 2 x + 1} $

        %output
          HotEqn updated.
        %end

    %end

%end




%piper,output=""

    
    a := (((1-x^(2*k))/(1-x))*(1 + x^(2*(k+1)-1)));
    Write(Simplify(a));

    %output
      (x^(2*(k+1)-1)-x^(2*k+2*(k+1)-1)+1-x^(2*k))/(1-x)
    %end

%end



%piper,output=""

    
    a := Hold(((1-x^(2^k))/(1-x))*(1 + x^(2^((k+1)-1))));
    b := Hold((1-x^(2^(k+1)))/(1-x));
    Write(a:Eval(a):Simplify(a));
    //Write(TestPiper(a,b));

    %output
      (1-x^2^k)/(1-x)*(1+x^2^(k+1-1)):((x^2^k+1)*(1-x^2^k))/(1-x):(1-x^2^k^2)/(1-x)
    %end

%end



%piper,output="latex"

    
    a :=  Hold((1+x^2^k) * (1-x^2^k) );
    b := Hold( 1/2 *(k+1)*(k+2) );
    Write(a:Simplify(a));

    %hoteqn
      $\left( 1 + x ^{2 ^{k}}\right)  \left( 1 - x ^{2 ^{k}}\right) :1 - x ^{2 ^{k ^{2}}}$

        %output
          HotEqn updated.
        %end

    %end

%end

%piper
    a := (1-x^2^k) * (1+x^2^k);
    Write(Simplify(FullForm(a)));

    %output
      (* 
          (- 1 
            (^ x 
              (^ 2 k )))
          (+ 
            (^ x 
              (^ 2 k ))1 ))
      1-x^2^k^2
    %end

%end

%piper

a := FromString("(* 
          (- 1 
            (^ x 
              (^ 2 k )))
          (+ 
            (^ x 
              (^ 2 k ))1 ))") LispRead();
              
Write(a);

    %output
      (1-x^2^k)*(x^2^k+1)
    %end

%end

%piper

a := FromString("(* 3 (MathSin 4))") LispRead();
              
Write(Eval(a));

    %output
      -2.2704074859
    %end

%end





%piper
//Why doesn't this work?
a := FromString("(+ 5 .5 2.5  )") LispRead();
              
Write(Eval(a));

    %output
      +(5,.5,2.5)
    %end

%end


%piper
//Why doesn't this work?
a := FromString("(+ 1 2 3)") LispRead();
              
Write(a);

    %output
      +(1,2,3)
    %end

%end

%piper,output=""
//Good example problem for newbies book.  From problem 19 in "Mathematical Reasoning".
a(k) := (k+2)/(2*k+2);
b(k) := ( ((k+1)/(2*k)) * (1-(1/(k+1)^2) ) );
c(k) := (k+1)/(2*k) - (k+1)/(2*k*(k+1)^2);
d(k) := (k^3+3*k^2+2*k)/(2*k^3+4*k^2+2*k);
e(k) := (k^2+3*k+2)/(2*k^2+4*k+2);


//Write(d(k));
Write(TestPiper(a(k),e(k)));
//Write(Together(c(k)));
//Write(Simplify(c(k)));
//Write(Factor(Numer(Together(c(k)))):Factor(Denom(Together(c(k)))));

    %output
      True
    %end

%end
