buffer.save(view,null);
thisFile = buffer.getPath();
mpwFile = new File(thisFile);
projectDirectory = mpwFile.getParentFile().getParentFile().getParent();
templateFile = new File(projectDirectory + java.io.File.separator + "src" + java.io.File.separator + "templates" + java.io.File.separator + "site_template.mpw");

try
{
    exerciseFoldsMap = org.mathpiper.test.MPWSFile.getFoldsMap(mpwFile.getPath(), new java.io.FileInputStream(mpwFile));
    templateFoldsMap = org.mathpiper.test.MPWSFile.getFoldsMap(mpwFile.getPath(), new java.io.FileInputStream(templateFile));
    
    for ( fold : exerciseFoldsMap.values() )
    { 
    	foldType = fold.getType();
    	
    	if(foldType != null && foldType.equals("markdown"))
    	{
    		foldName = fold.getAttributes().get("name");
    		foldTitle = fold.getAttributes().get("title");
    		if(foldTitle == null)
    		{
    			foldTitle = "";
    		}
			prologue = templateFoldsMap.get("prologue").getContents();
			prologue = prologue.replace("$title", foldTitle);
			
			pre = templateFoldsMap.get("preexplanation").getContents();
			markdownFold = fold;

			if(markdownFold == null)
			{
				org.gjt.sp.jedit.Macros.message(jEdit.getActiveView(),"The source file is missing a fold named \"explanation\".");
				return;
			}
			exerciseCodeFold = exerciseFoldsMap.get("exerciseCode");
			exerciseCode = "";
			if(exerciseCodeFold != null) 
			{
				parentFoldName = exerciseCodeFold.getAttributes().get("parent");
				
				if(parentFoldName != null && parentFoldName.equals(foldName))
				{
					exerciseCode = exerciseFoldsMap.get("exerciseCode").getContents();
				}
			};
			
			outputFileName = markdownFold.getAttributes().get("output");
			markdown = markdownFold.getContents();
			markdown = markdown.replace("\\","\\\\");
			util = ua.pico.jedit.markdown.MarkdownUtil.getInstance();
			processor = util.getProcessor();
			htmlText = processor.markdownToHtml(markdown);
			postmarkdown = templateFoldsMap.get("postexplanation").getContents();
			epilogue = templateFoldsMap.get("epilogue").getContents();
			combined = prologue + premarkdown + htmlText + postmarkdown + exerciseCode + epilogue;
			buildDirectoryPath = projectDirectory + java.io.File.separator + "build" + java.io.File.separator;
			outputFilePath = buildDirectoryPath + outputFileName;
			
			if(outputFilePath.contains("\\")) //For windows.
			{
				outputFilePath = outputFilePath.substring(3,outputFilePath.length());
			}
			outputURI = new java.net.URI("file:///" + outputFilePath.replaceAll(" ", "%20").replaceAll("\\\\","/"));  
			File outputFile = new File(outputURI);
			BufferedWriter htmlFileWriter = new BufferedWriter(new FileWriter(outputFile,false));
			htmlFileWriter.write(combined);
			htmlFileWriter.close();
			
			copyFile(File sourceFile, File destFile) throws IOException {
				if(!destFile.exists()) {
					destFile.createNewFile();
				}
			
				java.nio.channels.FileChannel source = null;
				java.nio.channels.FileChannel destination = null;
			
				try {
					source = new java.io.FileInputStream(sourceFile).getChannel();
					destination = new java.io.FileOutputStream(destFile).getChannel();
					destination.transferFrom(source, 0, source.size());
				}
				finally {
					if(source != null) {
						source.close();
					}
					if(destination != null) {
						destination.close();
					}
				}
			}
		
		}
    
	};
    
    
    copyFile(new File(projectDirectory + java.io.File.separator + "lib" + java.io.File.separator + "raphael-min.js" ), new File(buildDirectoryPath + "raphael-min.js"));
    copyFile(new File(projectDirectory + java.io.File.separator + "lib" + java.io.File.separator + "raphael.export.js" ), new File(buildDirectoryPath + "raphael.export.js"));
    copyFile(new File(projectDirectory + java.io.File.separator + "src" + java.io.File.separator + "javascript" + java.io.File.separator + "patternmatics.js" ), new File(buildDirectoryPath + "patternmatics.js"));
    copyFile(new File(projectDirectory + java.io.File.separator + "src" + java.io.File.separator + "javascript" + java.io.File.separator + "patternmaticstest.js" ), new File(buildDirectoryPath + "patternmaticstest.js"));
}
catch(Throwable e)
{
    org.gjt.sp.jedit.Macros.message(jEdit.getActiveView(),e.getMessage());
    //e.printStackTrace();
}

