%mathpiper,title="Generate a random sequence of nucleotides."

/*

DNA - Deoxyribonucleic acid: a simple molecule consisting of a sugar, a phosphate group, 
and one of four nitrogenous bases (A, T, G, or C).

A - Adenine.
T - Thymine.
G - Guanine.
C - Cytosine.

*/

nucleotideList := Table(RandomPick({A,T,G,C}),x,1,300,1);

%/mathpiper

    %output,preserve="false"
      Result: {G,A,C,C,G,C,G,C,C,A,C,A,A,A,A,G,T,T,T,T,C,C,G,T,C,G,C,A,T,A,T,A,G,G,T,A,G,G,T,G,C,A,G,G,C,T,C,A,T,C,G,G,T,A,T,C,A,A,A,A,C,A,C,A,A,C,A,T,C,A,T,A,T,C,A,C,A,C,C,C,T,T,G,A,G,T,C,C,T,A,C,A,A,A,A,C,G,G,C,C,A,G,C,A,T,G,A,G,A,C,A,A,C,G,A,C,G,A,G,A,G,T,T,G,C,G,T,A,C,C,A,C,G,T,C,C,T,T,G,T,T,A,A,C,C,A,A,C,C,G,G,A,G,G,T,C,G,G,G,G,T,T,G,G,G,T,C,A,T,C,T,A,T,C,T,C,C,G,G,C,C,G,G,A,A,G,A,C,G,A,C,G,A,C,G,T,A,A,T,T,G,A,T,G,G,T,C,A,C,T,C,G,G,T,C,T,G,A,T,T,G,A,T,T,A,C,A,G,T,C,A,T,T,T,G,G,A,A,A,A,T,G,T,A,T,G,C,C,A,T,T,T,T,T,A,G,A,G,T,T,T,A,C,A,G,G,T,A,A,C,G,G,T,A,T,G,G,A,G,C,G,C,G,G,A,T,G,C,A,C,A,C,T,T,A,C,G,G,T,T}
.   %/output



%mathpiper,title="Find a specific pattern in the nucleotide list."

pattern := {T,G,G};

index := 1;

listLength := Length(nucleotideList);

While(index <= listLength-3)
[

    Write(nucleotideList[index]);
    
    If((thisPattern := Take(nucleotideList,{index,index+2})) = pattern, [WriteString(" - "); Write(thisPattern);]);
    
    NewLine();
    
    index++;


];

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      G
      A
      C
      C
      G
      C
      G
      C
      C
      A
      C
      A
      A
      A
      A
      G
      T
      T
      T
      T
      C
      C
      G
      T
      C
      G
      C
      A
      T
      A
      T
      A
      G
      G
      T
      A
      G
      G
      T
      G
      C
      A
      G
      G
      C
      T
      C
      A
      T
      C
      G
      G
      T
      A
      T
      C
      A
      A
      A
      A
      C
      A
      C
      A
      A
      C
      A
      T
      C
      A
      T
      A
      T
      C
      A
      C
      A
      C
      C
      C
      T
      T
      G
      A
      G
      T
      C
      C
      T
      A
      C
      A
      A
      A
      A
      C
      G
      G
      C
      C
      A
      G
      C
      A
      T
      G
      A
      G
      A
      C
      A
      A
      C
      G
      A
      C
      G
      A
      G
      A
      G
      T
      T
      G
      C
      G
      T
      A
      C
      C
      A
      C
      G
      T
      C
      C
      T
      T
      G
      T
      T
      A
      A
      C
      C
      A
      A
      C
      C
      G
      G
      A
      G
      G
      T
      C
      G
      G
      G
      G
      T
      T - {T,G,G}
      G
      G
      G
      T
      C
      A
      T
      C
      T
      A
      T
      C
      T
      C
      C
      G
      G
      C
      C
      G
      G
      A
      A
      G
      A
      C
      G
      A
      C
      G
      A
      C
      G
      T
      A
      A
      T
      T
      G
      A
      T - {T,G,G}
      G
      G
      T
      C
      A
      C
      T
      C
      G
      G
      T
      C
      T
      G
      A
      T
      T
      G
      A
      T
      T
      A
      C
      A
      G
      T
      C
      A
      T
      T
      T - {T,G,G}
      G
      G
      A
      A
      A
      A
      T
      G
      T
      A
      T
      G
      C
      C
      A
      T
      T
      T
      T
      T
      A
      G
      A
      G
      T
      T
      T
      A
      C
      A
      G
      G
      T
      A
      A
      C
      G
      G
      T
      A
      T - {T,G,G}
      G
      G
      A
      G
      C
      G
      C
      G
      G
      A
      T
      G
      C
      A
      C
      A
      C
      T
      T
      A
      C
      G
.   %/output




%mathpiper,title="Calculate how many 3 symbol patterns can be made from the symbols A T G C"

4^3;

%/mathpiper

    %output,preserve="false"
      Result: 64
.   %/output




%mathpiper,title="Generate all of the patterns that can be made from the symbols A T G C"

threeSymbolsList := {};

symbols := {T,G,A,C};

ForEach(symbol1, symbols)
[
    ForEach(symbol2, symbols)
    [
    
        ForEach(symbol3, symbols)
        [
            threeSymbolsList := Append(threeSymbolsList,{symbol1, symbol2, symbol3});
        
        ];
    
    ];

];

threeSymbolsList;

%/mathpiper

    %output,preserve="false"
      Result: {{T,T,T},{T,T,G},{T,T,A},{T,T,C},{T,G,T},{T,G,G},{T,G,A},{T,G,C},{T,A,T},{T,A,G},{T,A,A},{T,A,C},{T,C,T},{T,C,G},{T,C,A},{T,C,C},{G,T,T},{G,T,G},{G,T,A},{G,T,C},{G,G,T},{G,G,G},{G,G,A},{G,G,C},{G,A,T},{G,A,G},{G,A,A},{G,A,C},{G,C,T},{G,C,G},{G,C,A},{G,C,C},{A,T,T},{A,T,G},{A,T,A},{A,T,C},{A,G,T},{A,G,G},{A,G,A},{A,G,C},{A,A,T},{A,A,G},{A,A,A},{A,A,C},{A,C,T},{A,C,G},{A,C,A},{A,C,C},{C,T,T},{C,T,G},{C,T,A},{C,T,C},{C,G,T},{C,G,G},{C,G,A},{C,G,C},{C,A,T},{C,A,G},{C,A,A},{C,A,C},{C,C,T},{C,C,G},{C,C,A},{C,C,C}}
.   %/output






%mathpiper,title="Verify that the number of patterns in the threeSymbolsList matches the calculated value."

Length(threeSymbolsList);

%/mathpiper

    %output,preserve="false"
      Result: 64
.   %/output






%mathpiper,title="Count how many times each of the 64 three symbol patterns occurrs in the nucleotide list."

matchesList := FillList(0,Length(threeSymbolsList));

index := 1;

While(index <= Length(nucleotideList)-3)
[
    
    thisPattern := Take(nucleotideList,{index,index+2});
    
    If( (foundIndex := Find(threeSymbolsList, thisPattern)) != -1, matchesList[foundIndex] := matchesList[foundIndex] + 1);
    
    
    index++;


];

matchesList;

%/mathpiper

    %output,preserve="false"
      Result: {7,5,7,5,4,6,10,7,7,10,4,10,13,9,4,9,3,5,7,11,7,10,13,5,10,8,11,12,4,6,11,10,9,7,9,8,6,8,9,11,8,5,3,5,10,13,5,4,5,10,7,11,9,11,9,8,8,11,4,5,6,9,8,6}
.   %/output




%mathpiper,title="Show the 3 symbol pattern counts on a bar chart."

BarChart({1 .. 64, matchesList}, 
title -> "Three Symbol Pattern Counts",
xAxisLabel -> "3 Symbol Patterns",
yAxisLabel -> "Count"

);

%/mathpiper

    %output,preserve="false"
      Result: org.jfree.chart.ChartPanel
.   %/output






%mathpiper,title="Show the 3 symbol pattern counts on a bar chart."

Histogram(matchesList, 
title -> "Three Symbol Pattern Counts",
xAxisLabel -> "Bins",
yAxisLabel -> "Number Of 3 Symbol Patterns In Each Bin",
numberOfBins -> 10,
binMinimum -> 2.5, 
binMaximum -> 12.5,

);

%/mathpiper

    %output,preserve="false"
      Result: org.jfree.chart.ChartPanel
.   %/output


