Development notes.

:indentSize=4:lineSeparator=\n:noTabs=false:tabSize=4:folding=explicit:collapseFolds=true:wrap=soft:

{{{====To Do
+ Perhaps add grade level (or similar) tags to functions to hide advanced functions in piper docs.
+ Have Piper docs go to cateorgy's html reference page when category is selected.
+ Add scope="shell" to beanshell fold.
+ Add IsInteger to PiperDocs (There are a number of links to it, but no target).
+ Give option for Piper functions to be grouped bye type.  For example, predicates(refchap10), numeric functions(like MathSin), etc. Perhaps use a tree. 
+ Why is the MathRider startup script in the settings directory and in the MathRider directory?
+ If fold is not found then part of .mws file is deleted.
+ Place proper exception types in folds (like maxima and lisp);
- Enable menubar in geogebra plugin.
+ Add tools to geogebra toolbar which allow exporting images and xml geogebra code into notebook cells.
+ NewtonNum link in Newton is broken.
- Add default fold which will set default fold properties like output="output".
+ Add dependency code for geogebra, errorlist, etc.
+ Place path to .html file at top of docs window.
- Add output property for folds.
+ Add shortcut and button for inserting a fold into a .mws file.
+ Allow properties to not use quotes around the value.
+ Change Geogebra to GeoGebra globally.
+ Note:tk: must set output and console another way for when user executes maxima fold before using the shell.
- Change file format from .mrn to .mathrider (maybe leave .mrn to make tabs shorter.) (Actually, perhaps .mr or .mar would be better.).
+ Check if Piper remembers variable values between sessions.
+ Check to make sure that at least Sun's Java 5 is installed.
+ Do better syntax checking on fold properties.
+ Have Piper console use the text area font size (like svn does).
- Include Piper documentation in Piper plugin.
+ Make the Piper console the default console application.
+ Obtain line number when Piper encounters an error when executing a file.
+ Perhaps run Piper in its own thread so that the application does not lock up during execution.
+ Register a single error source instance and make it accessible to the <shift><click> macro.
+ Why doesn't =, :=, etc. highlight?
+ Macro which brings up checkbox for all properties for a % fold command when it is shift clicked.
+ Macro: right click menu which allows inserting of fold template.
+ Place MathRider variables in standard jEdit beanshell environment.
+ Use the ContextMenu plugin to create a special popup menu for .mws files.
+ Add dock sidekick plugin to the right side of the screen and have it show outline of .mws files.
+ "If none of the predicates are true, the function is returned with its arguments evaluated." Should "evaluated" be "unevaluated" here? (section 1.5 of the programmer's manual.
+ Use ShortCutSaver plugin for .mws shortcut keys (maybe like <shift><enter>).
+ Study TextAutocomplete plugin for ideas on keyword autocompletion.
- Fix problem where %output folds don't cause extra %ends but %error folds do.
+ Figure out a way to output the result of the last expression in a fold without Writing or Echoing.
+ Find the documentation for Apart and Together.
+ Make fold types a property for use by Shift_Enter.bsh file, mode file, and the configurable fold handler plugin.
+ Allow help on a Piper function to be brought up by ???ing on it (including the source code of the function).
+ Check to see if we can remove the C: stripping code from Shift_Enter.bsh with this: file:///C:/ted/download/piper_manual/refchapter26.html#c26". (Doesn't work, must fix bug in Piper itself).
+ Allow multiple output folds to be generated.  For example, both %latex and normal %output.
+ Add autoexecute parameter which automatically executes an output fold.
- Allow source code for any function in the standard library to be brought up in the editor (like Sage ?? command).
+ Allow font size to be adjusted for any TextArea.
+ Allow Piper Docs JEditorPane to be scrolled with the up and down arrows.
+ Allow Piper Docs JEditorPane to save bookmarks.
+ Show "breadcrumb trail" at the top of the Piper Docs window.
+ Perhaps dynamically set the mode of .mws files by what kind of fold the cursor is placed in.
+ Check MathAdd and other functions not being looked up in Piper Docs.
+ Allow folds to call other folds.
+ Allow GUI components to call folds.
+ Add uasm65 mode.
+ Fold output property could specify multiple properties by entering normal|latex.
- Allow PiperDocs to show either the docs for a core function or its source code.  (Open source code in a buffer).
- Make indent level of output one more level than the indent level of the fold.
+ Fix problem of Piper not being able to find file on other drive othern than the current drive.
+ Check toc.xml error in help.
+ Make a plugin for JCalc and make it the default calculator because it is easier to understand than the RPN calculator.
+ Allow PiperDocs to have tabbed viewing area.  Allow right click on hyperlink to have option of opening in a new tab.
+ Figure out a way to have the geogebra fold set properties on mathematical objects with non-XML code.
+ Fix gray background rectangles on display.
- Add forward and back browser capabilities to Piper docs.
+ Deselect item in function list when "home" is selected in PiperDocs.
+ In PiperDocs, allow functions to be listed either alphabetically or in groups.
+ Change "jEdit Home Directory" to "MathRider Home Directory".
+ RuleBaseListed link in Echo documentation is broken.
+ If GeoGebra has not been executed yet, then the ggb BeanShell variable will contain a null reference.
+ Add multiple fold properties capability like this: %piper,output="latex,autoexecute".
+ Update PiperDocs to refer to the Java implementation instead of the C implementation.
+ Capital vs. lower case variables in an expression causes evaluation errors if not caught.  Perhaps some way to highlight these case differences can be created?
+ If bottom fold is executed, append a new fold of that type at the bottom of the document.
"accapt" needs an "s" in PiperDocs for Write function.
+ Add function that allows Piper to execute Java/BeanShell code.
+ Create a QTOT plugin for logging Quiet Time On Task hours.
+ Create a JXTA plugin for collaboration.
+ Perhaps create Piper console fold so console sessions can be preserved?
+ Backslashes \ do not continue lines in Piper console.
- PiperInterpreter is sometimes not found in BeanShell script.  Problem occures in PiperDocs "Source" request. 
+ Put exception checking on all scripts;
- Add quotes to mode.
- Add usage information to the Piper console.
- Change // and /**/ to same color in mode.
- Fix GeoGebra docking menu overwriting problem.
- Make a Piper mode file.
- Perhaps add properties to a fold like manipulate=true:output=latex.
- Tag folds by type, for example %piper, %latex, %uasm65, %equation.

Initial release:
+ Documentation: Main mathrider, all plugins.
+ Add GPL statement to all source code files.
+ Check GPL statements on plugins.
+ Add license for fire icon http://commons.wikimedia.org/wiki/Image:Exquisite-k3b.png.

}}}

{{{PLUGIN IDEAS
+ Plugin which has database of famous mathematicians with bio and picture.
+ Plugin which contains mathematically accurate type hierarchy (perhaps use Axiom CAS.).
}}}


{{{ MACRO IDEAS:
+ Multiple_Latex: accepts a list of values to convert to TeXForm and display.
}}}

{{{FOLD TYPES (Make sure to add fold types in Shift_Enter.bsh file, mode file and configurable fold handler plugin.)
+ piper - Executes piper code.
+ cas - Executes code using the default cas system.
+ manipulate - Allows user to manipulate an equation or inequality.
+ latex - Displays latex code using the default latex viewer.
+ geogebra - Sends geogebra commands to geogebra.
+ plot2d - Plots functions using the default 2d plotting program.
+ jmol - Sends jmol commands to jmol.
+ plot3d - Plots functions using the default 3d plotting program.
+ spreadsheet - Sends spreadsheet data to the default spreadsheet program.
+ beanshell - Sends code to beanshell.  Useful for creating GUIs, text scripts, etc.
+ html.
+ sql.
+ buffer - Code is held in a separate buffer.  May be useful for large blocks of code.



}}}


{{{PIPER BUGS.
9.5/3.2 does not evaluate to a decimal number.
----
TestPiper(x^k/x,x^(k-1));
Returns false but
is(equal(x**k/x,x**(k-1)));
returns true in maxima.

----


---- exponent bug.
+ 
#Sage calculates this.
var('k');
a = (1-x^2^k) * (1+x^2^k)
a,expand(a)
    ((1 - x^2^k)*(x^2^k + 1), 1 - x^(2*2^k))

//But piper calculates this.
%piper
    a := (1-x^2^k) * (1+x^2^k);
    Write(Simplify(a));

    %output
      1-x^2^k^2
    %end

%end


In> TestPiper(1-x^2^k^2,1 - x^(2*2^k))
Out> False:
******************
none: -1 
1-x^2^k^2 evaluates to 
1-x^2^k^2
 which differs from 
1-x^2^(k+1)
 by 
x^2^(k+1)-x^2^k^2
******************

----
+ Postfix function should be able to take only 1 argument, but it says it needs 2.
+ CDF link is broken in the PDF PiperDocs document.
+ TestPiper function should be renamed something more general like IsEquiv so that it can be used in other contexts.  For example, students learning how to manipulate an equation would find this function very useful.
+ Why does c := Sum(i,1,10,1/i*(i+1));Write(N(c)); Not convert c to a floating point value?
+ Why doesn't this work? "Object argument accessors in the form of
expr[ index ]. These are mapped internally to Nth(expr,index). The value of index=0 returns the operator of the object, index=1 the first argument, etc. So, if expr is foo(bar), then expr[0] returns foo, and expr[1] returns bar. Since lists of the form {...} are essentially the same as List(...), the same accessors can be used on lists."

+ If e is not defined, why is Ln(e) in this result?
%piper

df := D(x) 40*e^(-15000*x)*Sin(30000*x);
Write(df);

    %output
      40*e^(-15000*x)*30000*Cos(30000*x)+(-40)*e^(-15000*x)*15000*Ln(e)*Sin(30000*x)
    %end

%end

+ Why is Ln(2.71828) in this result?
%piper
e := 2.71828;
df := D(x) 40*e^(-15000*x)*Sin(30000*x);
Write(df);

    %output
      40*2.71828^(-15000*x)*30000*Cos(30000*x)+(-40)*2.71828^(-15000*x)*15000*Ln(2.71828)*Sin(30000*x)
    %end

%end


+ Why do some commands return True: while others return True with no : (Like Function);
+ What is FWatom in the factors.rep repository?
+ PrettyPrinter'Set: TexForm should be TeXForm.
+Note: the variable names "foreach..." have been chosen so they won't get confused with normal variables you use. This is a major design flaw in this language. Suppose there was a local variable foreachitem, defined in the calling function, and used in foreachbody. These two would collide, and the interpreter would use only the last defined version. In general, when writing a function that calls Eval(), it is a good idea to use variable names that can not collide with user's variables. This is generally the single largest cause of bugs when writing programs in Piper. This issue should be addressed in the future.
+ Random, RandomSeed in same string in .js array.
+ CachedConstant hyberlink in InNumericMode documentation is broken.
+ Wiesner Thomas to piper-devel
	
	I'm writing a small tutorial on CAS for hobby electronics.
	However, when I tried to solve a transcendental equation numerically, I
	encountered a Problem:
	
	RL:=1
	
	equ:=10e3*(2.68e-9*(Exp((9.75*Ln(IC/(7e-18*((4500-(68*IC+25500*IC+375*IC*RL))
	/23625+1)))+25500*IC+68*IC)/0.3588e2)-1)+IC/375)+(2*(9.75*Ln(IC
	/(7e-18*((4500-(68*IC+25500*IC+375*IC*RL))/23625+1)))
	+25500*IC+68*IC))/750-12==0
	
	Newton(equ[1], IC, 0.01, 1e-6) simply returns 'Undefined', but the equation has
	a (real) solution at 0.0051042 which can be found with Octave, for example.
	
	Additionally I don't understand why
	 Re(1/(I*w*c))
	gives
	 1/(Complex(0,1)*w*c)
	as result, but the correct result is simply 0. I thought, maybe piper assumes
	that w and c may be complex, but
	 Re(1/(I*Re(w*c)))
	doesn't work, too.
	
	Well, I thought maybe you want to know that.
	
	 mfg Thomas Wiesner
 
+ The Load command kills the contents of % which makes it impossible to access the
	result of the last evaluation.
+ Implement symbolic arithmetic so that m := 144 == 20 * a + b; n := 136 == 10 * a + b;c := m-n; works.
 
===

//What prime factors do the numbers 21, 42, and 56 have in common.
a := {};
a := Append(a,Factors(21));
a := Append(a,Factors(42));
a := Append(a,Factors(56));

//a := Flatten(a);
Echo(a);

     {{{%output 
      {{3,1},{7,1}} {{2,1},{3,1},{7,1}} {{2,3},{7,1}}
     }}}

Why is this list missing commas and curly braces?
===
+ Link from HoldArg to HoldArgNr in HoldArg documentation is broken.
}}}

{{{PIPER ENHANCEMENTS.
Change Nl to NL.
+ Change TeXForm to TexForm.
+ Change FullForm to LispForm.
+ Change MathXXX function names to XXXN format.
+ Change DestructiveXXX function names to XXXO for Original and perhaps functions like Replace to ReplaceC for Copy.
+ Change function names which have a ' in them to version without '.
+ Have commands which are similar to scientific calculator functions (like NCR, NPR, etc).
+ Multivariate factoring.
----
+ Regular expressions
The regular expressions plugin
This plugin allows for text processing using regular expressions. The GPL'ed package pcre is included for this purpose (pcre stands for Perl compatible regular expressions).

To use the plugin, the plugin has to be loaded through:

Use("pcre");

The pcre plugin offers two principal functions: PcreLexer and PcreNextToken. PcreLexer sets up and initializes the tokenizer to scan for a set of regular expressions. A call to PcreNextToken returns the result of the scan in the current file, starting from the current position.

PcreLexer does not interfere with normal reading of a file. When normal read calls are made, the default tokenizer is used. The tokenizer set up by PcreLexer is only used when PcreNextToken is called.

The syntax for PcreLexer is:

PcreLexer(tokens);

The argument tokens is a list of token definitions. A token definition in turn is a list, with the first element a string containing the regular expression, and the second containing an atom that can describe the type of the token (for easy recognition later).

Calling PcreNextToken() will then return the first matching token from the current input.

The following example sets up the tokenizer to recognize either an integer, or a word consisting only of lowercase letters.

In> DllLoad("pcre")
Out> True
In> PcreLexer({{"[0-9]+",Integer},{"[a-z]+",Word}})
Out> True
In> FromString("123abc")PcreNextToken()
Out> {"123",Integer}
In> FromString("===abc")PcreNextToken()
Out> {"abc",Word}

----
}}}

{{{Piper questions.
+ How does one expand 2^3 into 2*2*2?
}}}


{{{====jedit_gui.props
insert-newline-indent.shortcut=  //Turn off auto indent after newline.
}}}


{{{====How to stop a calculation.

  public void StopCurrentCalculation()
  {
    piper.env.iEvalDepth = piper.env.iMaxEvalDepth+100;
  }
}}}

{{{====Should the Plot2D and Plot3D returned data interfaces be unified?
}}}


{{{====Determining if an error was encountered.

String response = piper.Evaluate(expression);

if (piper.iError != null)
{
  AddLinesStatic(48,"Error> ",piper.iError);
}
}}}


{{{===="Notebook" thoughts.

+ One could create a html-based notebook like the Sage notebook but perhaps it would be better to create a 100% Applet-based notebook which would use a layout manager to lay components out in a vertical fasion.  The mathrider application can generate online notebooks which is similar to the way that GeoGebra generates online viewers.

+ Perhaps it would be useful to put together text documents in a mrw file so that macros can be developed in the same document as the text ?
}}}

{{{====Calculator thoughts.
- Include multiple calculator plugins and create a way for them to interoperate with Piper.
}}}


{{{====Tango icons
http://sourceforge.net/tracker/index.php?func=detail&aid=1755992&group_id=588&atid=300588
}}}

{{{====Beansheet
+ Changing alignment of cells that have different fonts sets all cells to the same font.

}}}


{{{ ====HotEqn bugs.
%piper,output="latex"

a := Hold( ((k+1)/(2*k)) * (1-(1/(K+1)^2)) );

Write(a);

    %hoteqn
      $\frac{k + 1}{2 k}  \left( 1 - \frac{1}{\left( K + 1\right)  ^{2}} \right) $

        %output
          HotEqn updated.
        %end

    %end

%end
----
}}}


{{{ CONTEXT DEPENDENT "RIGHT CLICK" POPUP MENU
+ On fold header: Dialog which allows properties to selected graphically.
+ In fold: Pop up list of commands depending on fold type.

}}}


{{{Sage disadvantages:
+ The implementation is constantly changing beneath you without warning.
}}}

{{{GeoGebra
+ Copy XML protocol to clipboard.
+ Add commands for setting object properties so that these can be set by a program.
}}}
