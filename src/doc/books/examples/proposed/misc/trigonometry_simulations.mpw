%mathpiper,title="Draw a circle."


radius := 1;


degree := 1;

While(degree <=? 360)
[
    radian := N(degree * Pi/180);
    
    //Echo(SinN(radian), CosN(radian));
    
    labelName := "A":ToString(degree);
    
    GeoGebraPoint(labelName, SinN(radian) * radius, CosN(radian) * radius);
    
    JavaCall(geogebra,"setLabelVisible",labelName, False);
    
    
    degree := degree + 5;
];




//GeoGebraPoint("A",2,2);

%/mathpiper






%mathpiper,title="Move a point in a circle."
circleBall := "A";
JavaCall(geogebra,"setLabelVisible",circleBall, False);



lineBall := "B";
JavaCall(geogebra,"setLabelVisible",lineBall, False);




circleXCenter := 0;

circleYCenter := 4;



radius := 2;

degree := 1;

While(degree <=? 360)
[
    radian := N(degree * Pi/180);
    
    xCoordinate := circleXCenter + SinN(radian) * radius;
    
    yCoordinate := circleYCenter + CosN(radian) * radius;
    
    GeoGebraPoint(circleBall, xCoordinate, yCoordinate);
    
    GeoGebraPoint(lineBall, xCoordinate, 0);
    
    degree := degree + 1;
    
    Delay(5);
];



//GeoGebraPoint("A",2,2);

%/mathpiper












%mathpiper,title="Move a point in a circle."





circleBall := "A";
JavaCall(geogebra,"setLabelVisible",circleBall, False);



lineBall := "B";
JavaCall(geogebra,"setLabelVisible",lineBall, False);




circleXCenter := 0;

circleYCenter := 4;



radius := 2;

degree := 1;

While(degree <=? 360)
[
    radian := N(degree * Pi/180);
    
    xCoordinate := circleXCenter + SinN(radian) * radius;
    
    yCoordinate := circleYCenter + CosN(radian) * radius;
    
    GeoGebraPoint(circleBall, xCoordinate, yCoordinate);
    
    GeoGebraPoint(lineBall, xCoordinate, 0);
    
    degree := degree + 1;
    
      
    
    
    
    Delay(10);
];



//GeoGebraPoint("A",2,2);

%/mathpiper












%mathpiper,title="Example with bug."

simulatedTime := 0; //Simulated time in seconds.

dt := 0.01; 

enemyX := 0; 
enemyY := 20; 
enemyHV := -5;
enemyVV := -5;
enemyV := SqrtN((enemyHV)^2 + (enemyVV)^2);

enemyAngle := N( ArcTan(enemyVV/enemyHV) * 180/Pi);

Echo("1: ", enemyAngle);

usX := 0;
usY := 0;
//GeoGebraPoint("Us",usX,usY);

torpedoX := 0;
torpedoY := 0;
torpedoVelocity := 10;

Echo("2: ", enemyAngle);
torpedoHV := N(Cos(enemyAngle * Pi/180) * torpedoVelocity);

Echo("3: ", enemyAngle);
torpedoVV := N(Sin(enemyAngle * Pi/180) * torpedoVelocity);

timeCounter := 0;

Echo("4: ",enemyAngle);

torpedoAngle := N(90 + (ArcSin(((Sin(enemyAngle) * enemyV))/ torpedoVelocity)) * 180/Pi);

Echo("5: ", enemyAngle);

Repeat(400)
[
    //GeoGebraPoint("Enemy",enemyX,enemyY);
    enemyX := enemyX + enemyHV * dt;
    enemyY := enemyY + enemyVV * dt; 
 
    
    
    
    //GeoGebraPoint("Torpedo",torpedoX,torpedoY);
    torpedoX := torpedoX + torpedoHV * dt; 
    torpedoY := torpedoY + torpedoVV * dt;
    
    
    
    
    simulatedTime := simulatedTime + dt; //Move simulated time ahead .01 seconds.
    
    
    //timeCounter++;
    //If(timeCounter = 10, [timeCounter := 0; Echo(torpedoAngle);]);
    
    Delay(10); //.01 seconds.   
];


Echo(enemyAngle);
%/mathpiper











%mathpiper,title="Alex's version."

simulatedTime := 0; //Simulated time in seconds.

dt := 0.01; 

enemyX := 0; 
enemyY := 20; 
enemyHV := -9;
enemyVV := -7;
enemyV := SqrtN((enemyHV)^2 + (enemyVV)^2);

Echo("Enemy velocity: ", enemyV);

enemyAngle := N( ArcTan(enemyHV/enemyVV) * 180/Pi);

Echo("Enemy angle: ", enemyAngle);

usX := 0;
usY := 0;
GeoGebraPoint("Us",usX,usY);

torpedoX := 0;
torpedoY := 0;
torpedoVelocity := 10;


torpedoAngle := N(90 + (ArcSin(((Sin(enemyAngle * Pi/180) * enemyV))/ torpedoVelocity)) * 180/Pi);

Echo("Torpedo angle: ", torpedoAngle);

torpedoHV := N(Cos(torpedoAngle * Pi/180) * torpedoVelocity);


torpedoVV := N(Sin(torpedoAngle * Pi/180) * torpedoVelocity);

timeCounter := 0;







Repeat(400)
[
    GeoGebraPoint("Enemy",enemyX,enemyY);
    enemyX := enemyX + enemyHV * dt;
    enemyY := enemyY + enemyVV * dt; 
 
    
    
    
    GeoGebraPoint("Torpedo",torpedoX,torpedoY);
    torpedoX := torpedoX + torpedoHV * dt; 
    torpedoY := torpedoY + torpedoVV * dt;
    
    
    
    
    simulatedTime := simulatedTime + dt; //Move simulated time ahead .01 seconds.
    
    
    //timeCounter++;
    //If(timeCounter = 10, [timeCounter := 0; Echo(torpedoAngle);]);
    
    Delay(10); //.01 seconds.   
];


%/mathpiper






%mathpiper,title=""

ArcTan2N(x,y) :=
[
    
    if(x >? 0)
    [
        N(ArcTan(y/x));
    ]
    else if(x <? 0 And? y >=? 0)
    [
        N(Pi + ArcTan(y/x));
    ]
    else if(x <? 0 And? y <? 0)
    [
        N(-Pi + ArcTan(y/x));
    ]
    else if(x =? 0 And? y >? 0)
    [
        N(Pi/2);
    ]
    else if(x =? 0 And? y <? 0)
    [
        N(-Pi/2);
    ]
    else if(x =? 0 And? y =? 0)
    [   
        Undefined;
    ];


];

%/mathpiper










%mathpiper,title=""

PolarToRectangular(r, theta) :=
[
    Local(x, y);
    
    x := r * CosN(theta);

    y := r * SinN(theta);
    
    {x, y};
];



RectangularToPolar(x, y) :=
[
    Local(r, theta);
    
    r := SqrtN(x^2 + y^2);

    theta := ArcTan2N(x,y);
    
    If(theta <? 0, N(theta := 2 * Pi + theta));

    {r, theta};
];

%/mathpiper









%mathpiper,title="Test rectangular to polar function."

For(angle := 0, angle <= 6.28, angle := angle + 6.28/20)
[

    Echo("Polar: ", 1,angle);
    
    z1 := PolarToRectangular(1, angle);
    
    Echo("Calculated rectangular: ", z1);
    
    z2 := RectangularToPolar(z1[1], z1[2]);
    
    Echo("Calculated polar: ", z2);

    NewLine();
];

%/mathpiper









%mathpiper,title="Sin law version."

Unbind(t);

simulatedTime := 0; //Simulated time in seconds.

dt := 5;

torpedoX := 0;
torpedoY := 0;
torpedoVelocity := 30.0 * 1/3600;

origin := Point(0,0);

radarTimeDifference := 120;

a := 14.5;
R1 := N(119 * Pi/180);

b := 14;
R2 := N(119 * Pi/180);


C := Abs(R1 - R2);

{x1, y1} := PolarToRectangular(a, R1);

{x2, y2} := PolarToRectangular(b, R2);

p1 := Point(x1,y1);

p2 := Point(x2,y2);

c := N(Distance(p1, p2));


A := N( ArcSin((a * Sin(C))/(c)));

E := N(Pi - A);

//d = r * t, r = d/t.
shipVelocity := c/radarTimeDifference; //Miles per second.

shipMilesPerHour := shipVelocity * 3600;

Echo("Ship mi/Hour: ", shipMilesPerHour);

d := shipVelocity;
e := torpedoVelocity;
D := N(ArcSin((d * Sin(E))/(e)));


If(R1 <? R2, TA := R2 + D, TA := R2 - D);


GeoGebraPoint("Us",0,0);

GeoGebraPoint("P1", p1[1], p1[2]);

GeoGebraPoint("P2", p2[1], p2[2]);




enemyX := p2[1]; 
enemyY := p2[2];

p2Normalized := origin - p1 + p2;

shipHeading := RectangularToPolar(p2Normalized[1], p2Normalized[2])[2];

enemyHV := N(shipVelocity * Cos(shipHeading));
enemyVV := N(shipVelocity * Sin(shipHeading));
enemyV := shipVelocity;

Echo("Enemy velocity: ", enemyV);



usX := 0;
usY := 0;
GeoGebraPoint("Us",usX,usY);






torpedoAngle := TA;

Echo("Torpedo angle: ", torpedoAngle);

torpedoHV := N(Cos(torpedoAngle) * torpedoVelocity);


torpedoVV := N(Sin(torpedoAngle) * torpedoVelocity);

timeCounter := 0;


Echo("A: ", A, N(A * 180/Pi));
Echo("C: ", C, N(C * 180/Pi));
Echo("D: ", D, N(D * 180/Pi));
Echo("E: ", E, N(E * 180/Pi));
Echo("c: ", c);

Repeat(400)
[
    GeoGebraPoint("Enemy",enemyX,enemyY);
    enemyX := enemyX + enemyHV * dt;
    enemyY := enemyY + enemyVV * dt; 
 
    
    
    
    GeoGebraPoint("Torpedo",torpedoX,torpedoY);
    torpedoX := torpedoX + torpedoHV * dt; 
    torpedoY := torpedoY + torpedoVV * dt;
    
    
    
    
    simulatedTime := simulatedTime + dt; //Move simulated time ahead .01 seconds.
    
    
    //timeCounter++;
    //If(timeCounter = 10, [timeCounter := 0; Echo(torpedoAngle);]);
    
    Delay(10); //.01 seconds.   
];
// */

%/mathpiper

    %error,preserve="false"
      Result: No script returned for function: PolarToRectangular from Scripts.java. In function: Eval.  In function: :=,   Error near line 421 starting at index -1.
.   %/error








%mathpiper,title=""

a := 14.5;
R1 := N(119 * Pi/180);

b := 14;
R2 := N(121 * Pi/180);


%/mathpiper







%mathpiper,title=""
 height := RandomInteger(10, 100);



 horizontalDistance := RandomInteger(30, 100);



 angle := N(ArcTan(height/horizontalDistance) * 180/Pi);



 GeoGebraPoint("Target", horizontalDistance, height);

%/mathpiper






