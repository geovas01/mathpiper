//
%group,description="Towers of Hanoi"


%mathpiper

start := {1,2,3,4,5};
middle := {};
end := {};

x := 0;

Echo(x,start,middle,end);

if(IsOdd(Length(start)))
[
    While(x < 31)
    [
        if(Length(start) > 0 And Head(start) = 1)
        [
            Push(middle,PopFront(start));
            twoPegs := {start,end};
        ]
        else if(Length(middle) > 0 And Head(middle) = 1)
        [
            Push(end,PopFront(middle));
            twoPegs := {start,middle};
        ]
        else
        [
            Push(start,PopFront(end));
            twoPegs := {middle,end};
        ];
        
        x++;
        Echo(x,start,middle,end);
        
        if(Length(twoPegs[1]) = 0 And Length(twoPegs[2]) = 0 )
        [
        ]
        else if(Length(twoPegs[1]) = 0)
        [
            Push(twoPegs[1],PopFront(twoPegs[2]));
        ]
        else if(Length(twoPegs[2]) = 0)
        [
            Push(twoPegs[2],PopFront(twoPegs[1]));
        ]
        else
        [
            If(twoPegs[1][1] > twoPegs[2][1], Push(twoPegs[1],PopFront(twoPegs[2])), Push(twoPegs[2],PopFront(twoPegs[1])) );
        ];
        
        x++;
        Echo(x,start,middle,end);
    ];
];


%/mathpiper



%/group



(defn MoveDisk [n source destination spare]
      (if (= n 1)
        nil
        (let [n-1 (dec n)]
          (MoveDisk n-1 source spare destination)
          (MoveDisk 1 source destination spare)
          (MoveDisk n-1 spare destination source))))
          
          
http://www.cs.cmu.edu/~cburch/survey/recurse/MoveDiskex.html

%mathpiper,title=""
MoveDisk(disk, source, destination, spare) :=
{
//Echo(disk, source, destination, spare);
	If(disk =? 1)
	{
		Echo("Move disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
	}
	Else
	{
		MoveDisk(disk-1, source, spare, destination);
		Echo("MOVE disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
		MoveDisk(disk-1, spare, destination, source);
	};

};

MoveDisk(3, 1, 3, 2);
%/mathpiper

    %output,sequence="73",timestamp="2015-03-03 14:22:32.944",preserve="false"
      Result: True
      
      Side Effects:
      Move disk from 1 to 3
      MOVE disk from 1 to 2
      Move disk from 3 to 2
      MOVE disk from 1 to 3
      Move disk from 2 to 1
      MOVE disk from 2 to 3
      Move disk from 1 to 3
      
.   %/output




%mathpiper,title="With code."

code := 'MoveDisk(disk, source, destination, spare);

MoveDisk(disk, source, destination, spare) :=
{
	
	If(disk =? 1)
	{
		Echo("move disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
		Echo("* " ~ Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code);
		

	}
	Else
	{
		MoveDisk(disk-1, source, spare, destination);
		Echo("MOVE disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
		Echo(Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code);
		MoveDisk(disk-1, spare, destination, source);
	};
	


};

MoveDisk(3, 1, 3, 2);
%/mathpiper

    %output,sequence="77",timestamp="2015-03-03 14:40:12.475",preserve="false"
      Result: True
      
      Side Effects:
      move disk from 1 to 3
      "* " ~ MoveDisk(1,1,3,2) 
      MOVE disk from 1 to 2
      MoveDisk(2,1,2,3) 
      move disk from 3 to 2
      "* " ~ MoveDisk(1,3,2,1) 
      MOVE disk from 1 to 3
      MoveDisk(3,1,3,2) 
      move disk from 2 to 1
      "* " ~ MoveDisk(1,2,1,3) 
      MOVE disk from 2 to 3
      MoveDisk(2,2,3,1) 
      move disk from 1 to 3
      "* " ~ MoveDisk(1,1,3,2) 
      
.   %/output

In> code

    %output,sequence="78",timestamp="2015-03-03 14:40:28.586",preserve="false"
      Result: MoveDisk(disk,source,destination,spare)
.   %/output



In> Substitute('disk, 1) code

    %output,sequence="79",timestamp="2015-03-03 14:40:46.322",preserve="false"
      Result: MoveDisk(1,source,destination,spare)
.   %/output



In> Show(TreeView('(Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code)))

    %output,sequence="80",timestamp="2015-03-03 14:41:46.579",preserve="false"
      Result: class javax.swing.JFrame
.   %/output



In> 




%mathpiper,title="With code and operator."

code := 'MoveDisk(disk, source, destination, spare);

MoveDisk(disk, source, destination, spare) :=
{	
	If(disk =? 1)
	{
		Echo("move disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
		Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code;
	}
	Else
	{
		MoveDisk(disk-1, source, spare, destination) 
		+$ 
		//Echo("MOVE disk from " ~ ToString(source) ~ " to " ~ ToString(destination));
		Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code; 
		 +$
		MoveDisk(disk-1, spare, destination, source);
	};
	
};

tree := MoveDisk(3, 1, 3, 2);

Show(TreeView(tree));
%/mathpiper

    %output,sequence="5",timestamp="2015-03-03 14:46:58.142",preserve="false"
      Result: class javax.swing.JFrame
      
      Side Effects:
      move disk from 1 to 3
      move disk from 3 to 2
      move disk from 2 to 1
      move disk from 1 to 3
      
.   %/output






%mathpiper,title="With code and rulebase."

RulebaseHoldArguments("ThreeMoves", [one_, two_, three_]);

code := 'MoveDisk(disk, source, destination, spare);

MoveDisk(disk, source, destination, spare) :=
{
	
	If(disk =? 1)
	{
		
		Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code;
	}
	Else
	{
		ThreeMoves(
			MoveDisk(disk-1, source, spare, destination),
		
			Substitute('disk, disk) Substitute('source, source) Substitute('destination, destination) Substitute('spare, spare) code,
			
			MoveDisk(disk-1, spare, destination, source)
		);
	};
	
};

tree := MoveDisk(3, 1, 3, 2);  // todo:tk:Where is the slider for 10 disks?

Show(TreeView(tree));
%/mathpiper

    %output,sequence="8",timestamp="2015-03-03 14:51:54.106",preserve="false"
      Result: class javax.swing.JFrame
.   %/output


