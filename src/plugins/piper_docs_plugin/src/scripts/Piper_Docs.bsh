//Copyright (C) 2008 Ted Kosan (license information is at the end of this document.)

import javax.swing.*;
import javax.swing.event.*;
import java.util.ArrayList;
import org.gjt.sp.jedit.jEdit;

///{{{Hack to get around classpath race problem for FunctionInfo and FunctionInfoTree
functionInfo(name, description)
{
	instance = classFunctionInfo.newInstance();
	instance.setName(name);
	instance.setDescription(description);
	return instance;
	
}//end method.

functionInfoTree(node)
{
	instance = classFunctionInfoTree.newInstance();
	instance.setNode(node);
	return instance;
}//end method.

//}}}



//System.out.println("VVVVVM " + pageIndex);
//{{{ setEditorPane
setPage(url,save)
{		
	try 
	{ 
		editorPane.setPage(url);
		
		
		//forward button logic.
		if(pageIndex+1 == pageList.size())
		{
			toolPanel.forwardButtonEnabled(false);
		}
		else
		{
			toolPanel.forwardButtonEnabled(true);
		}//end else.
		

		
		
		if(save)
		{
	if(pageIndex >= 0 && url == pageList.get(pageIndex))
	{
		//System.out.println("VVVVVM Same URL");
		return;
	}//end if.
			if(pageIndex+1 != pageList.size())
			{
				pageList = pageList.subList(0,pageIndex+1);
				toolPanel.forwardButtonEnabled(false);
			}//end if.

			
			pageList.add(url);
			pageIndex++;
		}//end if.
		
		
		//back button logic.
		if(pageIndex <= 0)
		{
			toolPanel.backButtonEnabled(false);
		}
		else
		{
			toolPanel.backButtonEnabled(true);
		}//end else.

		//System.out.println("TTTTT " + pageList );
	} catch (IOException e) 
	{
		System.err.println("Attempted to read a bad URL: " + url);
	}//end try/catch
	
}//end method }}}


import javax.swing.*;
import javax.swing.tree.*;
import java.awt.event.*;
import java.awt.*;
//import org.mathrider.piperdocsplugin.FunctionInfo;

//{{{ User functions descriptions.
userFunctionsDescriptions = new String[][]
{
{"+","Arithmetic addition.","Alphabetical","Numbers (Operations)"},
{"-","Arithmetic subtraction or negation.","Alphabetical","Numbers (Operations)"},
{"*","Arithmetic multiplication.","Alphabetical","Numbers (Operations)"},
{"/","Arithmetic division.","Alphabetical","Numbers (Operations)"},
{"<","Test for \"less than\".","Alphabetical","Numbers (Predicates)"},
{">","Test for \"greater than\".","Alphabetical","Numbers (Predicates)"},
{"<=","Test for \"less than or equal\".","Alphabetical","Numbers (Predicates)"},
{">=","Test for \"greater than or equal\".","Alphabetical","Numbers (Predicates)"},
{"^","Arithmetic power.","Alphabetical","Numbers (Operations)"},
{"<<","Binary shift left operator.","Alphabetical","Numbers (Operations)"},
{">>","Binary shift right operator","Alphabetical","Numbers (Operations)"},
{"!","Factorial.","Alphabetical","Numbers (Operations)","Combinatorics"},
{"!!","Factorial and related functions.","Alphabetical","Numbers (Operations)","Combinatorics"},
{"***","Factorial and related functions.","Alphabetical","Numbers (Operations)","Combinatorics"},
{".","Return the dot product of tensors.","Alphabetical","Linear Algebra"},
{":","Prepend an item to a list, or concatenate strings.","Alphabetical","Functional Operators"},
{"@","Apply a function.","Alphabetical","Functional Operators"},
{"/@","Apply a function to all entries in a list.","Alphabetical","Functional Operators"},
{"..","Construct a list of consecutive integers.","Alphabetical","Functional Operators"},
{"/:","Local simplification rules.","Alphabetical","Control Flow"},
{"/::","Local simplification rules.","Alphabetical","Control Flow"},
{"!=","Test for \"not equal\".","Alphabetical","Predicates"},
{"=","Test for equality of expressions.","Alphabetical","Predicates"},
{"%","The previous result.","Alphabetical","Constants (System)"},
{":=","Assign a variable or a list; define a function.","Alphabetical","Variables"},
{"++","Increment a variable.","Alphabetical","Variables"},
{"--","Decrement a variable.","Alphabetical","Variables"},
{"o","Return the outer tensor product.","Alphabetical","Linear Algebra"},
{"Abs","Absolute value (or modulus) of a number.","Alphabetical","Calculus Related (Symbolic)"},
{"Add","Find the sum of a list of values.","Alphabetical","Series"},
{"AddTo","Add an equation to a set of equations or set of set of equations.","Alphabetical","Functional Operators"},
{"And","Logical conjunction.","Alphabetical","Predicates"},
{"Append","Append an entry at the end of a list.","Alphabetical","Lists (Operations)"},
{"Apply","Apply a function to arguments.","Alphabetical","Control Flow"},
{"ArcCos","Inverse trigonometric function arc-cosine.","Alphabetical","Calculus Related (Symbolic)"},
{"ArcSin","Inverse trigonometric function arc-sine.","Alphabetical","Calculus Related (Symbolic)"},
{"ArcTan","Inverse trigonometric function arc-tangent.","Alphabetical","Calculus Related (Symbolic)"},
{"Arg","Argument of a complex number.","Alphabetical","Numbers (Complex)"},
{"Array'Create","","Alphabetical"},
{"Array'CreateFromList","","Alphabetical"},
{"Array'Returns","","Alphabetical"},
{"Array'Set","","Alphabetical"},
{"Array'Size","","Alphabetical"},
{"Array'ToList","","Alphabetical"},
{"Assert","","Alphabetical"},
{"Assoc","Return an element stored in an association list.","Alphabetical","Lists (Operations)"},
{"AssocDelete","Delete an entry in an association list.","Alphabetical","Lists (Operations)"},
{"AssocIndices","Return the keys in an association list.","Alphabetical","Lists (Operations)"},
{"Atom","Convert string to atom.","Alphabetical","String Manipulation"},
{"BaseVector","Base vector.","Alphabetical","Linear Algebra"},
{"Bernoulli","Bernoulli numbers and polynomials","Alphabetical","Special"},
{"BernoulliDistribution","Bernoulli distribution.","Alphabetical","Probability & Statistics"},
{"BigOh","Drop all terms of a certain order in a polynomial.","Alphabetical","Series"},
{"Bin","Binomial coefficients.","Alphabetical","Combinatorics"},
{"BinomialDistribution","Binomial distribution.","Alphabetical","Probability & Statistics"},
{"BinSplitData","","Alphabetical"},
{"BinSplitFinal","","Alphabetical"},
{"BinSplitNum","","Alphabetical"},
{"BitAnd","","Alphabetical"},
{"BitOr","","Alphabetical"},
{"BitXor","","Alphabetical"},
{"Bodied","","Alphabetical"},
{"BracketRational","","Alphabetical"},
{"BubbleSort","Sort a list.","Alphabetical","Lists (Operations)"},
{"Builtin'Precision'Returns","","Alphabetical"},
{"Builtin'Precision'Set","","Alphabetical"},
{"CachedConstant","","Alphabetical"},
{"CanProve","Try to prove a statement.","Alphabetical","Propositional Logic"},
{"Catalan","Catalan's Constant.","Alphabetical","Constants (Mathematical)"},
{"CatalanNumber","Teturn the nth Catalan Number.","Alphabetical","Number Theory"},
{"Ceil","Round a number upwards.","Alphabetical","Numbers (Operations)"},
{"CForm","Export an expression to C++ code form.","Alphabetical","Input/Output"},
{"CharacteristicEquation","Return the characteristic polynomial of a matrix.","Alphabetical","Linear Algebra"},
{"Check","","Alphabetical"},
{"ChiSquareTest","Pearson's ChiSquare test.","Alphabetical","Probability & Statistics"},
{"Cholesky","Find the Cholesky Decomposition of a matrix.","Alphabetical","Linear Algebra"},
{"Clear","Unassign a variable.","Alphabetical","Variables"},
{"ClearError","","Alphabetical"},
{"ClearErrors","","Alphabetical"},
{"Coef","Return the coefficient of a polynomial.","Alphabetical","Polynomials (Operations)"},
{"CoFactor","Return the cofactor of a matrix.","Alphabetical","Linear Algebra"},
{"Complex","Construct a complex number.","Alphabetical","Numbers (Complex)"},
{"Concat","Concatenate lists.","Alphabetical","Lists (Operations)"},
{"ConcatStrings","Concatenate strings.","Alphabetical","String Manipulation"},
{"Conjugate","Complex conjugate.","Alphabetical","Numbers (Complex)"},
{"Contains","Test whether a list contains a certain element.","Alphabetical","Lists (Operations)"},
{"Content","Return the content of a univariate polynomial.","Alphabetical","Polynomials (Operations)"},
{"ContFrac","Continued fraction expansion.","Alphabetical","Numbers (Operations)"},
{"ContFracEval","","Alphabetical"},
{"ContFracList","","Alphabetical"},
{"Cos","Trigonometric cosine function.","Alphabetical","Calculus Related (Symbolic)"},
{"Count","Count the number of occurrences of an expression.","Alphabetical","Lists (Operations)"},
{"CrossProduct","Outer product of vectors.","Alphabetical","Linear Algebra"},
{"Curl","Curl of a vector field.","Alphabetical","Calculus Related (Symbolic)"},
{"CurrentFile","","Alphabetical"},
{"CurrentLine","","Alphabetical"},
{"Cyclotomic","Construct the cyclotomic polynomial.","Alphabetical","Number Theory"},
{"D","Take derivative of an expression with respect to a variable.","Alphabetical","Calculus Related (Symbolic)"},
{"Decimal","Decimal representation of a rational.","Alphabetical","Numbers (Operations)"},
{"DefaultTokenizer","Select the default syntax tokenizer for parsing the input.","Alphabetical","Input/Output"},
{"DefLoad","Load a .def file.","Alphabetical","Input/Output"},
{"DefMacroRuleBase","","Alphabetical"},
{"DefMacroRuleBaseListed","","Alphabetical"},
{"Degree","Return the degree of a polynomial.","Alphabetical","Polynomials (Operations)"},
{"Delete","Delete an element from a list.","Alphabetical","Lists (Operations)"},
{"Denom","Denominator of an expression","Alphabetical","Numbers (Operations)"},
{"DestructiveAppend","Destructively append an entry to a list.","Alphabetical","Lists (Operations)"},
{"DestructiveDelete","Delete an element destructively from a list.","Alphabetical","Lists (Operations)"},
{"DestructiveInsert","Insert an element destructively into a list.","Alphabetical","Lists (Operations)"},
{"DestructiveReplace","Replace an entry destructively in a list.","Alphabetical","Lists (Operations)"},
{"DestructiveReverse","Reverse a list destructively.","Alphabetical","Lists (Operations)"},
{"Determinant","Return the determinant of a matrix.","Alphabetical","Linear Algebra"},
{"Diagonal","Extract the diagonal from a matrix.","Alphabetical","Linear Algebra"},
{"DiagonalMatrix","Construct a diagonal matrix.","Alphabetical","Linear Algebra"},
{"Difference","Return the difference of two lists.","Alphabetical","Lists (Operations)"},
{"Div","Determine divisor of two mathematical objects.","Alphabetical","Numbers (Operations)"},
{"Diverge","Divergence of a vector field.","Alphabetical","Calculus Related (Symbolic)"},
{"Divisors","Number of divisors.","Alphabetical","Number Theory"},
{"DivisorsList","The list of divisors.","Alphabetical","Number Theory"},
{"DivisorsSum","The sum of divisors.","Alphabetical","Number Theory"},
{"Dot","Return the dot product of tensors","Alphabetical","Linear Algebra"},
{"Drop","Drop a range of elements from a list.","Alphabetical","Lists (Operations)"},
{"DumpErrors","","Alphabetical"},
{"Echo","High-level printing routine.","Alphabetical","Input/Output"},
{"EigenValues","Return the eigenvalues of a matrix.","Alphabetical","Linear Algebra"},
{"EigenVectors","Return the eigenvectors of a matrix.","Alphabetical","Linear Algebra"},
{"Eliminate","Substitute and simplify.","Alphabetical","Solvers (Symbolic)"},
{"EndOfFile","End-of-file marker","Alphabetical","Constants (System)"},
{"Equals","","Alphabetical"},
{"Euler","Euler numbers and polynomials.","Alphabetical","Special"},
{"Eulerian","Eulerian numbers.","Alphabetical","Combinatorics"},
{"Eval","Force evaluation of an expression.","Alphabetical","Control Flow"},
{"EvalFormula","Print an evaluation nicely with ASCII art.","Alphabetical","Input/Output"},
{"EvaluateHornerScheme","Fast evaluation of polynomials.","Alphabetical","Polynomials (Operations)"},
{"Exp","Exponential function.","Alphabetical","Calculus Related (Symbolic)"},
{"Expand","Transform a polynomial to an expanded form.","Alphabetical","Polynomials (Operations)"},
{"ExpandBrackets","Expand all brackets.","Alphabetical","Polynomials (Operations)"},
{"ExtraInfo'Returns","","Alphabetical"},
{"ExtraInfo'Set","","Alphabetical"},
{"Factor","Factorization, in pretty form.","Alphabetical","Number Theory"},
{"FactorialSimplify","Simplify hypergeometric expressions containing factorials.","Alphabetical","Expression Simplification"},
{"Factorize","Find the product of a list of values.","Alphabetical","Series"},
{"Factors","Factorization.","Alphabetical","Number Theory"},
{"False","Boolean constant representing false.","Alphabetical","Constants (System)"},
{"FermatNumber","Return the nth Fermat Number.","Alphabetical","Number Theory"},
{"FillList","Fill a list with a certain expression.","Alphabetical","Lists (Operations)"},
{"Find","Return the index at which a certain element occurs.","Alphabetical","Lists (Operations)"},
{"FindFile","Find a file in the current path.","Alphabetical","Input/Output"},
{"FindFunction","","Alphabetical"},
{"FindRealRoots","Find the real roots of a polynomial.","Alphabetical","Solvers (Numeric)"},
{"FlatCopy","Copy the top level of a list.","Alphabetical","Lists (Operations)"},
{"Flatten","Flatten expression with respect to some operator.","Alphabetical","Lists (Operations)"},
{"Floor","Round a number downwards.","Alphabetical","Numbers (Operations)"},
{"For","C-style for loop.","Alphabetical","Control Flow"},
{"ForEach","Loop over all entries in a list","Alphabetical","Control Flow"},
{"FromBase","Conversion of a number from non-decimal base to decimal base","Alphabetical","Numbers (Operations)"},
{"FromFile","Connect current input to a file.","Alphabetical","Input/Output"},
{"FromString","Connect current input to a string.","Alphabetical","Input/Output"},
{"FullForm","Print an expression in Lisp format.","Alphabetical","Input/Output"},
{"FuncList","Return a list of functions used in an expression.","Alphabetical","Lists (Operations)"},
{"FuncListArith","Return a list of functions used in an expression.","Alphabetical","Lists (Operations)"},
{"FuncListSome","Return a list of functions used in an expression.","Alphabetical","Lists (Operations)"},
{"Function","Declare or define a function.","Alphabetical","Control Flow"},
{"Gamma","Euler's Gamma function.","Alphabetical","Special"},
{"gamma","Euler's constant gamma.","Alphabetical","Constants (Mathematical)"},
{"GarbageCollect","","Alphabetical"},
{"GaussianFactors","Factorization in Gaussian integers.","Alphabetical","Number Theory"},
{"GaussianGcd","Greatest common divisor in Gaussian integers.","Alphabetical","Number Theory"},
{"GaussianNorm","Norm of a Gaussian integer.","Alphabetical","Number Theory"},
{"Gcd","Greatest common divisor.","Alphabetical","Numbers (Operations)"},
{"GenericTypeName","","Alphabetical"},
{"ReturnsCoreError","","Alphabetical"},
{"ReturnsError","","Alphabetical"},
{"ReturnsErrorTableau","","Alphabetical"},
{"ReturnsTime","","Alphabetical"},
{"GlobalPop","Restore variables using a global stack.","Alphabetical","Lists (Operations)"},
{"GlobalPush","Save variables using a global stack.","Alphabetical","Lists (Operations)"},
{"GoldenRatio","The Golden Ratio.","Alphabetical","Constants (Mathematical)"},
{"GreaterThan","","Alphabetical"},
{"GuessRational","","Alphabetical"},
{"HarmonicNumber","Teturn the nth Harmonic Number.","Alphabetical","Number Theory"},
{"HasExpr","Check for expression containing a subexpression.","Alphabetical","Predicates"},
{"HasExprArith","Check for expression containing a subexpression.","Alphabetical","Predicates"},
{"HasExprSome","Check for expression containing a subexpression.","Alphabetical","Predicates"},
{"HasFunc","Check for expression containing a function.","Alphabetical","Predicates"},
{"HasFuncArith","Check for expression containing a function.","Alphabetical","Predicates"},
{"HasFuncSome","Check for expression containing a function.","Alphabetical","Predicates"},
{"Head","Return the first element of a list.","Alphabetical","Lists (Operations)"},
{"HeapSort","Sort a list.","Alphabetical","Lists (Operations)"},
{"HessianMatrix","Create a Hessian matrix.","Alphabetical","Matrices (Special)"},
{"HilbertInverseMatrix","Create a Hilbert inverse matrix.","Alphabetical","Matrices (Special)"},
{"HilbertMatrix","Create a Hilbert matrix.","Alphabetical","Matrices (Special)"},
{"Hold","Keep expression unevaluated.","Alphabetical","Control Flow"},
{"HoldArg","","Alphabetical"},
{"HoldArgNr","","Alphabetical"},
{"Horner","Convert a polynomial into the Horner form.","Alphabetical","Polynomials (Operations)"},
{"I","Imaginary unit.","Alphabetical","Numbers (Complex)"},
{"Identity","Make identity matrix.","Alphabetical","Linear Algebra"},
{"If","Implements a branch point (makes a decision).","Alphabetical","Control Flow"},
{"Im","Imaginary part of a complex number.","Alphabetical","Numbers (Complex)"},
{"Infinity","Constant representing mathematical infinity.","Alphabetical","Constants (Mathematical)"},
{"Infix","","Alphabetical"},
{"InNumericMode","","Alphabetical"},
{"InProduct","Inner product of vectors (deprecated).","Alphabetical","Linear Algebra"},
{"Insert","Insert an element into a list.","Alphabetical","Lists (Operations)"},
{"Integrate","Integration.","Alphabetical","Calculus Related (Symbolic)"},
{"Intersection","Return the intersection of two lists.","Alphabetical","Lists (Operations)"},
{"IntLog","","Alphabetical"},
{"IntNthRoot","","Alphabetical"},
{"IntPowerNum","","Alphabetical"},
{"InVerboseMode","","Alphabetical"},
{"Inverse","Return the inverse of a matrix","Alphabetical","Linear Algebra"},
{"InverseTaylor","Taylor expansion of inverse.","Alphabetical","Series"},
{"IsAmicablePair","Test for a pair of amicable numbers.","Alphabetical","Number Theory"},
{"IsAtom","Test for an atom.","Alphabetical","Predicates"},
{"IsBodied","","Alphabetical"},
{"IsBoolean","Test for a Boolean value.","Alphabetical","Predicates"},
{"IsBound","Test for a bound variable.","Alphabetical","Predicates"},
{"IsCarmichaelNumber","Test for a Carmichael number.","Alphabetical","Number Theory"},
{"IsCFormable","Check possibility of exporting expression to C++ code form.","Alphabetical","Input/Output"},
{"IsComposite","Test for a composite number.","Alphabetical","Number Theory"},
{"IsConstant","Test for a constant.","Alphabetical","Predicates"},
{"IsCoprime","Test if integers are coprime.","Alphabetical","Number Theory"},
{"IsDiagonal","Test for a diagonal matrix.","Alphabetical","Matrices (Predicates)"},
{"IsError","","Alphabetical"},
{"IsEven","Test for an even integer.","Alphabetical","Predicates"},
{"IsEvenFunction","Return true if function is an even function, False otherwise.","Alphabetical","Predicates"},
{"IsFreeOf","Test whether expression depends on variable.","Alphabetical","Predicates"},
{"IsFunction","Test for a composite object.","Alphabetical","Predicates"},
{"IsGaussianInteger","Test for a Gaussian integer.","Alphabetical","Predicates"},
{"IsGaussianPrime","Test for a Gaussian prime.","Alphabetical","Number Theory"},
{"IsGaussianUnit","Test for a Gaussian unit.","Alphabetical","Number Theory"},
{"IsGeneric","","Alphabetical"},
{"IsHermitian","Test for a Hermitian matrix.","Alphabetical","Matrices (Predicates)"},
{"IsIdempotent","Test for an idempotent matrix.","Alphabetical","Matrices (Predicates)"},
{"IsInfinity","Test for an infinity","Alphabetical","Predicates"},
{"IsInfix","","Alphabetical"},
{"IsIrregularPrime","Test for an irregular prime.","Alphabetical","Number Theory"},
{"IsList","Test for a list.","Alphabetical","Predicates"},
{"IsLowerTriangular","Test for a lower triangular matrix.","Alphabetical","Matrices (Predicates)"},
{"IsMatrix","Test for a matrix.","Alphabetical","Matrices (Predicates)"},
{"IsNegativeInteger","Test for a negative integer.","Alphabetical","Predicates"},
{"IsNegativeNumber","Test for a negative number.","Alphabetical","Predicates"},
{"IsNegativeReal","Test for a numerically negative value.","Alphabetical","Predicates"},
{"IsNonObject","Test whether argument is not an Object()","Alphabetical","Predicates"},
{"IsNonZeroInteger","Test for a nonzero integer.","Alphabetical","Predicates"},
{"IsNotZero","Test for a nonzero number.","Alphabetical","Predicates"},
{"IsNumber","Test for a number.","Alphabetical","Predicates"},
{"IsNumericList","Test for a list of numbers.","Alphabetical","Predicates"},
{"IsOdd","Test for an odd integer.","Alphabetical","Predicates"},
{"IsOddFunction","Return true if function is an odd function, False otherwise.","Alphabetical","Predicates"},
{"IsOrthogonal","Test for an orthogonal matrix.","Alphabetical","Matrices (Predicates)"},
{"IsPositiveInteger","Test for a positive integer.","Alphabetical","Predicates"},
{"IsPositiveNumber","Test for a positive number.","Alphabetical","Predicates"},
{"IsPositiveReal","Test for a numerically positive value.","Alphabetical","Predicates"},
{"IsPostfix","","Alphabetical"},
{"IsPrefix","","Alphabetical"},
{"IsPrime","Test for a prime number.","Alphabetical","Number Theory"},
{"IsPrimePower","Test for a power of a prime number.","Alphabetical","Number Theory"},
{"IsPromptShown","","Alphabetical"},
{"IsQuadraticResidue","Functions related to finite groups.","Alphabetical","Number Theory"},
{"IsRational","Test whether argument is a rational.","Alphabetical","Numbers (Predicates)"},
{"IsScalar","Test for a scalar.","Alphabetical","Matrices (Predicates)"},
{"IsSkewSymmetric","Test for a skew-symmetric matrix.","Alphabetical","Matrices (Predicates)"},
{"IsSmallPrime","Test for a small prime number.","Alphabetical","Number Theory"},
{"IsSquareFree","Test for a square-free number.","Alphabetical","Number Theory"},
{"IsSquareMatrix","Test for a square matrix.","Alphabetical","Matrices (Predicates)"},
{"IsString","Test for an string.","Alphabetical","Predicates"},
{"IsSymmetric","Test for a symmetric matrix.","Alphabetical","Matrices (Predicates)"},
{"IsTwinPrime","Test for a twin prime.","Alphabetical","Number Theory"},
{"IsUnitary","Test for a unitary matrix.","Alphabetical","Matrices (Predicates)"},
{"IsUpperTriangular","Test for an upper triangular matrix.","Alphabetical","Matrices (Predicates)"},
{"IsVector","Test for a vector.","Alphabetical","Matrices (Predicates)"},
{"IsZero","Test whether argument is zero.","Alphabetical","Numbers (Predicates)"},
{"IsZeroVector","Test whether list contains only zeroes.","Alphabetical","Predicates"},
{"JacobianMatrix","Calculate a Jacobian matrix of n functions in n variables.","Alphabetical","Matrices (Special)"},
{"JacobiSymbol","Functions related to finite groups.","Alphabetical","Number Theory"},
{"KnownFailure","","Alphabetical"},
{"LagrangeInterpolant","Polynomial interpolation.","Alphabetical","Series"},
{"LambertW","Lambert's W function.","Alphabetical","Special"},
{"LaplaceTransform","Laplace transform","Alphabetical","Transforms"},
{"Lcm","Least common multiple.","Alphabetical","Numbers (Operations)"},
{"LeadingCoef","Return the leading coefficient of a polynomial.","Alphabetical","Polynomials (Operations)"},
{"LeftPrecedence","","Alphabetical"},
{"LegendreSymbol","Functions related to finite groups.","Alphabetical","Number Theory"},
{"Length","Return the length of a list or string.","Alphabetical","Lists (Operations)"},
{"LessThan","","Alphabetical"},
{"LeviCivita","Totally anti-symmetric Levi-Civita symbol.","Alphabetical","Combinatorics"},
{"Limit","Limit of an expression.","Alphabetical","Calculus Related (Symbolic)"},
{"LispRead","Read expressions in Lisp syntax.","Alphabetical","Input/Output"},
{"LispReadListed","Read expressions in Lisp syntax.","Alphabetical","Input/Output"},
{"List","Construct a list.","Alphabetical","Lists (Operations)"},
{"Listify","Convert a function application to a list.","Alphabetical","Lists (Operations)"},
{"Ln","Natural logarithm.","Alphabetical","Calculus Related (Symbolic)"},
{"LnCombine","Combine logarithmic expressions using standard logarithm rules","Alphabetical","Expression Simplification"},
{"LnExpand","Expand a logarithmic expression using standard logarithm rules.","Alphabetical","Expression Simplification"},
{"Load","Evaluate all expressions in a file.","Alphabetical","Input/Output"},
{"Local","Declare new local variables.","Alphabetical","Variables"},
{"LocalSymbols","Create unique local symbols with the given prefix.","Alphabetical","Variables"},
{"LogicTest","","Alphabetical"},
{"LogicVerify","","Alphabetical"},
{"Macro","Declare or define a macro.","Alphabetical","Control Flow"},
{"MakeVector","Creates a vector containing uniquely numbered variable names.","Alphabetical","Lists (Operations)"},
{"Map","Apply an n-ary function to all entries in a list.","Alphabetical","Lists (Operations)"},
{"MapArgs","Apply a function to all top-level arguments.","Alphabetical","Control Flow"},
{"MapSingle","Apply a unary function to all entries in a list.","Alphabetical","Lists (Operations)"},
{"MatchLinear","Match an expression to a polynomial of degree one in a variable.","Alphabetical","Predicates"},
{"MathAbs","","Alphabetical","Numeric"},
{"MathAdd","","Alphabetical","Numeric"},
{"MathAnd","","Alphabetical","Numeric"},
{"MathArcCos","","Alphabetical","Numeric"},
{"MathArcCosh","","Alphabetical","Numeric"},
{"MathArcSin","","Alphabetical","Numeric"},
{"MathArcSinh","","Alphabetical","Numeric"},
{"MathArcTan","","Alphabetical","Numeric"},
{"MathArcTanh","","Alphabetical","Numeric"},
{"MathCeil","","Alphabetical","Numeric"},
{"MathCos","","Alphabetical","Numeric"},
{"MathCosh","","Alphabetical","Numeric"},
{"MathDiv","","Alphabetical","Numeric"},
{"MathDivide","","Alphabetical","Numeric"},
{"MathExp","","Alphabetical","Numeric"},
{"MathFloor","","Alphabetical","Numeric"},
{"MathGcd","","Alphabetical","Numeric"},
{"MathReturnsExactBits","","Alphabetical","Numeric"},
{"MathLog","","Alphabetical","Numeric"},
{"MathMod","","Alphabetical","Numeric"},
{"MathMultiply","","Alphabetical","Numeric"},
{"MathNot","","Alphabetical","Numeric"},
{"MathOr","","Alphabetical","Numeric"},
{"MathPower","","Alphabetical","Numeric"},
{"MathSetExactBits","","Alphabetical","Numeric"},
{"MathSin","","Alphabetical","Numeric"},
{"MathSinh","","Alphabetical","Numeric"},
{"MathSqrt","","Alphabetical","Numeric"},
{"MathSubtract","","Alphabetical","Numeric"},
{"MathTan","","Alphabetical","Numeric"},
{"MathTanh","","Alphabetical","Numeric"},
{"MatrixPower","Return the nth power of a square matrix.","Alphabetical","Linear Algebra"},
{"MatrixSolve","Solve a system of equations.","Alphabetical","Solvers (Symbolic)"},
{"Max","Maximum of a number of values.","Alphabetical","Numbers (Operations)"},
{"MaxEvalDepth","Set the maximum evaluation depth.","Alphabetical","Control Flow"},
{"MaximumBound","Return upper bounds on the absolute values of real roots of a polynomial.","Alphabetical","Solvers (Numeric)"},
{"Min","Minimum of a number of values.","Alphabetical","Numbers (Operations)"},
{"MinimumBound","Return lower bounds on the absolute values of real roots of a polynomial.","Alphabetical","Solvers (Numeric)"},
{"Minor","Return the principal minor of a matrix.","Alphabetical","Linear Algebra"},
{"Mod","Determine remainder of two mathematical objects after dividing one by the other","Alphabetical","Numbers (Operations)"},
{"Moebius","The Moebius function.","Alphabetical","Number Theory"},
{"MoebiusDivisorsList","The list of divisors and Moebius values.","Alphabetical","Number Theory"},
{"Monic","Return the monic part of a polynomial.","Alphabetical","Polynomials (Operations)"},
{"MultiplyNum","","Alphabetical"},
{"N","Try determine numerical approximation of expression.","Alphabetical","Numbers (Operations)"},
{"NearRational","","Alphabetical"},
{"NewLine","Print one or more newline characters.","Alphabetical","Input/Output"},
{"Newton","Solve an equation numerically with Newton's method.","Alphabetical","Solvers (Numeric)"},
{"NewtonNum","","Alphabetical"},
{"NextPrime","Generate a prime following a number.","Alphabetical","Number Theory"},
{"NFunction","Make wrapper for numeric functions.","Alphabetical","Functional Operators"},
{"Nl","The newline character.","Alphabetical","Input/Output"},
{"NonN","","Alphabetical"},
{"Normalize","Normalize a vector.","Alphabetical","Linear Algebra"},
{"Not","Logical negation","Alphabetical","Predicates"},
{"NrArgs","Return the number of top-level arguments.","Alphabetical","Lists (Operations)"},
{"Nth","Return the n-th element of a list.","Alphabetical","Lists (Operations)"},
{"NthRoot","","Alphabetical"},
{"Numer","numerator of an expression","Alphabetical","Numbers (Operations)"},
{"NumRealRoots","Return the number of real roots of a polynomial.","Alphabetical","Solvers (Numeric)"},
{"Object","Create an incomplete type.","Alphabetical","Variables"},
{"OdeOrder","Return order of an ODE.","Alphabetical","Differential Equations"},
{"OdeSolve","General ODE solver.","Alphabetical","Differential Equations"},
{"OdeTest","Test the solution of an ODE.","Alphabetical","Differential Equations"},
{"OldSolve","Old version of Solve.","Alphabetical","Solvers (Symbolic)"},
{"OMDef","Define translations from Piper to OpenMath and vice-versa.","Alphabetical","Input/Output"},
{"OMForm","Convert Piper expression to OpenMath.","Alphabetical","Input/Output"},
{"OMRead","Convert expression from OpenMath to Piper expression.","Alphabetical","Input/Output"},
{"OpLeftPrecedence","","Alphabetical"},
{"OpPrecedence","","Alphabetical"},
{"OpRightPrecedence","","Alphabetical"},
{"Or","Logical disjunction.","Alphabetical","Predicates"},
{"OrthoG","Gegenbauer orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthogonalBasis","Create an orthogonal basis.","Alphabetical","Linear Algebra"},
{"OrthoGSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoH","Hermite orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoHSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoL","Laguerre orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoLSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthonormalBasis","Create an orthonormal basis.","Alphabetical","Linear Algebra"},
{"OrthoP","Legendre and Jacobi orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoPoly","Internal function for constructing orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoPolySum","Internal function for computing series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoPSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoT","Chebyshev polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoTSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoU","Chebyshev polynomials.","Alphabetical","Polynomials (Special)"},
{"OrthoUSum","Sums of series of orthogonal polynomials.","Alphabetical","Polynomials (Special)"},
{"Outer","Return outer tensor product.","Alphabetical","Linear Algebra"},
{"PAdicExpand","P-adic expansion.","Alphabetical","Number Theory"},
{"Partition","Partition a list in sublists of equal length.","Alphabetical","Lists (Operations)"},
{"PatchLoad","Execute commands between <? and ?> in file.","Alphabetical","Input/Output"},
{"PatchString","Execute commands between <? and ?> in strings.","Alphabetical","String Manipulation"},
{"PDF","Probability density function.","Alphabetical","Probability & Statistics"},
{"Permutations","Return all permutations of a list.","Alphabetical","Combinatorics"},
{"Pi","Mathematical constant pi.","Alphabetical","Constants (Mathematical)"},
{"Plot2D","Adaptive two-dimensional plotting.","Alphabetical","Input/Output"},
{"Plot3DS","Three-dimensional (surface) plotting.","Alphabetical","Input/Output"},
{"Pop","Remove an element from a stack.","Alphabetical","Lists (Operations)"},
{"PopBack","Remove an element from the bottom of a stack.","Alphabetical","Lists (Operations)"},
{"PopFront","Remove an element from the top of a stack.","Alphabetical","Lists (Operations)"},
{"Postfix","","Alphabetical"},
{"Prefix","","Alphabetical"},
{"PrettyForm","Print an expression nicely with ASCII art.","Alphabetical","Input/Output"},
{"PrimitivePart","Return the primitive part of a univariate polynomial.","Alphabetical","Polynomials (Operations)"},
{"PrintList","Print list with padding.","Alphabetical","Lists (Operations)"},
{"Prog","","Alphabetical"},
{"ProperDivisors","The number of proper divisors.","Alphabetical","Number Theory"},
{"ProperDivisorsSum","The sum of proper divisors.","Alphabetical","Number Theory"},
{"Pslq","Search for integer relations between reals.","Alphabetical","Numbers (Operations)"},
{"PSolve","Solve a polynomial equation.","Alphabetical","Solvers (Symbolic)"},
{"Push","Add an element on top of a stack.","Alphabetical","Lists (Operations)"},
{"RadSimp","Simplify an expression with nested radicals.","Alphabetical","Expression Simplification"},
{"RamanujanSum","Compute the \"Ramanujan sum\".","Alphabetical","Number Theory"},
{"Random","Pseudo-random number generator.","Alphabetical","Numbers (Random)"},
{"RandomIntegerMatrix","Generate a matrix of random integers.","Alphabetical","Numbers (Random)"},
{"RandomIntegerVector","Generate a vector of random integers.","Alphabetical","Numbers (Random)"},
{"RandomPoly","Construct a random polynomial.","Alphabetical","Numbers (Random)"},
{"RandomSeed","Initialize random number generator.","Alphabetical","Numbers (Random)"},
{"RandVerifyArithmetic","","Alphabetical"},
{"Rationalize","Convert floating point numbers to fractions.","Alphabetical","Numbers (Operations)"},
{"Re","Real part of a complex number.","Alphabetical","Numbers (Complex)"},
{"Read","Read an expression from current input.","Alphabetical","Input/Output"},
{"ReadCmdLineString","Read an expression from the command line and return in a string.","Alphabetical","Input/Output"},
{"ReadToken","Read a token from current input.","Alphabetical","Input/Output"},
{"RemoveDuplicates","Remove any duplicates from a list.","Alphabetical","Lists (Operations)"},
{"Replace","Replace an entry in a list.","Alphabetical","Lists (Operations)"},
{"Retract","","Alphabetical"},
{"Reverse","Return the reversed list (without touching the original).","Alphabetical","Lists (Operations)"},
{"ReversePoly","Solve h(f(x))=g(x)+O(x^n) for h.","Alphabetical","Series"},
{"RightAssociative","","Alphabetical"},
{"RightPrecedence","","Alphabetical"},
{"Rng","Manipulate random number generators as objects.","Alphabetical","Numbers (Random)"},
{"RngCreate","Manipulate random number generators as objects.","Alphabetical","Numbers (Random)"},
{"RngSeed","Manipulate random number generators as objects.","Alphabetical","Numbers (Random)"},
{"Round","Round a number to the nearest integer.","Alphabetical","Numbers (Operations)"},
{"RoundTo","","Alphabetical"},
{"Rule","","Alphabetical"},
{"RuleBase","","Alphabetical"},
{"RuleBaseArgList","","Alphabetical"},
{"RuleBaseListed","","Alphabetical"},
{"Secure","","Alphabetical"},
{"Select","Select entries satisfying some predicate.","Alphabetical","Lists (Operations)"},
{"Set","Assign a variable.","Alphabetical","Variables"},
{"SetGlobalLazyVariable","Global variable is to be evaluated lazily.","Alphabetical","Variables"},
{"ShiftLeft","","Alphabetical"},
{"ShiftRight","","Alphabetical"},
{"Sign","Sign of a number.","Alphabetical","Calculus Related (Symbolic)"},
{"Simplify","Try to simplify an expression.","Alphabetical","Expression Simplification"},
{"Sin","Trigonometric sine function.","Alphabetical","Calculus Related (Symbolic)"},
{"Solve","Solve an equation symbolically.","Alphabetical","Solvers (Symbolic)"},
{"SolveMatrix","Solve a linear system.","Alphabetical","Linear Algebra"},
{"Space","Print one or more spaces.","Alphabetical","Input/Output"},
{"Sparsity","Return the sparsity of a matrix.","Alphabetical","Linear Algebra"},
{"Sqrt","Square root.","Alphabetical","Calculus Related (Symbolic)"},
{"SquareFree","Return the square-free part of polynomial","Alphabetical","Polynomials (Operations)"},
{"SquareFreeDivisorsList","The list of square-free divisors.","Alphabetical","Number Theory"},
{"StirlingNumber1","Return the n,mth Stirling Number of the first kind.","Alphabetical","Number Theory"},
{"StirlingNumber2","Return the n,mth Stirling Number of the second kind.","Alphabetical","Number Theory"},
{"String","Convert atom to string.","Alphabetical","String Manipulation"},
{"StringMid'Returns","","Alphabetical"},
{"StringMid'Get","Retrieve a substring.","Alphabetical","String Manipulation"},
{"StringMid'Set","Change a substring.","Alphabetical","String Manipulation"},
{"Subfactorial","Factorial and related functions.","Alphabetical","Combinatorics"},
{"Subst","Perform a substitution.","Alphabetical","Control Flow"},
{"SuchThat","Special purpose solver.","Alphabetical","Solvers (Symbolic)"},
{"Sum","Find the sum of a sequence.","Alphabetical","Series"},
{"SumForDivisors","Loop over divisors.","Alphabetical","Number Theory"},
{"SumTaylorNum","","Alphabetical"},
{"Swap","Swap two elements in a list.","Alphabetical","Lists (Operations)"},
{"SylvesterMatrix","Calculate a Sylvester matrix of two polynomials.","Alphabetical","Matrices (Special)"},
{"SystemCall","Pass a command to the operating system.","Alphabetical","Control Flow"},
{"Table","Evaluate while some variable ranges over interval.","Alphabetical","Lists (Operations)"},
{"TableForm","Print each entry in a list on a line.","Alphabetical","Lists (Operations)"},
{"Tail","Return a list without its first element.","Alphabetical","Lists (Operations)"},
{"Take","Take a sublist from a list, dropping the rest.","Alphabetical","Lists (Operations)"},
{"Tan","Trigonometric tangent function.","Alphabetical","Calculus Related (Symbolic)"},
{"Taylor","Univariate Taylor series expansion.","Alphabetical","Series"},
{"tDistribution","Student's t distribution.","Alphabetical","Probability & Statistics"},
{"TestPiper","","Alphabetical"},
{"TeXForm","Export expressions in LaTeX form.","Alphabetical","Input/Output"},
{"Time","Measure the time taken by a function.","Alphabetical","Control Flow"},
{"ToBase","Conversion of a number in decimal base to non-decimal base.","Alphabetical","Numbers (Operations)"},
{"ToeplitzMatrix","Create a Toeplitz matrix.","Alphabetical","Matrices (Special)"},
{"ToFile","Connect current output to a file.","Alphabetical","Input/Output"},
{"ToStdout","Select initial output stream for output.","Alphabetical","Input/Output"},
{"ToString","Connect current output to a string.","Alphabetical","Input/Output"},
{"Trace","Return the trace of a matrix.","Alphabetical","Linear Algebra"},
{"TraceExp","Evaluate with tracing enabled.","Alphabetical","Control Flow"},
{"TraceRule","Turn on tracing for a particular function.","Alphabetical","Control Flow"},
{"TraceStack","Show calling stack after an error occurs.","Alphabetical","Control Flow"},
{"Transpose","Return the transpose of a matrix.","Alphabetical","Linear Algebra"},
{"TrapError","","Alphabetical"},
{"TrigSimpCombine","Combine products of trigonometric functions.","Alphabetical","Expression Simplification"},
{"True","Boolean constant representing true.","Alphabetical","Constants (System)"},
{"TruncRadian","","Alphabetical"},
{"Type","Return the type of an expression.","Alphabetical","Lists (Operations)"},
{"Undefined","Constant signifying an undefined result.","Alphabetical","Constants (Mathematical)"},
{"UnFence","","Alphabetical"},
{"UnFlatten","The inverse operation of Flatten.","Alphabetical","Lists (Operations)"},
{"Union","Return the union of two lists.","Alphabetical","Lists (Operations)"},
{"UniqueConstant","Create a unique identifier.","Alphabetical","Variables"},
{"UnList","Convert a list to a function application.","Alphabetical","Lists (Operations)"},
{"Until","Loop until a condition is met.","Alphabetical","Control Flow"},
{"Use","Load a file, but not more than once.","Alphabetical","Control Flow","Input/Output"},
{"V, InVerboseMode","Set verbose output mode.","Alphabetical","Input/Output"},
{"VandermondeMatrix","Create a Vandermonde matrix.","Alphabetical","Matrices (Special)"},
{"VarList","Return a list of variables appearing in an expression.","Alphabetical","Lists (Operations)"},
{"VarListArith","Return a list of variables appearing in an expression.","Alphabetical","Lists (Operations)"},
{"VarListSome","Return a list of variables appearing in an expression.","Alphabetical","Lists (Operations)"},
{"Verify","","Alphabetical"},
{"VerifyArithmetic","","Alphabetical"},
{"VerifyDiv","","Alphabetical"},
{"Where","Substitute result into expression.","Alphabetical","Functional Operators"},
{"While","Loop while a condition is met.","Alphabetical","Control Flow"},
{"WithValue","Temporary assignment during an evaluation.","Alphabetical","Control Flow"},
{"Write","Low-level printing routine.","Alphabetical","Input/Output"},
{"WriteString","Low-level printing routine for strings.","Alphabetical","Input/Output"},
{"WronskianMatrix","Create a Wronskian matrix.","Alphabetical","Matrices (Special)"},
{"XmlExplodeTag","Convert XML strings to tag objects.","Alphabetical","Input/Output"},
{"XmlTokenizer","Select an XML syntax tokenizer for parsing the input.","Alphabetical","Input/Output"},
{"ZeroMatrix","Make a zero matrix.","Alphabetical","Linear Algebra"},
{"ZeroVector","Create a vector with all zeroes.","Alphabetical","Linear Algebra"},
{"Zeta","Riemann's Zeta function.","Alphabetical","Special"}
};

jlist = new java.util.Vector();//For JList.


userFunctionsNode = new DefaultMutableTreeNode(functionInfo("User Functions","Functions for Piper users."));

userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Alphabetical","All functions in alphabetical order.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Calculus Related (Symbolic)","Functions for differentiation, integration, and solving of equations.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Combinatorics","Combinatorics related functions.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Constants (Mathematical)","Mathematical constants.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Constants (System)","System related constants.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Control Flow","Controls the order in which statements or function calls are executed.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Differential Equations","In this section, some facilities for solving differential equations are described. Currently only simple equations without auxiliary conditions are supported.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Expression Simplification","This section describes the functions offered that allow simplification of expressions.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Functional Operators","These operators can help the user to program in the style of functional programming languages such as Miranda or Haskell.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Special","In this section, special and transcendental mathematical functions are described.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Input/Output","Functions for input, output, and plotting.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Linear Algebra","Functions used to manipulate vectors (represented as lists) and matrices (represented as lists of lists).")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Lists (Operations)","Most objects that can be of variable size are represented as lists.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Matrices (Predicates)","Predicates related to matrices.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Matrices (Special)","Various special matricies")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Numeric","Functions that calculate numerically (like those found on a scientific calculator.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Numbers (Complex)","Functions that allow manipulation of complex numbers.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Numbers (Operations)","Besides the usual arithmetical operations, Piper defines some more advanced operations on numbers. Many of them also work on polynomials.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Numbers (Predicates)","Predicates relating to numbers.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Numbers (Random)","Random number related functions.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Number Theory","Functions that are of interest in number theory. They typically operate on integers")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Polynomials (Operations)","Functions to manipulate polynomials, including functions for constructing and evaluating orthogonal polynomials.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Polynomials (Special)","Special polynomials.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Predicates","A predicate is a function that returns a boolean value, i.e. True or False.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Probability & Statistics","Probability and statistics.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Propositional Logic","Functions for propositional logic.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Series","Functions which operate on series.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Solvers (Numeric)","Functions for solving equations numerically.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Solvers (Symbolic)","By solving one tries to find a mathematical object that meets certain criteria.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("String Manipulation","Functions for manipulating strings.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Transforms","In this section, some facilities for various transforms are described.")));
userFunctionsNode.add(new DefaultMutableTreeNode(functionInfo("Variables","Functions that work with variables.")));
//userFunctions.add(new DefaultMutableTreeNode(functionInfo("Predicates","test")));
//}}}



//{{{ Programmer functions descriptions.
programmerFunctionsDescriptions = new String[][]
{
{"[","Beginning of block of statements.","Alphabetical","Programming"},
{"]","End of block of statements.","Alphabetical","Programming"},
{"*/","End of comment.","Alphabetical","Programming"},
{"/*","Start of comment.","Alphabetical","Programming"},
{"//","Beginning of one-line comment.","Alphabetical","Programming"},
{"Array'Create","Create array.","Alphabetical","Native Objects"},
{"Array'CreateFromList","Convert list to array.","Alphabetical","Native Objects"},
{"Array'Get","Fetch array element.","Alphabetical","Native Objects"},
{"Array'Set","Set array element.","Alphabetical","Native Objects"},
{"Array'Size","Get array size.","Alphabetical","Native Objects"},
{"Array'ToList","Convert array to list.","Alphabetical","Native Objects"},
{"Assert","Signal \"soft\" custom error.","Alphabetical","Error Reporting"},
{"Backquoting","Macro expansion (LISP-style backquoting).","Alphabetical","Programming"},
{"BinSplitData","Computations of series by the binary splitting method.","Alphabetical","Numerical (Arbitrary Precision)"},
{"BinSplitFinal","Computations of series by the binary splitting method.","Alphabetical","Numerical (Arbitrary Precision)"},
{"BinSplitNum","Computations of series by the binary splitting method.","Alphabetical","Numerical (Arbitrary Precision)"},
{"BitAnd","Bitwise and operation.","Alphabetical","Built-in (Core)"},
{"BitOr","Bitwise or operation.","Alphabetical","Built-in (Core)"},
{"BitXor","Bitwise xor operation.","Alphabetical","Built-in (Core)"},
{"Bodied","Define function syntax (bodied function).","Alphabetical","Programming"},
{"BracketRational","Find optimal rational approximations.","Alphabetical","Numerical (Arbitrary Precision)"},
{"Builtin'Precision'Get","Get the current precision.","Alphabetical","Numerical (Arbitrary Precision)"},
{"Builtin'Precision'Set","Set the precision.","Alphabetical","Numerical (Arbitrary Precision)"},
{"CachedConstant","Precompute multiple-precision constants.","Alphabetical","Numerical (Arbitrary Precision)"},
{"Check","Report \"hard\" errors.","Alphabetical","Error Reporting"},
{"ClearError","Custom errors handlers.","Alphabetical","Error Reporting"},
{"ClearErrors","Simple error handlers.","Alphabetical","Error Reporting"},
{"ContFracEval","Manipulate continued fractions.","Alphabetical","Numerical (Arbitrary Precision)"},
{"ContFracList","Manipulate continued fractions.","Alphabetical","Numerical (Arbitrary Precision)"},
{"CurrentFile","Return current input file.","Alphabetical","Error Reporting"},
{"CurrentLine","Return current line number on input.","Alphabetical","Error Reporting"},
{"DefMacroRuleBase","Define a function as a macro.","Alphabetical","Programming"},
{"DefMacroRuleBaseListed","Define macro with variable number of arguments.","Alphabetical","Programming"},
{"DumpErrors","Simple error handlers.","Alphabetical","Error Reporting"},
{"Equals","Check equality.","Alphabetical","Built-in (Core)"},
{"ExtraInfo'SetExtraInfo'Get","Annotate objects with additional information.","Alphabetical","Programming"},
{"Fast...","Double-precision math functions.","Alphabetical","Built-in (Core)"},
{"FindFunction","Find the library file where a function is defined.","Alphabetical","Programming"},
{"GarbageCollect","Do garbage collection on unused memory.","Alphabetical","Programming"},
{"GenericTypeName","Get type name.","Alphabetical","Native Objects"},
{"GetCoreError","Get \"hard\" error string.","Alphabetical","Error Reporting"},
{"GetError","Custom errors handlers.","Alphabetical","Error Reporting"},
{"GetErrorTableau","Custom errors handlers.","Alphabetical","Error Reporting"},
{"GetTime","Measure the time taken by an evaluation.","Alphabetical","Built-in (Core)"},
{"GreaterThan","Comparison predicate.","Alphabetical","Built-in (Core)"},
{"GuessRational","Find optimal rational approximations.","Alphabetical","Numerical (Arbitrary Precision)"},
{"HoldArg","Mark argument as not evaluated.","Alphabetical","Programming"},
{"HoldArgNr","Specify argument as not evaluated.","Alphabetical","Programming"},
{"Infix","Define function syntax (infix operator).","Alphabetical","Programming"},
{"InNumericMode","Determine if currently in numeric mode.","Alphabetical","Numerical (Arbitrary Precision)"},
{"IntLog","Integer part of logarithm.","Alphabetical","Numerical (Arbitrary Precision)"},
{"IntNthRoot","Integer part of n-th root.","Alphabetical","Numerical (Arbitrary Precision)"},
{"IntPowerNum","Optimized computation of integer powers.","Alphabetical","Numerical (Arbitrary Precision)"},
{"IsBodied","Check for function syntax.","Alphabetical","Programming"},
{"IsError","Check for custom error.","Alphabetical","Error Reporting"},
{"IsGeneric","Check for generic object.","Alphabetical","Native Objects"},
{"IsInfix","Check for function syntax.","Alphabetical","Programming"},
{"IsPostfix","Check for function syntax.","Alphabetical","Programming"},
{"IsPrefix","Check for function syntax.","Alphabetical","Programming"},
{"IsPromptShown","Test for the Piper prompt option.","Alphabetical","Built-in (Core)"},
{"KnownFailure","Mark a test as a known failure.","Alphabetical","Testing"},
{"LeftPrecedence","Set operator precedence.","Alphabetical","Programming"},
{"LessThan","Comparison predicate.","Alphabetical","Built-in (Core)"},
{"LogicTest","Verifying equivalence of two expressions.","Alphabetical","Testing"},
{"LogicVerify","Verifying equivalence of two expressions.","Alphabetical","Testing"},
{"MacroClear","Define rules in functions.","Alphabetical","Programming"},
{"MacroLocal","Define rules in functions.","Alphabetical","Programming"},
{"MacroRule","Define rules in functions.","Alphabetical","Programming"},
{"MacroRuleBase","Define rules in functions.","Alphabetical","Programming"},
{"MacroRuleBaseListed","Define rules in functions.","Alphabetical","Programming"},
{"MacroSet","Define rules in functions.","Alphabetical","Programming"},
{"Math...","Arbitrary-precision math functions.","Alphabetical","Built-in (Core)"},
{"MathAnd","Built-in logical \"and\".","Alphabetical","Built-in (Core)"},
{"MathGetExactBits","Manipulate precision of floating-point numbers.","Alphabetical","Numerical (Arbitrary Precision)"},
{"MathNot","Built-in logical \"not\".","Alphabetical","Built-in (Core)"},
{"MathOr","Built-in logical \"or\".","Alphabetical","Built-in (Core)"},
{"MathSetExactBits","Manipulate precision of floating-point numbers.","Alphabetical","Numerical (Arbitrary Precision)"},
{"MultiplyNum","Optimized numerical multiplication.","Alphabetical","Numerical (Arbitrary Precision)"},
{"NearRational","Find optimal rational approximations.","Alphabetical","Numerical (Arbitrary Precision)"},
{"NewtonNum","Low-level optimized Newton's iterations.","Alphabetical","Numerical (Arbitrary Precision)"},
{"NonN","Calculate part in non-numeric mode.","Alphabetical","Numerical (Arbitrary Precision)"},
{"NthRoot","Calculate/simplify nth root of an integer.","Alphabetical","Numerical (Arbitrary Precision)"},
{"OpLeftPrecedence","Get operator precedence.","Alphabetical","Programming"},
{"OpPrecedence","Get operator precedence.","Alphabetical","Programming"},
{"OpRightPrecedence","Get operator precedence.","Alphabetical","Programming"},
{"Postfix","Define function syntax (postfix operator).","Alphabetical","Programming"},
{"Prefix","Define function syntax (prefix operator).","Alphabetical","Programming"},
{"Prog","Block of statements.","Alphabetical","Programming"},
{"RandVerifyArithmetic","Special purpose arithmetic verifiers.","Alphabetical","Testing"},
{"Retract","Erase rules for a function.","Alphabetical","Programming"},
{"RightAssociative","Declare associativity.","Alphabetical","Programming"},
{"RightPrecedence","Set operator precedence.","Alphabetical","Programming"},
{"RoundTo","Round a real-valued result to a set number of digits.","Alphabetical","Testing"},
{"Rule","Define a rewrite rule.","Alphabetical","Programming"},
{"RuleBase","Define function with a fixed number of arguments.","Alphabetical","Programming"},
{"RuleBaseArgList","Obtain list of arguments.","Alphabetical","Programming"},
{"RuleBaseListed","Define function with variable number of arguments.","Alphabetical","Programming"},
{"Secure","Guard the host OS.","Alphabetical","Programming"},
{"ShiftLeft","Built-in bitwise shift left operation.","Alphabetical","Built-in (Core)"},
{"ShiftRight","Built-in bitwise shift right operation.","Alphabetical","Built-in (Core)"},
{"SumTaylorNum","Optimized numerical evaluation of Taylor series.","Alphabetical","Numerical (Arbitrary Precision)"},
{"TestPiper","Verifying equivalence of two expressions.","Alphabetical","Testing"},
{"TrapError","Trap \"hard\" errors.","Alphabetical","Error Reporting"},
{"TruncRadian","Remainder modulo 2*Pi.","Alphabetical","Numerical (Arbitrary Precision)"},
{"UnFence","Change local variable scope for a function.","Alphabetical","Programming"},
{"Verify","Verifying equivalence of two expressions.","Alphabetical","Testing"},
{"VerifyArithmetic","Special purpose arithmetic verifiers.","Alphabetical","Testing"},
{"VerifyDiv","Special purpose arithmetic verifiers.","Alphabetical","Testing"}
};

programmerFunctionsNode = new DefaultMutableTreeNode(functionInfo("Programmer Functions","Functions for Piper code developers."));

programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Alphabetical","All functions in alphabetical order.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Built-in (Core)","Piper has a small set of built-in functions and a large library of user-defined functions. Some built-in functions are in this section.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Error Reporting","Functions which are useful for reporting errors to the user.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Native Objects","Functions for allowing the Piper interpreter access native code.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Numerical (Arbitrary Precision)","Functions for programming numerical calculations with arbitrary precision.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Programming","Functions which are useful for writing Piper scripts.")) );
programmerFunctionsNode.add( new DefaultMutableTreeNode(functionInfo("Testing","Functions for verifying the correct operation of Piper code.")) );
                             

//}}}


numericFunctions = new String[]
{
"MathAbs",
"MathAdd",
"MathArcCos",
"MathArcCosh",
"MathArcSin",
"MathArcSinh",
"MathArcTan",
"MathArcTanh",
"MathCeil",
"MathCos",
"MathCosh",
"MathDiv",
"MathDivide",
"MathExp",
"MathFloor",
"MathGcd",
"MathLog",
"MathMod",
"MathMultiply",
"MathPower",
"MathSin",
"MathSinh",
"MathSqrt",
"MathSubtract",
"MathTan",
"MathTanh"
};
//}}}


//{{{
populateNode(treeNode, descriptionsStringArray)
{
	for(row = 0;row < descriptionsStringArray.length;row++)
	{
	    //Populate JList.
	    //jlist.addElement(descriptionsStringArray[row][0]);
	    
	    //Populate.
	    for(column=2; column < descriptionsStringArray[row].length; column++)
	    {
	        category = descriptionsStringArray[row][column];
	        //System.out.println("XXXXX " + descriptionsStringArray[row][column]);
	        
	        
	        boolean hasCategory = false;
	        global.children = treeNode.children();
	        for(DefaultMutableTreeNode child:children)
	        {
	            if(child.getUserObject().toString().equalsIgnoreCase(category)) //Add leaf to existing category.
	            {
	                child.add(new DefaultMutableTreeNode(functionInfo(descriptionsStringArray[row][0],descriptionsStringArray[row][1]) ));
	                hasCategory = true;
	            }
	                                      
	            
	        }//end for.
	        
	        if(hasCategory == false)
	        {
	            leaf = new DefaultMutableTreeNode(new functionInfo(descriptionsStringArray[row][0],descriptionsStringArray[row][1]));
	            category = new DefaultMutableTreeNode(descriptionsStringArray[row][column]);
	            category.add(leaf);
	            treeNode.add(category);
	        }
	        
	    }//end for.
	    
	}//end for/

}//end method.}}}


//{{{ListSelectionEventHandler
    valueChanged(ListSelectionEvent e)
    {
        if (e.getValueIsAdjusting())
          return;
        index = e.getFirstIndex();
		item = list.getSelectedValue();
		
		displayFunctionDocs(item);
        
        //System.out.println("IIIII Item: " + list.getSelectedValue());
		
	//System.out.println("MMMMMM match: " + findFileForFunction(item));
	
	}//end function.}}}
	

	//{{{TreeSelectionEvent handler.
functionInfo = null;
valueChanged(TreeSelectionEvent e) 
{
    node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

    if (node == null)
    //Nothing is selected.	
    return;

    Object nodeInfo = node.getUserObject();
    if (node.isLeaf()) 
	{
        functionInfo = nodeInfo;
        displayFunctionDocs(functionInfo.toString());
    } else {
		toolPanel.sourceButtonEnabled(false);
        //Note:tk:Perhaps display top of chapter here?
    }
	}//end method.}}}

piperFunctionsRootNode = new DefaultMutableTreeNode(functionInfo("Piper Functions                                           ","All Piper functions and constants."));

populateNode(userFunctionsNode, userFunctionsDescriptions);
piperFunctionsRootNode.add(userFunctionsNode);
populateNode(programmerFunctionsNode, programmerFunctionsDescriptions);
piperFunctionsRootNode.add(programmerFunctionsNode);

tree = functionInfoTree(piperFunctionsRootNode);


ToolTipManager.sharedInstance().registerComponent(tree);

tree.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
tree.addTreeSelectionListener(this);
tree.setShowsRootHandles(true);
//tree.setRootVisible(false);
treeView = new JScrollPane(tree);
//frame.add(treeView, BorderLayout.EAST);


list = new javax.swing.JList(jlist);
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    list.addListSelectionListener(this);
    listView = new JScrollPane(list);
 
    //frame.add(pane, BorderLayout.WEST);
	
//----



//     listPanel = new JPanel();
  
//    listPanel.setLayout(new BorderLayout());
    //list = new JList(descriptionsStringArray);
    //list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    //list.addListSelectionListener(this);
    //JScrollPane pane = new JScrollPane(list);
 
    piperDocPanel.add(treeView, BorderLayout.WEST);//treeView and listView.


	displayFunctionDocs(String item)
	{	
		//Determine if function is a numeric Math function.
		match = false;
		for(index = 0; index < numericFunctions.length ;index++)
		{
			if(item.equalsIgnoreCase(numericFunctions[index]))
			{
				match = true;
				break;
			}//end if.
		}//end for.

		if(match == true)
		{
			docPart = "piper_manual/refprogchapter5.html";
			item = "Math...";
		}
		else
		{
			chapter = findFileForFunction(item);
			if(! chapter.equals(""))
			{
            //path = url.getPath();
//	    path = urlString;
//            path = path.replaceFirst("ref.html", match);
	    
	
	    		docPart = "piper_manual/" + chapter;
	    //System.out.println("   QQQ path: " + path  + "   docPart: " + docPart + "  chapter: " + chapter);
	    		

	    
            //path = path + "#" + query;
           // path = "file://" + path;
           // System.out.println("TTT path: " + path );
            //url = new URL(path);
			
			}//end if
			else
			{
				docPart = null;
			}//end else.
		}//end else.
		

    

	

	if(docPart != null)
	{
        urlWithChapter = jEdit.getPlugin("org.mathrider.piperdocsplugin.PiperDocsPlugin").getPluginJAR().getClassLoader().getResource(docPart);
	    if (urlWithChapter != null) 
		{

			    addChapter = urlWithChapter.toExternalForm() + "#" + item;
			    setPage(new URL(addChapter),true);
				toolPanel.sourceButtonEnabled(true);
			    //editorPane.setPage(urlWithChapter);
			    //System.out.println(   "QRQRQR " + " urlWithChapter: " + urlWithChapter + " Chapter: " + Chapter + "  addChapter: " + addChapter + " item: " + item);
			    //editorPane.scrollToReference(Chapter);
		} 
	    else 
		{
		    System.err.println("Couldn't find file: " + urlWithChapter );
	    }//end else	    

     }//end if 

  }//end method.
///}}}


//{{{
back()
{
	if(pageIndex != 0)
	{	
		page = pageList.get(--pageIndex);
		//System.out.println("XXXXX back" + page);
		setPage(page,false);
	}//end if.
	
}//end method.
//}}}


//{{{forward
forward()
{
	page = pageList.get(++pageIndex);
	//System.out.println("XXXXX forward");
	setPage(page,false);
}//end method.
//}}}


//{{{ home
home()
{
	toolPanel.sourceButtonEnabled(false);
	//toolPanel.backButtonEnabled(false);
	//toolPanel.forwardButtonEnabled(false);
	
	//pageIndex = 0;
	
	//java.net.URL docURL = jEdit.getPlugin("org.mathrider.piperdocsplugin.PiperDocsPlugin").getPluginJAR().getClassLoader().getResource("piper_manual/books2.html");
	//homePage = pageList.get(0);
	if ( homePage != null) {
		setPage(homePage,true);
	} else {
		System.err.println("Couldn't find file: " + homePage );
	}//end else
	
}//end method.}}}


//{{{source()
source()
{
	interpreter = piperInterpreter; //Note:tk:PiperInterpreter.getInstance(); 
	//item = list.getSelectedValue();
	
	item = functionInfo.toString();
	
	try{
		location = interpreter.evaluate("FindFunction(\"" + item + "\");");
		
	}catch(org.mathrider.piper.Piperexception ye) 
	{
		ye.printStackTrace();
	}
	finally
	{
		//System.out.println("XXXXXXXX name: " + item + "  location: " + location);
	}//finally.
	
	
	
import java.io.*;
//Print the contents of the Piper script zip file.
 instance = piperInterpreter; //Note:tk:PiperInterpreter.getInstance();
 scriptZip = instance.getScriptsZip();
 entries = scriptZip.entries();
 
 //while( entries.hasMoreElements())
 //{
 //   element = entries.nextElement();
 //   System.out.println("XXXXX " + element);
 //}
 
 location = location.replaceAll("\"","");
 entry = scriptZip.getEntry(location);//location.trim());//"assoc.rep/code.pi"); 
 
 if(entry != null)
 {
 //System.out.println("YYYYYY " + entry);
 
 fis = scriptZip.getInputStream(entry);
 //
        entry = entry.toString().replaceAll("/","-");
         // Create temp file.
        File tempFile = File.createTempFile(entry, ".pi");
    
        // Delete temp file when program exits.
        tempFile.deleteOnExit();
    
	//File originFile = new File("c:\\file1.txt");
    //File destinationFile = new File("c:\\file1.txt");
    //if (!originFile.exists() || destinationFile.exists()) {
      //return;
    //}
    try {
      byte[] readData = new byte[1024];
      //FileInputStream fis = new FileInputStream(originFile);
      FileOutputStream fos = new FileOutputStream(tempFile);
      int i = fis.read(readData);

      while (i != -1) {
        fos.write(readData, 0, i);
        i = fis.read(readData);
      }
      fis.close();
      fos.flush();
      fos.close();
    } catch (IOException e) {
      System.out.println(e);
    }//end try/catch.
    
    
    
    //textArea = org.gjt.sp.jedit.jEdit.createTextArea();
    
    activeView = org.gjt.sp.jedit.jEdit.getActiveView();
    
    //buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());
    
   // jf = new javax.swing.JFrame();
   // cf = jf.getContentPane();
   // cf.add(textArea);
   // jf.show();
   
   
				void delayDisplay()
				{
					//Buffer update needs to be done later in the AWT thread because of needing
					// to wait for the buffer to be saved (which was requested earlier).
					void run()
					{
						buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());//

					}
					org.gjt.sp.jedit.io.VFSManager.runInAWTThread(this);
				
				}//end method.
				
	delayDisplay();
 }
 else
 {
	 org.gjt.sp.jedit.Macros.message(org.gjt.sp.jedit.jEdit.getActiveView(), "Source file for (" + item + ") not found.");
 }//end if/else.
	
}//end source.

//}}}


//{{{collapse
collapse()
{
	tree.collapseAll();
}//end method.}}}



editorPane.setEditable(false);
editorPane.addHyperlinkListener(this);
//java.net.URL helpURL =new java.net.URL( "file:///C:/ted/download/piper_manual/refchapter26.html#c26");


//Put the editor pane in a scroll pane.
//JScrollPane editorScrollPane = new JScrollPane(editorPane);


editorScrollPane.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);


home();
//piperDocPanel.add(java.awt.BorderLayout.CENTER, editorScrollPane);
//piperDocPanel.revalidate();


//piperDocPanel.invalidate();
//piperDocPanel.validate(); 
//view.getContentPane().invalidate();
//view.getContentPane().validate();
//editorScrollPane.setPreferredSize(new Dimension(250, 145));
//editorScrollPane.setMinimumSize(new Dimension(10, 10));



import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
docker = jEdit.getActiveView().getDockableWindowManager();


//frame = new javax.swing.JFrame();
//guiBox = new Box(BoxLayout.Y_AXIS);
//messageTextField = new JTextField();
//guiBox.add(messageTextField);
//button1 = new JButton("Close GeoGebra");
//button1.setBackground(Color.green);
//button1.addActionListener(this);
//guiBox.add(button1);
//button2 = new JButton("Open GeoGebra");
//button2.setBackground(Color.yellow);
//button2.addActionListener(this);
//guiBox.add(button2);
//
//contentPane = frame.getContentPane();
//contentPane.add(editorScrollPane);//guiBox,BorderLayout.NORTH);
//frame.pack();
//frame.setAlwaysOnTop(true);
//frame.setTitle("MathRider");
//frame.setSize(new Dimension(400, 400));
//frame.setResizable(true);
//frame.setPreferredSize(new Dimension(400, 400));
//frame.setLocationRelativeTo(null);
//frame.show();
//
//actionPerformed(event)
//{
//    src = event.getSource();
//
//    if (src == button1)
//    {
//      messageTextField.setText("GeoGebra closed.");
//      docker.hideDockableWindow( "geogebra" );
//    }
//    else if (src == button2)
//    {
//      messageTextField.setText("GeoGebra opened.");
//      docker.showDockableWindow( "geogebra" );
//    }
//
//}//end method
//
//

hyperlinkUpdate(event)
{
  url = event.getURL();
//System.out.println("YYYPiperDocsYYY: " + url.getPath() + " reference: " + url.getRef() + " query: " + url.getQuery() );
  if(event.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
  {
    reference = url.getRef();
    query = url.getQuery();
    
    urlStringForm = url.toString();

    urlString = urlStringForm.substring(urlStringForm.indexOf("!/")+2,urlStringForm.length());
    
//System.out.println("    YYYYXX: " + "url: " + url +"  path: " + url.getPath() + "   urlString: " + urlString + "   url StringForm: " + urlStringForm);

    
    
    if(reference != null)
    {
        docPart = urlString.substring(0,urlString.indexOf("#"));

	urlWithReference = jEdit.getPlugin("org.mathrider.piperdocsplugin.PiperDocsPlugin").getPluginJAR().getClassLoader().getResource(docPart);

        if (urlWithReference != null) {

		    addReference = urlWithReference.toExternalForm() + "#"+reference;
		    setPage(new URL(addReference),true);
		    //editorPane.setPage(urlWithReference);
		    //editorPane.scrollToReference(reference);

	    } 
	    else {
		    System.err.println("Couldn't find file: " + urlWithReference );
	    }//end else
    }
    else if(query != null)
    {   
        match = findFileForFunctionInref(query);
        if(! match.equals(""))
        {
            //path = url.getPath();
	    path = urlString;
            path = path.replaceFirst("ref.html", match);
	    
	
	    docPart = path.substring(0,path.indexOf("?"));
	    //System.out.println("   QQQ path: " + path  + "   docPart: " + docPart + "  match: " + match);
	    urlWithQuery = jEdit.getPlugin("org.mathrider.piperdocsplugin.PiperDocsPlugin").getPluginJAR().getClassLoader().getResource(docPart);

	    
            //path = path + "#" + query;
           // path = "file://" + path;
           // System.out.println("TTT path: " + path );
            //url = new URL(path);
        
	    if (urlWithQuery != null) {

		    addQuery = urlWithQuery.toExternalForm() + "#"+query;
		    setPage(new URL(addQuery),true);
		    //editorPane.setPage(urlWithQuery);
		    //System.out.println(   "QRQRQR " + " urlWithQuery: " + urlWithQuery + " query: " + query + "  addQuery: " + addQuery);
		    //editorPane.scrollToReference(query);

	    } 
	    else {
		    System.err.println("Couldn't find file: " + urlWithQuery );
	    }//end else	    

        }//end if 
    }
    else
    {
	    	urlNormal = jEdit.getPlugin("org.mathrider.piperdocsplugin.PiperDocsPlugin").getPluginJAR().getClassLoader().getResource(urlString);

        if (urlNormal != null) {

		    setPage(urlNormal,true);
		    editorPane.scrollToReference(reference);

	    } 
	    else {
		    System.err.println("Couldn't find file: " + urlNormal );
	    }//end else
    }//end else. 
    
    
    
  }//end if.  + getRef())
}//end method.





findFileForFunctionInref(seach) 
{

funcs_refchapter1 = new String[] {};
funcs_refchapter2 =  new String[]{
"+"
, "-"
, "*"
, "/"
, "^"
, "Div"
, "Mod"
, "Gcd"
, "Lcm"
, "<<"
, ">>"
, "FromBase"
, "ToBase"
, "N"
, "Rationalize"
, "ContFrac"
, "Decimal"
, "Floor"
, "Ceil"
, "Round"
, "Min"
, "Max"
, "Numer"
, "Denom"
, "Pslq"
};
funcs_refchapter3 = new String[]{
"<"
, ">"
, "<="
, ">="
, "IsZero"
, "IsRational"
};
funcs_refchapter4 = new String[]{
"Sin"
, "Cos"
, "Tan"
, "ArcSin"
, "ArcCos"
, "ArcTan"
, "Exp"
, "Ln"
, "Sqrt"
, "Abs"
, "Sign"
, "D"
, "Curl"
, "Diverge"
, "Integrate"
, "Limit"
};
funcs_refchapter5 = new String[]{
"Random"
,"RandomSeed"
, "RngCreate"
, "RngSeed"
, "Rng"
, "RandomIntegerMatrix"
, "RandomIntegerVector"
, "RandomPoly"
};
funcs_refchapter6 = new String[]{
"Add"
, "Sum"
, "Factorize"
, "Taylor"
, "InverseTaylor"
, "ReversePoly"
, "BigOh"
, "LagrangeInterpolant"
};
funcs_refchapter7 = new String[]{
"!"
, "!!"
, "***"
, "Subfactorial"
, "Bin"
, "Eulerian"
, "LeviCivita"
, "Permutations"
};
funcs_refchapter8 = new String[]{
"Gamma"
, "Zeta"
, "Bernoulli"
, "Euler"
, "LambertW"
};
funcs_refchapter9 = new String[]{
"Complex"
, "Re"
, "Im"
, "I"
, "Conjugate"
, "Arg"
};
funcs_refchapter10 = new String[]{
"LaplaceTransform"
};
funcs_refchapter11 = new String[]{
"Simplify"
, "RadSimp"
, "FactorialSimplify"
, "LnExpand"
, "LnCombine"
, "TrigSimpCombine"
};
funcs_refchapter12 = new String[]{
"Solve"
, "OldSolve"
, "SuchThat"
, "Eliminate"
, "PSolve"
, "MatrixSolve"
};
funcs_refchapter13 = new String[]{
"Newton"
, "FindRealRoots"
, "NumRealRoots"
, "MinimumBound"
, "MaximumBound"
};
funcs_refchapter14 = new String[]{
"CanProve"
};
funcs_refchapter15 = new String[]{
"OdeSolve"
, "OdeTest"
, "OdeOrder"
};
funcs_refchapter16 = new String[]{
"Dot, ."
, "InProduct"
, "CrossProduct"
, "Outer, o"
, "ZeroVector"
, "BaseVector"
, "Identity"
, "ZeroMatrix"
, "Diagonal"
, "DiagonalMatrix"
, "OrthogonalBasis"
, "OrthonormalBasis"
, "Normalize"
, "Transpose"
, "Determinant"
, "Trace"
, "Inverse"
, "Minor"
, "CoFactor"
, "MatrixPower"
, "SolveMatrix"
, "CharacteristicEquation"
, "EigenValues"
, "EigenVectors"
, "Sparsity"
, "Cholesky"
};
funcs_refchapter17 = new String[]{
"IsScalar"
, "IsVector"
, "IsMatrix"
, "IsSquareMatrix"
, "IsHermitian"
, "IsOrthogonal"
, "IsDiagonal"
, "IsLowerTriangular"
, "IsUpperTriangular"
, "IsSymmetric"
, "IsSkewSymmetric"
, "IsUnitary"
, "IsIdempotent"
};
funcs_refchapter18 = new String[]{
"JacobianMatrix"
, "VandermondeMatrix"
, "HessianMatrix"
, "HilbertMatrix"
, "HilbertInverseMatrix"
, "ToeplitzMatrix"
, "WronskianMatrix"
, "SylvesterMatrix"
};
funcs_refchapter19 = new String[]{
"Expand"
, "Degree"
, "Coef"
, "Content"
, "PrimitivePart"
, "LeadingCoef"
, "Monic"
, "SquareFree"
, "Horner"
, "ExpandBrackets"
, "EvaluateHornerScheme"
};
funcs_refchapter20 = new String[]{
"OrthoP"
, "OrthoH"
, "OrthoG"
, "OrthoL"
, "OrthoT"
, "OrthoU"
, "OrthoPSum"
, "OrthoHSum"
, "OrthoLSum"
, "OrthoGSum"
, "OrthoTSum"
, "OrthoUSum"
, "OrthoPoly"
, "OrthoPolySum"
};
funcs_refchapter21 = new String[]{
"Head"
, "Tail"
, "Length"
, "Map"
, "MapSingle"
, "MakeVector"
, "Select"
, "Nth"
, "DestructiveReverse"
, "Reverse"
, "List"
, "UnList"
, "Listify"
, "Concat"
, "Delete"
, "Insert"
, "DestructiveDelete"
, "DestructiveInsert"
, "Replace"
, "DestructiveReplace"
, "FlatCopy"
, "Contains"
, "Find"
, "Append"
, "DestructiveAppend"
, "RemoveDuplicates"
, "Push"
, "Pop"
, "PopFront"
, "PopBack"
, "Swap"
, "Count"
, "Intersection"
, "Union"
, "Difference"
, "FillList"
, "Drop"
, "Take"
, "Partition"
, "Assoc"
, "AssocIndices"
, "AssocDelete"
, "Flatten"
, "UnFlatten"
, "Type"
, "NrArgs"
, "VarList"
, "VarListArith"
, "VarListSome"
, "FuncList"
, "FuncListArith"
, "FuncListSome"
, "BubbleSort"
, "HeapSort"
, "PrintList"
, "Table"
, "TableForm"
, "GlobalPop"
, "GlobalPush"
};
funcs_refchapter22 = new String[]{
":"
, "@"
, "/@"
, ".."
, "NFunction"
, "Where"
, "AddTo"
};
funcs_refchapter23 = new String[]{
"MaxEvalDepth"
, "Hold"
, "Eval"
, "While"
, "Until"
, "If"
, "SystemCall"
, "Function"
, "Macro"
, "Use"
, "For"
, "ForEach"
, "Apply"
, "MapArgs"
, "Subst"
, "WithValue"
, "/:"
, "/::"
, "TraceStack"
, "TraceExp"
, "TraceRule"
, "Time"
};
funcs_refchapter24 = new String[]{
"!="
, "="
, "Not"
, "And"
, "Or"
, "IsFreeOf"
, "IsZeroVector"
, "IsNonObject"
, "IsEven"
, "IsOdd"
, "IsEvenFunction"
, "IsOddFunction"
, "IsFunction"
, "IsAtom"
, "IsString"
, "IsNumber"
, "IsList"
, "IsNumericList"
, "IsBound"
, "IsBoolean"
, "IsNegativeNumber"
, "IsNegativeInteger"
, "IsPositiveNumber"
, "IsPositiveInteger"
, "IsNotZero"
, "IsNonZeroInteger"
, "IsInfinity"
, "IsPositiveReal"
, "IsNegativeReal"
, "IsConstant"
, "IsGaussianInteger"
, "MatchLinear"
, "HasExpr"
, "HasExprArith"
, "HasExprSome"
, "HasFunc"
, "HasFuncArith"
, "HasFuncSome"
};
funcs_refchapter25 = new String[]{
"%"
, "True"
, "False"
, "EndOfFile"
};
funcs_refchapter26 = new String[]{
"Infinity"
, "Pi"
, "Undefined"
, "GoldenRatio"
, "Catalan"
, "gamma"
};
funcs_refchapter27 = new String[]{
":="
, "Set"
, "Clear"
, "Local"
, "++"
, "--"
, "Object"
, "SetGlobalLazyVariable"
, "UniqueConstant"
, "LocalSymbols"
};
funcs_refchapter28 = new String[]{
"FullForm"
, "Echo"
, "PrettyForm"
, "EvalFormula"
, "TeXForm"
, "CForm"
, "IsCFormable"
, "Write"
, "WriteString"
, "Space"
, "NewLine"
, "FromFile"
, "FromString"
, "ToFile"
, "ToString"
, "Read"
, "ToStdout"
, "ReadCmdLineString"
, "LispRead"
, "LispReadListed"
, "ReadToken"
, "Load"
, "Use"
, "DefLoad"
, "FindFile"
, "PatchLoad"
, "Nl"
, "V, InVerboseMode"
, "Plot2D"
, "Plot3DS"
, "XmlExplodeTag"
, "DefaultTokenizer"
, "XmlTokenizer"
, "OMForm"
, "OMRead"
, "OMDef"
};
funcs_refchapter29 = new String[]{
"StringMid'Set"
, "StringMid'Get"
, "String"
, "Atom"
, "ConcatStrings"
, "PatchString"
};
funcs_refchapter30 = new String[]{
"BernoulliDistribution"
, "BinomialDistribution"
, "tDistribution"
, "PDF"
, "ChiSquareTest"
};
funcs_refchapter31 = new String[]{
"IsPrime"
, "IsSmallPrime"
, "IsComposite"
, "IsCoprime"
, "IsSquareFree"
, "IsPrimePower"
, "NextPrime"
, "IsTwinPrime"
, "IsIrregularPrime"
, "IsCarmichaelNumber"
, "Factors"
, "IsAmicablePair"
, "Factor"
, "Divisors"
, "DivisorsSum"
, "ProperDivisors"
, "ProperDivisorsSum"
, "Moebius"
, "CatalanNumber"
, "FermatNumber"
, "HarmonicNumber"
, "StirlingNumber1"
, "StirlingNumber2"
, "DivisorsList"
, "SquareFreeDivisorsList"
, "MoebiusDivisorsList"
, "SumForDivisors"
, "RamanujanSum"
, "Cyclotomic"
, "PAdicExpand"
, "IsQuadraticResidue"
, "LegendreSymbol"
, "JacobiSymbol"
, "GaussianFactors"
, "GaussianNorm"
, "IsGaussianUnit"
, "IsGaussianPrime"
, "GaussianGcd"
};
funcs_refchapter32 = new String[]{
};

  if (containsFunc(funcs_refchapter1,seach))
    return "refchapter1.html";
  if (containsFunc(funcs_refchapter2,seach))
    return "refchapter2.html";
  if (containsFunc(funcs_refchapter3,seach))
    return "refchapter3.html";
  if (containsFunc(funcs_refchapter4,seach))
    return "refchapter4.html";
  if (containsFunc(funcs_refchapter5,seach))
    return "refchapter5.html";
  if (containsFunc(funcs_refchapter6,seach))
    return "refchapter6.html";
  if (containsFunc(funcs_refchapter7,seach))
    return "refchapter7.html";
  if (containsFunc(funcs_refchapter8,seach))
    return "refchapter8.html";
  if (containsFunc(funcs_refchapter9,seach))
    return "refchapter9.html";
  if (containsFunc(funcs_refchapter10,seach))
    return "refchapter10.html";
  if (containsFunc(funcs_refchapter11,seach))
    return "refchapter11.html";
  if (containsFunc(funcs_refchapter12,seach))
    return "refchapter12.html";
  if (containsFunc(funcs_refchapter13,seach))
    return "refchapter13.html";
  if (containsFunc(funcs_refchapter14,seach))
    return "refchapter14.html";
  if (containsFunc(funcs_refchapter15,seach))
    return "refchapter15.html";
  if (containsFunc(funcs_refchapter16,seach))
    return "refchapter16.html";
  if (containsFunc(funcs_refchapter17,seach))
    return "refchapter17.html";
  if (containsFunc(funcs_refchapter18,seach))
    return "refchapter18.html";
  if (containsFunc(funcs_refchapter19,seach))
    return "refchapter19.html";
  if (containsFunc(funcs_refchapter20,seach))
    return "refchapter20.html";
  if (containsFunc(funcs_refchapter21,seach))
    return "refchapter21.html";
  if (containsFunc(funcs_refchapter22,seach))
    return "refchapter22.html";
  if (containsFunc(funcs_refchapter23,seach))
    return "refchapter23.html";
  if (containsFunc(funcs_refchapter24,seach))
    return "refchapter24.html";
  if (containsFunc(funcs_refchapter25,seach))
    return "refchapter25.html";
  if (containsFunc(funcs_refchapter26,seach))
    return "refchapter26.html";
  if (containsFunc(funcs_refchapter27,seach))
    return "refchapter27.html";
  if (containsFunc(funcs_refchapter28,seach))
    return "refchapter28.html";
  if (containsFunc(funcs_refchapter29,seach))
    return "refchapter29.html";
  if (containsFunc(funcs_refchapter30,seach))
    return "refchapter30.html";
  if (containsFunc(funcs_refchapter31,seach))
    return "refchapter31.html";
  if (containsFunc(funcs_refchapter32,seach))
    return "refchapter32.html";
  return "";
 
  
}//end method.






findFileForFunctionInrefprog(seach2) {
funcs_refprogchapter1 = new String[]{};
funcs_refprogchapter2 = new String[]{
"/*"
, "*/"
, "//"
, "Prog"
, "["
, "]"
, "Bodied"
, "Infix"
, "Postfix"
, "Prefix"
, "IsBodied"
, "IsInfix"
, "IsPostfix"
, "IsPrefix"
, "OpPrecedence"
, "OpLeftPrecedence"
, "OpRightPrecedence"
, "RightAssociative"
, "LeftPrecedence"
, "RightPrecedence"
, "RuleBase"
, "RuleBaseListed"
, "Rule"
, "HoldArg"
, "Retract"
, "UnFence"
, "HoldArgNr"
, "RuleBaseArgList"
, "MacroSet"
, "MacroClear"
, "MacroLocal"
, "MacroRuleBase"
, "MacroRuleBaseListed"
, "MacroRule"
, "Backquoting"
, "DefMacroRuleBase"
, "DefMacroRuleBaseListed"
, "ExtraInfo'Set, ExtraInfo'Get"
, "GarbageCollect"
, "FindFunction"
, "Secure"
};
funcs_refprogchapter3 = new String[]{
"MultiplyNum"
, "CachedConstant"
, "NewtonNum"
, "SumTaylorNum"
, "IntPowerNum"
, "BinSplitNum"
, "BinSplitData"
, "BinSplitFinal"
, "MathSetExactBits"
, "MathGetExactBits"
, "InNumericMode"
, "NonN"
, "IntLog"
, "IntNthRoot"
, "NthRoot"
, "ContFracList"
, "ContFracEval"
, "GuessRational"
, "NearRational"
, "BracketRational"
, "TruncRadian"
, "Builtin'Precision'Set"
, "Builtin'Precision'Get"
};
funcs_refprogchapter4 = new String[]{
"Check"
, "TrapError"
, "GetCoreError"
, "Assert"
, "DumpErrors"
, "ClearErrors"
, "IsError"
, "GetError"
, "ClearError"
, "GetErrorTableau"
, "CurrentFile"
, "CurrentLine"
};
funcs_refprogchapter5 = new String[]{
"MathNot"
, "MathAnd"
, "MathOr"
, "BitAnd"
, "BitOr"
, "BitXor"
, "Equals"
, "GreaterThan"
, "LessThan"
, "Math..."
, "Fast..."
, "ShiftLeft"
, "ShiftRight"
, "IsPromptShown"
, "GetTime"
};
funcs_refprogchapter6 = new String[]{
"IsGeneric"
, "GenericTypeName"
, "Array'Create"
, "Array'Size"
, "Array'Get"
, "Array'Set"
, "Array'CreateFromList"
, "Array'ToList"
};
funcs_refprogchapter7 = new String[]{
"Verify"
, "TestPiper"
, "LogicVerify"
, "LogicTest"
, "KnownFailure"
, "RoundTo"
, "VerifyArithmetic"
, "RandVerifyArithmetic"
, "VerifyDiv"
};
funcs_refprogchapter8 = new String[]{
};
funcs_refprogchapter9 = new String[]{
};
funcs_refprogchapter10 = new String[]{
};
  if (containsFunc(funcs_refprogchapter1,seach2))
    return "refprogchapter1.html";
  if (containsFunc(funcs_refprogchapter2,seach2))
    return "refprogchapter2.html";
  if (containsFunc(funcs_refprogchapter3,seach2))
    return "refprogchapter3.html";
  if (containsFunc(funcs_refprogchapter4,seach2))
    return "refprogchapter4.html";
  if (containsFunc(funcs_refprogchapter5,seach2))
    return "refprogchapter5.html";
  if (containsFunc(funcs_refprogchapter6,seach2))
    return "refprogchapter6.html";
  if (containsFunc(funcs_refprogchapter7,seach2))
    return "refprogchapter7.html";
  if (containsFunc(funcs_refprogchapter8,seach2))
    return "refprogchapter8.html";
  if (containsFunc(funcs_refprogchapter9,seach2))
    return "refprogchapter9.html";
  if (containsFunc(funcs_refprogchapter10,seach2))
    return "refprogchapter10.html";
  return "";
}//end method.


findFileForFunction(seach3)
{
  file = "";
  if (file.equals(""))
    file = findFileForFunctionInref(seach3);
  if (file.equals(""))
    file = findFileForFunctionInrefprog(seach3);
  return file;
}//end method.

containsFunc(chapterx,func)
{
  for (i=0;i<chapterx.length;i++)
  {
    if (chapterx[i].equals(func))
      return true;
  }
  return false;
}//end method.

/* {{{ License.
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */ //}}}


// :indentSize=4:lineSeparator=\n:noTabs=false:tabSize=4:folding=explicit:collapseFolds=0:
