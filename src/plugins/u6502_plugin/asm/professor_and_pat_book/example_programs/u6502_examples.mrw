
%uasm65,description=""
;Program Name: hello.asm.
;
;Version: 1.02.
;
;Description: Print all characters in Mess using OutChar.

;**************************************
;      Program entry point.
;**************************************
	org 0200h

Main *

;Point X to first character of Mess.
	ldx #0d
    
LoopTop *
;Grab a character from Mess.
	lda Mess,x
	
;If the character is the 0 which is at the end
; of Mess, then exit.
	cmp #0d
	beq DonePrint
	
;Call the OutChar monitor utility subroutine.
	jsr 0E003h
	
;Point X to the next character in Mess and loop back.
	inx
	jmp LoopTop
	
DonePrint *
	
;Exit the program.
	brk

;**************************************
;        Variables area.
;**************************************
Mess	dbt "Hello"
	    dbt 0d

	end


%/uasm65


   
   


%uasm65,description=""
;Program Name: blink.asm.
;
;Version: 1.1.
;
;Description: The purpose of this program is to blink
; the lights on and off continuously.
;

;**************************************
;      Program entry point.
;**************************************
	org 0200h

Main *
;Turn all the lights on and then waste some time
; so that the user can see the lights on.
	lda #11111111b
	sta 0a200h
	jsr delay
	
;Turn all the lights off and then waste some time
; so that the user can see the lights off.
	lda #00000000b
	sta 0a200h
	jsr delay
	
	jmp Main
	
;Exit the program.
	brk
	
	
;**************************************
;        Subroutines area.
;**************************************

;**************************************
;Delay subroutine.
;
;The purpose of this subroutine is to generate
; a delay so that the rate of the blinking
; can be controlled.
;
;Change the number that is being loaded into
; the 'A' register to change the delay time.
;**************************************
Delay *
;Save registers on the stack.
	pha
	txa
	pha
	tya
	pha
	
;Change the number that is being loaded into the
; 'A' register in order to change the delay time.
	lda #20d
    sta 0a800h
	
DelayLoop *
    lda 0a800h
    cmp #0d
    bne DelayLoop

	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
	

;**************************************
;        Variables area.
;**************************************

	end

%/uasm65





%uasm65,description=""
;Program Name: hello2.asm.
;
;Version: 1.1.
;
;Description: Print all of the characters in Mess using
; PrntMess

;**************************************
;      Program entry point.
;**************************************
	org 0200h

Main *
;Load the low byte of address of Mess into X.
	ldx #Mess<
	
;Load the high byte of address of Mess into Y.
	ldy #Mess>
	
;Call PrntMess monitor utility subroutine.
	jsr 100ch
	
;Exit the program.
	brk

;**************************************
;        Variables area.
;**************************************
Mess	dbt "Hello2"
	dbt 0d

	end

%/uasm65




%uasm65,description=""
;Program Name: hello3.asm.
;
;Version: 1.1.
;
;Description: Print all characters in Mess using PrntMess and
; equs.
;
;Assumptions: When added, the numbers will not be 
; greater than 255.

     ;************************************************************
     ;              Monitor Utility Subroutine Jump Table.
     ;************************************************************
OutChar   equ 1003h ;Output byte in A register to serial port.
                     
GetChar   equ 1006h ;Get a byte from the serial port.
                     
GetCharW  equ 1009h ;Wait and get a byte from the serial port.
                     
PrntMess  equ 100Ch ;Print a message to the serial port.
                     
OutSpace  equ 100Fh ;Output spaces to the serial port.                                 
                     
OutHex    equ 1012h ;Output a HEX number to the serial port.
                     
DgtToBin  equ 1015h ;Convert an ASCII digit into binary.
                     
GetLine   equ 1018h ;Input a line from the serial port.
          


;**************************************                  
;      Program entry point.
;**************************************
	org 0200h                                                       

Main *
	ldx #mess<
	ldy #mess>
	jsr PrntMess
	
;Exit the program.
	brk

;**************************************
;        Variables area.
;**************************************
mess	dbt "Hello3"
	    dbt 0d

	end

%/uasm65



%uasm65,description=""
;Program Name: addinput.asm.
;
;Version: 1.1.
;
;Description: Input 2 single digit numbers from the user, add
; them together, and then output the answer..                             

     ;************************************************************
     ;              Monitor Utility Subroutine Jump Table.
     ;************************************************************
OutChar   equ E003h ;Output byte in reg A to the user.
                     
GetChar   equ E006h ;Get a byte from the serial port.
                     
GetCharW  equ E009h ;Wait and get a byte from the user.
                     
PrntMess  equ E00Ch ;Print a message to the user.
                    
OutSpace  equ E00Fh ;Output spaces to the serial port.                                 
                     
OutHex    equ E012h ;Output a HEX number to the user.
                     
DgtToBin  equ E015h ;Convert an ASCII digit to binary.
                    
GetLine   equ E018h ;Input a line from the serial port.


;**************************************                  
;      Program entry point.
;**************************************
	org 0200h                                                       

Main *
;Ask user to enter the first number.
	ldx #InMess1<
	ldy #InMess1>
	jsr PrntMess
	
;Obtain the first number from the user, convert it from ASCII 
;to binary, and then store it in num1.
	jsr GetCharW
	jsr DgtToBin
	sta num1

;Ask user to enter the second number.
	ldx #InMess2<
	ldy #InMess2>
	jsr PrntMess
	
;Obtain the second number from the user, convert it from ASCII 
;to binary, and then store it in num2.
	jsr GetCharW
	jsr DgtToBin
	sta num2
	
;Add the numbers together and store the answer in sum.
	clc
	lda num1
	adc num2
	sta sum
	
;Inform the user that the answer is being printed.
	ldx #OutMess<
	ldy #OutMess>
	jsr PrntMess
	
;Print the answer.
	lda sum
	jsr OutHex
	
Exit *
;Exit the program.
	brk

;**************************************
;        Variables area.
;**************************************
InMess1 dbt "Enter number 1:"
	  dbt 0d
InMess2 dbt "Enter number 2:"
	  dbt 0d
OutMess dbt "The sum is:"
	  dbt 0d
	
num1	  dbt 0d
num2	  dbt 0d
sum	  dbt 0d

	end



%/uasm65




%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65



%uasm65,description=""

%/uasm65


    
    
