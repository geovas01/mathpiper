%mathpiper,def="FactorizeInt"

//  numbers

/// Middle level function: returns a list of prime factors and their powers.
/// E.g. FactorizeInt(50) returns {{2, 1}, {5, 2}}.
1# FactorizeInt(0) <-- {};
1# FactorizeInt(1) <-- {};

3# FactorizeInt(n_Integer?) <--
[
  Local(smallpowers);
  n := Abs(n);        // just in case we are given a negative number
  // first, find powers of 2, 3, ..., p with p=257 currently -- this speeds up PollardRho and should avoids its worst-case performance
  // do a quick check first - this will save us time especially if we want to move 257 up a lot
  If(
          Gcd(ProductPrimesTo257(), n) >? 1,        // if this is > 1, we need to separate some factors. Gcd() is very fast
        smallpowers := TrialFactorize(n, 257),        // value is {n1, {p1,q1}, {p2,q2}, ...} and n1=1 if completely factorized into these factors, and the remainder otherwise
        smallpowers := {n}        // pretend we had run TrialFactorize without success
  );
  n := smallpowers[1];        // remainder
  If(n=?1, Rest(smallpowers),
  // if n!=?1, need to factorize the remainder with Pollard Rho algorithm
          [
                  //If(InVerboseMode(), Echo({"FactorizeInt: Info: remaining number ", n}));
                SortFactorList(
                    PollardCombineLists(Rest(smallpowers), PollardRhoFactorize(n))
                );
          ]
  );
];

%/mathpiper





%mathpiper_docs,name="FactorizeInt",categories="User Functions",access="undocumented"
*CMD FactorizeInt --- *** UNDOCUMENTED ***

*CALL
        ?

*PARMS

?

*DESC

?

%/mathpiper_docs