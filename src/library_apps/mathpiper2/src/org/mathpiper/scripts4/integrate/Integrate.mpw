%mathpiper,def="Integrate;IntSub;defIntegrate;IntegrateRange;IntClean"

//todo:tk:this file need to be broken down further.


10# (Integrate(_var)(expr_List?))
    <-- Map("Integrate",{FillList(var,Length(expr)),expr});
20 # (Integrate(_var)(_expr)) <-- IntSub(var,expr,AntiDeriv(var,IntClean(var,expr)));

20 # (Integrate(_var, optionsList_List?)(_expr)) <--
[
    Local(result);

    optionsList := OptionsToAssociativeList(optionsList);

    result := Integrate(var) expr;

    If( optionsList["logAbs"] =? "True", result := ( result /: {Ln(_x) <- Ln(Abs(x))}) );

    result;
];


10 # IntSub(_var,_expr,Integrate(_var)(_expr2)) <--
     `Hold(Integrate(@var)(@expr));
20 # IntSub(_var,_expr,_result) <-- result;        // + UniqueConstant();

////////////////////////////////////////////////
//
// Integrate over a range
//
////////////////////////////////////////////////
10# (Integrate(_var,_from,_to)(expr_List?))
    <-- Map("Integrate",{FillList(var,Length(expr)),
                         FillList(from,Length(expr)),
                         FillList(to,Length(expr)),
                         expr});

20 # (Integrate(_var,_from,_to)(_expr))
    <-- defIntegrate(var,from,to,expr,a,b);


20 # (Integrate(_var,_from,_to,optionsList_List?)(_expr)) <--
[
    Local(result);

    optionsList := OptionsToAssociativeList(optionsList);

    result := Integrate(var,from,to) expr;

    If( optionsList["logAbs"] =? "True", result := ( result /: {Ln(_x) <- Ln(Abs(x))}) );

    result;
];

////////////////////////////////////////////////
//
// separate rules can be added here for specific integrals
// to defIntegrate
//
////////////////////////////////////////////////

10 # defIntegrate(_var,_from,_to,_expr,_a,_b)_(from =? -to And? OddFunction?(expr,var)) <-- 0;

// We need to define this case (integrating from 0 to 0 over an even function)
// explicitly, otherwise the integration ends up going in to infinite recursion.
// Extended it a little bit more, since if you are integrating from A to A,
// then the result is obviously zero. There are perhaps situations where
// this does not work, where we need to simplify (to-from) first. A naive
// implementation caused a test to fail.

10 # defIntegrate(_var,_from,_from,_expr,_a,_b) <-- 0;

12 # defIntegrate(_var,_from,_to,_expr,_a,_b)_(from =? -to And? EvenFunction?(expr,var))
        <-- 2*defIntegrate(var,0,to,expr,a,b);

100 # defIntegrate(_var,_from,_to,_expr,_a,_b)_(Type(AntiDeriv(var,IntClean(var,expr))) !=? "AntiDeriv")
        <-- IntegrateRange(var,expr,from,to,AntiDeriv(var,IntClean(var,expr)));

101 # defIntegrate(_var,_from,_to,_expr,_a,_b)
    <-- `Hold(Integrate(@var,@from,@to)(@expr));
//    <-- IntegrateRange(var,expr,from,to,AntiDeriv(var,expr));


////////////////////////////////////////////////
//
// No anti-derivative found, return unavaluated.
//
////////////////////////////////////////////////
10 # IntegrateRange(_var,_expr,_from,_to,Integrate(_var)_expr2)
    <-- `Hold(Integrate(@var,@from,@to)@expr);

////////////////////////////////////////////////
//
// Anti-derivative found, return result.
//
////////////////////////////////////////////////
20 # IntegrateRange(_var,_expr,_from,_to,_antideriv)
    <-- `(@antideriv Where @var == @to) - `(@antideriv Where @var == @from);

////////////////////////////////////////////////
//
// IntClean cleans up an expression before passing
// it on to integration. This function normalizes
// an expression in a way desirable for integration.
// TrigSimpCombine, for instance, expands expressions
// containing trigonometric functions so that they are
// additive as opposed to multiplicative.
//
// If the expression doesn't contain the variable,
// just return it as-is. This fixes:
// In> Integrate(x) z^100
//
// If the expression can be considered to be a sum
// of terms in var, then avoid premature simplification.
////////////////////////////////////////////////
10 # IntClean(_var,_expr) <--
[
        if( FreeOf?(var,expr) Or? SumOfTerms?(var,expr) )[
                expr;
        ] else if ( HasFunction?(expr,Sin) Or? HasFunction?(expr,Cos) )[
                Simplify(TrigSimpCombine(expr));
        ] else [
                Simplify(expr);
        ];
];

%/mathpiper



%mathpiper_docs,name="Integrate",categories="User Functions;Calculus Related (Symbolic)"
*CMD Integrate --- integration

*STD
*CALL
        Integrate(var, x1, x2) expr
        Integrate(var) expr
        Integrate(var, {optionsList}) expr
        Integrate(var, x1, x2, {optionsList}) expr

*PARMS

{var} -- atom, variable to integrate over

{optionsList} -- a list which contains options that affect integration

{x1} -- first point of definite integration

{x2} -- second point of definite integration

{expr} -- expression to integrate

*DESC

This function integrates the expression {expr} with respect to the
variable {var}. The first calling format is used to perform
definite integration: the integration is carried out from $var=x1$
to $var=x2$. The second form is for indefinite integration.

Some simple integration rules have currently been
implemented. Polynomials, some quotients of polynomials,
trigonometric functions and their inverses, hyperbolic functions
and their inverses, {Exp}, and {Ln}, and products of these
functions with polynomials can be integrated.



{Options}:

{logAbs} -- For results which contain logs, the result is given in terms of Ln(Abs(...))
if logAbs is True, but in terms of Ln(...) if logAbs is not set or is set to anything other than True.


*E.G.
In> Integrate(x,a,b) Cos(x)
Result: Sin(b)-Sin(a);

In> Integrate(x) Cos(x)
Result: Sin(x);

In> Integrate(x) 1/x;
Result> Ln(x)

In> Integrate(x, {logAbs -> True}) 1/x;
Result> Ln(Abs(x))

In> Integrate(x, a, b, {logAbs -> True})1/x;
Result> Ln(Abs(b))-Ln(Abs(a))

*SEE Differentiate, UniqueConstant
%/mathpiper_docs





%mathpiper,name="Integrate",subtype="automatic_test"


// verify that unknown integrals don't simplify
Verify(Integrate(x,a,b)Exp(Sin(x)),Integrate(x,a,b)Exp(Sin(x)));
Verify(Integrate(x    )Exp(Sin(x)),Integrate(x    )Exp(Sin(x)));

// Verify that Yacas cannot integrate these expressions.
// Yacas needs to return the integration unevaluated, or
// return a correct answer (if it happens to be able to do
// these integrals in the future).
TestNonIntegrable(_expr) <-- Verify(Type(expr) =? "Integrate",True);

// The following two used to get the interpreter into an infinite
// loop. Fixed in version 1.0.51
// FIXED!!! TestNonIntegrable(Integrate(x)(x*Ln(x)));
TestNonIntegrable(Integrate(x)Sin(Exp(x)));
Verify(Integrate(x) x^(-1),Ln(x)); // Well done Jonathan! ;-)
Verify(Integrate(x) 1/x,Ln(x) );

Verify(Integrate(x) 1/x^2, -x^ -1 );
Verify(Integrate(x) 6/x^2, (-6)*x^-1);
Verify(Integrate(x) 3/Sin(x),3*Ln(1/Sin(x)-Cos(x)/Sin(x)) );

Verify(Integrate(x) Ln(x), x*Ln(x)-x );
Verify(Integrate(x) x^5000, x^5001/5001 );
Verify(Integrate(x) 1/Tan(x), Ln(Sin(x)) );
Verify(Integrate(x) 1/Cosh(x)^2, Tanh(x) );
Verify(Integrate(x) 1/Sqrt(3-x^2), ArcSin(x/Sqrt(3)) );
Verify(Integrate(x) Erf(x), x*Erf(x)+1/(Exp(x^2)*Sqrt(Pi)) );
Verify(Integrate(x) Sin(x)/(2*y+4),(-Cos(x))/(2*y+4));
Verify(Integrate(x, {logAbs -> True})1/x, Ln(Abs(x)));
Verify(Integrate(x,a,b, {logAbs -> True})1/x, Ln(Abs(b))-Ln(Abs(a)));


TestNonIntegrable(Integrate(x) x^(1/x));
TestNonIntegrable(Integrate(x) x^(Sin(x)));
TestNonIntegrable(Integrate(x) Exp(x^2));
TestNonIntegrable(Integrate(x) Sin(x^2));

TestMathPiper(Integrate(x,0,A)Sin(x),1 - Cos(A));
TestMathPiper(Integrate(x,0,A)x^2,(A^3)/3);
TestMathPiper(Integrate(x,0,A)Sin(B*x),1/B-Cos(A*B)/B);
TestMathPiper(Integrate(x,0,A)(x^2+2*x+1)/(x+1),(A^2)/2+A);
TestMathPiper(Integrate(x,0,A)(x+1)/(x^2+2*x+1),Ln(A+1));

// Check that threaded integration works
Verify((Integrate(x,0,1) {1,x*x,1+x})-{1,1/3,3/2},{0,0,0});


// Test MatchLinear: code heavily used with integration
LocalSymbols(TestMatchLinearTrue,TestMatchLinearFalse) [

  TestMatchLinearTrue(_var,_expr,_expected) <--
  [
    Local(a,b);
    Verify(MatchLinear(var,expr),True);
    a:=Simplify(Matcheda()-expected[1]);
    b:=Simplify(Matchedb()-expected[2]);
    `TestMathPiper(@a,0);
    `TestMathPiper(@b,0);
  ];
  TestMatchLinearFalse(_var,_expr) <--
  [
    Local(a,b);
    Verify(MatchLinear(var,expr),False);
  ];

  TestMatchLinearTrue(x,(R+1)*x+(T-1),{(R+1),(T-1)});
  TestMatchLinearTrue(x,x+T,{1,T});
  TestMatchLinearTrue(x,a*x+b,{a,b});
  TestMatchLinearFalse(x,Sin(x)*x+(T-1));
  TestMatchLinearFalse(x,x+Sin(x));
];

Verify(Integrate(x) z^100, z^100*x );
Verify(Integrate(x) x^(-1),Ln(x) );

Verify( Integrate(x) x^5000, x^5001/5001 );

Verify( Integrate(x) Sin(x)/2, (-Cos(x))/2 );

Verify((Integrate(x,a,b)Cos(x)^2) - ((b-Sin((-2)*b)/2)/2-(a-Sin((-2)*a)/2)/2), 0);

/* Bug #9 */
Verify((Integrate(x,-1,1) 1/x), 0); /* or maybe Undefined? */
Verify((Integrate(x,-1,1) 1/x^2), Infinity);

/* Bug #18 */
//Changed, see next line TestMathPiper(Integrate(x) x^(1/2), 2/3*x^(3/2));
TestMathPiper(Integrate(x) x^(1/2), (2/3)*Sqrt(x)^(3));

// This one ended in an infinite loop because 1 is an even function, and the indefinite integrator
// then kept on calling itself because the left and right boundaries were equal to zero.
Verify(Integrate(x,0,0)1,0);

// This code verifies that if integrating over a zero domain, the result
// is zero.
Verify(Integrate(x,1,1)Sin(Exp(x^2)),0);

%/mathpiper