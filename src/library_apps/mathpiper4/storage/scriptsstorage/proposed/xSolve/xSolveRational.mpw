%mathpiper,title="xSolveRational"

//Retract("xSolveRational",*);

/************************* xSolveRational *************************/
/*
 *    This expression is a rational function of its variable.
 * Try to solve it with the help of that information.
 */

 
10 # xSolveRational( _expr, _var )_(RationalFunction?(expr,var)) <--
[
    Decide(iDebug=True,Tell(" Rational",expr==0));
    Local(n,d,fn,fd,factor,rootsn,rootsd,root,result);
    n := Numerator(expr);
    d := Denominator(expr);
    Decide(iDebug=True,Tell("  1",[n,d]));
    fn := Factors(n);
    fd := Factors(d);
    Decide(iDebug=True,Tell("  2",[fn,fd]));
    rootsn := [];
    rootsd := [];
    result := [];
    ForEach(factor,fn) 
        Decide(Contains?(VarList(factor[1]),var), Push(rootsn,PSolve(factor[1],var)));  
    ForEach(factor,fd) 
        Decide(Contains?(VarList(factor[1]),var), Push(rootsd,PSolve(factor[1],var)));    
    Decide(iDebug=True,Tell("  3",[rootsn,rootsd]));
    
    ForEach(root,rootsn) 
      [
            Decide(iDebug=True,Tell("     4",root));
            Decide(Not? Contains?(rootsd,root),Push(result,root));
            Decide(iDebug=True,Tell("     5",result));
      ];
    Decide(iDebug=True,Tell("  6",result));
    Decide( Length(result)=0,result:=[],MapSingle([[t],var==t], result)); 
];


%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output


