%mathpiper,def="MakeSparseUniVar"

//Retract("MakeSparseUniVar",*);

10 # MakeSparseUniVar(poly_CanBeUni,var_Atom?) <--
{
    Decide(InVerboseMode(),Tell("MakeSparseUniVar",[var,poly]));
    Local(uni,first,coeffs,n,c,lc,termlist,term);
    uni    := MakeUni(poly,var);
    Decide(InVerboseMode(),Tell("      ",uni));
    first  := uni[2];
    coeffs := (uni[3]);
    Decide(InVerboseMode(),{Tell("    ",first); Tell("   ",coeffs);});
    termlist := [];
    lc       := Length(coeffs);
    For(n:=0,n<?lc,n++)
    {
        c    := coeffs[n+1];
        term := [n+first,c];
        Decide(InVerboseMode(),Tell("        ",term));
        Decide(c !=? 0, Push(termlist,term));
    };
    Decide(InVerboseMode(),Tell("   ",[var,termlist]));
    [var,termlist];
};
%/mathpiper



