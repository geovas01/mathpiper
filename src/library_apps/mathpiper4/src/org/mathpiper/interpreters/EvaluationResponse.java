/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.mathpiper.interpreters;

import org.mathpiper.lisp.cons.Cons;

/**
 * This class is used by an {@link Interpreter} to send the results of an evaluation to
 * client code.
 */
public class EvaluationResponse {
    private String result = "";
    private String sideEffects = "";
    private boolean exceptionThrown = false;
    private Throwable exception = null;
    private String sourceFileName = "";
    private Object object = null;
    private Cons resultList = null;
            
    private EvaluationResponse()
    {
    }

    /**
     * A static factory method which is used to create new EvaluationResponse objects.
     *
     * @return a new EvaluationResponse
     */
    public static EvaluationResponse newInstance()
    {
        return new EvaluationResponse();
    }

    /**
     * Returns the name of the source file in which an error occurred.
     *
     * @return the name of the source file
     */
    public String getSourceFileName()
    {
        return sourceFileName;
    }

    /**
     * Sets the name of the source file in which an error occurred.
     *
     * @param  name of the source file
     */
    public void setSourceFileName(String sourceFileName)
    {
        this.sourceFileName = sourceFileName;
    }

    /**
     * Returns the result of the evaluation.
     *
     * @return the result of the evaluation
     */
    public String getResult()
    {
        return result;
    }

    /**
     * Sets the result of the evaluation.
     *
     * @param result the result of the evaluation
     */
    public void setResult(String result)
    {
        this.result = result.trim();
    }

    /**
     * Returns any side effects generated by the evaluation.
     * 
     * @return any side effects generated by the evaluation
     */
    public String getSideEffects()
    {
        return sideEffects;
    }

    /**
     * Sets any side effects generated by the evaluation.
     * 
     * @param sideEffects any side effects generated by the evaluation
     */
    public void setSideEffects(String sideEffects)
    {
        this.sideEffects = sideEffects;
    }

     /**
     * Returns the exception object thrown by the evaluation (if present).
     *
     * @return the exception object
     */
    public Throwable getException()
    {
        return exception;
    }

    /**
     * Sets the exception object thrown by the evaluation (if present).
     *
     * @param exception the exception object
     */
    public void setException(Throwable exception)
    {
        this.exceptionThrown = true;
        this.exception = exception;
    }

    /**
     * Allows the client to determine if the evaluation threw an exception.
     *
     * @return {@code true} if an exception was thrown and {@code false} otherwise
     */
    public boolean isExceptionThrown()
    {
        return exceptionThrown;
    }


    /**
     * Allows the user to obtain a Java object from a function.
     *
     * @return a Java object if one is available to return to the user.
     */
    public Object getObject()
    {
        return object;
    }


    /**
     * Sets a Java object to be returned to the user..
     *
     * @param exception the exception object
     */
    public void setObject(Object object)
    {
        this.object = object;
    }



    /**
     * Allows the user to obtain the result list.
     *
     * @return a Java object if one is available to return to the user.
     */
    public Cons getResultList() {
        return resultList;
    }


    /**
     * Sets the result list to be returned to the user..
     *
     * @param exception the exception object
     */
    public void setResultList(Cons resultList) {
        this.resultList = resultList;
    }



}//end class.
