%mathpiper,def="-"

/* Subtraction arity 1 */

//50 # -0 <-- 0;
51 # -Undefined <-- Undefined;
54 # - (- x_)      <-- x;
55 # (- (x_Number?)) <-- SubtractN(0,x);
100 # x_ - n_Constant?*(x_)   <-- (1-n)*x;
100 # n_Constant?*(x_) - x_   <-- (n-1)*x;

//100 # Sinh(x_)^2-Cosh(x_)^2         <-- 1;
//100 # Sinh(x_)-Cosh(x_)                <-- Exp(-x);

110 # - (x_ - y_) <-- y-x;
111 # - (x_Number? / y_) <-- (-x)/y;        
LocalSymbols(x)
{
  200 # - (x_List?) <-- MapSingle("-",x);
};

/* Subtraction arity 2 */
50  # x_Number? - y_Number? <-- SubtractN(x,y);
50  # x_Number? - y_Number? <-- SubtractN(x,y);
60  # Infinity - Infinity <-- Undefined;
100 # 0 - x_ <-- -x;
100 # x_ - 0 <-- x;
100 # x_ - x_ <-- 0;

107 # -( (-(x_))/(y_)) <-- x/y;
107 # -( (x_)/(-(y_))) <-- x/y;

110 # x_ - (- y_) <-- x + y;
110 # x_ - (y_NegativeNumber?) <-- x + (-y);
111 # (x_ + y_)- x_ <-- y;
111 # (x_ + y_)- y_ <-- x;
112 # x_ - (x_ + y_) <-- - y;
112 # y_ - (x_ + y_) <-- - x;
113 # (- x_) - y_ <-- -(x+y);
113 # (x_NegativeNumber?) - y_ <-- -((-x)+y);
113 # (x_NegativeNumber?)/y_ - z_ <-- -((-x)/y+z);


/* TODO move to this precedence everywhere? */
LocalSymbols(x,y,xarg,yarg)
{
  10 # ((x_List?) - (y_List?))::(Length(x)=?Length(y)) <--
  {
    Map('[[xarg,yarg],xarg-yarg],[x,y]);
  };
};

240 # (x_List? - y_NonObject?)::Not?(List?(y)) <-- -(y-x);

241 # (x_NonObject? - y_List?)::Not?(List?(x)) <--
{
   Local(i,result);
   result:=[];
   For(i:=1,i<=?Length(y),i++)
   { DestructiveInsert(result,i,x - y[i]); };
   result;
};

250 # z_Infinity? - Complex(x_,y_) <-- Complex(-x+z,-y);
250 # Complex(x_,y_) - z_Infinity? <-- Complex(x-z,y);

251 # z_Infinity? - x_ <-- z;
251 # x_ - z_Infinity? <-- -z;

250 # Undefined - y_ <-- Undefined;
250 # x_ - Undefined <-- Undefined;
// fractions
210 # x_Number? - (y_Number? / z_Number?) <--(x*z-y)/z;
210 # (y_Number? / z_Number?) - x_Number? <--(y-x*z)/z;
210 # (x_Number? / v_Number?) - (y_Number? / z_Number?) <--(x*z-y*v)/(v*z);

%/mathpiper


%mathpiper_docs,name="-",categories="Operators"
*CMD - --- arithmetic subtraction or negation
*STD
*CALL

        x-y
Precedence: left-side:
*EVAL PrecedenceGet("-")
, right-side:
*EVAL RightPrecedenceGet("-")

        -x

*PARMS

{x} and {y} -- objects for which subtraction is defined

*DESC

The subtraction operators can work on integers,
rational numbers, complex numbers, vectors, matrices and lists.

These operators are implemented in the standard math library (as opposed
to being built-in). This means that they can be extended by the user.

*E.G.

In> 2-3
Result: -1;

In> - 3
Result: -3;
%/mathpiper_docs
