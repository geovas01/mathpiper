%mathpiper,def="ExpN"
// jak: This seems to be less accurate than MathExpTaylor0 for numbers which are greater than 1.
/// ExpN(x). Algorithm: for x<0, divide 1 by ExpN(-x); for x>1, compute ExpN(x/2)^2 recursively; for 0<x<1, use the Taylor series.
// (This is not optimal; it would be much better to use SumTaylorNum and DoublingMinus1 from elemfuncs.mpi. But this should be debugged for now, since ExpN is important for many algorithms.)
/// TODO FIXME: No precision tracking yet. (i.e. the correct number of digits is not always there in the answer)

Defun("ExpN", [x])
        Decide(Equal?(x,0),1,
         Decide(LessThan?(x,0),DivideN(1, ExpN(MathNegate(x))),
          Decide(GreaterThan?(x,1), MathExpDoubling(MathExpTaylor0(MathMul2Exp(x,MathNegate(MathBitCount(x)))), MathBitCount(x)), MathExpTaylor0(x)
        )));

%/mathpiper





%mathpiper_docs,name="ExpN",categories="User Functions;Numeric"
*CMD ExpN --- exponential (base 2.718)...(arbitrary-precision math function)
*CALL
        ExpN(x)

	
*PARMS	
{X} -- a real number
	
*DESC

This command performs the calculation of an elementary mathematical
function.  The arguments must be numbers.  The reason for the
postfix {N} is that the library needs to define equivalent non-numerical
functions for symbolic computations, such as {Exp}, {Sin}, etc.

Note that all xxxN functions accept integers as well as floating-point numbers.
The resulting values may be integers or floats.  If the mathematical result is an
exact integer, then the integer is returned.  For example, {Sqrt(25)} returns
the integer {5}, and {Power(2,3)} returns the integer {8}.  In such cases, the
integer result is returned even if the calculation requires more digits than set by
{BuiltinPrecisionSet}.  However, when the result is mathematically not an integer,
the functions return a floating-point result which is correct only to the current precision.

*E.G.
In> ExpN(2)
Result: 7.389056086

In> ExpN(-.3)
Result: 0.7408182204

In> ExpN(0)
Result: 1

%/mathpiper_docs


