%mathpiper,def="ContFracList"

/////////////////////////////////////////////////
/// Continued fractions stuff
/////////////////////////////////////////////////

/// compute the list of continued fraction coefficients for a given number
/// if order is not given, computes to the end
10 # ContFracList(_n) <-- ContFracList(n, Infinity);
/// compute list of given length
10 # ContFracList(_n, _depth)_(depth <=? 0) <-- [];
20 # ContFracList(n_Integer?, _depth) <-- [n];
// prevent infinite loop when in numeric mode
30 # ContFracList(n_Number?, _depth) _NumericMode?() <-- NonNM(ContFracList(Rationalize(n), depth));

40 # ContFracList(n_Number?, _depth) <-- ContFracList(Rationalize(n), depth);

/* n/m = Quotient(n,m) + 1/( m/Modulo(n,m) ) */
35 # ContFracList((n_NegativeInteger?) / (m_Integer?), _depth) <-- Push( ContFracList(m/Modulo(n,m), depth-1) , Quotient(n,m)-1);

40 # ContFracList((n_Integer?) / (m_Integer?), _depth) <-- Push( ContFracList(m/Modulo(n,m), depth-1) , Quotient(n,m));

%/mathpiper



%mathpiper_docs,name="ContFracList",categories="Mathematics Functions;Numbers (Operations)"
*CMD ContFracList --- manipulate continued fractions
*CMD ContFracEval --- manipulate continued fractions
*STD
*CALL
        ContFracList(frac)
        ContFracList(frac, depth)
        ContFracEval(list)
        ContFracEval(list, rest)

*PARMS

{frac} -- a number to be expanded

{depth} -- desired number of terms

{list} -- a list of coefficients

{rest} -- expression to put at the end of the continued fraction

*DESC

The function {ContFracList} computes terms of the continued fraction
representation of a rational number {frac}.  It returns a list of terms of length {depth}. If {depth} is 
not specified, it returns all terms.

The function {ContFracEval} converts a list of coefficients into a continued fraction expression. The 
optional parameter {rest} specifies the symbol to put at the end of the expansion. If it is not given, 
the result is the same as if {rest=0}.

*E.G.

In> A:=ContFracList(33/7 + 0.000001)
Result: [4,1,2,1,1,20409,2,1,13,2,1,4,1,1,3,3,2];

In> ContFracEval(Take(A, 5))
Result: 33/7;

In> ContFracEval(Take(A,3), remainder)
Result: 1/(1/(remainder+2)+1)+4;
        
*SEE ContFrac, GuessRational
%/mathpiper_docs