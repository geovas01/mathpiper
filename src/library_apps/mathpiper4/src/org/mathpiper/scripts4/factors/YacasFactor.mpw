%mathpiper,def="Factor"

// This is so YacasFactor(Sin(x)) doesn't return FWatom(Sin(x))
//Factor(_p) <-- FW(Factors(p));
10 # Factor(p_CanBeUni) <-- FW(Factors(p));

%/mathpiper



%mathpiper_docs,name="Factor",categories="User Functions;Number Theory"
*CMD Factor --- factorization (in unparsed form)
*STD
*CALL
        YacasFactor(x)

*PARMS

{x} -- integer or univariate polynomial

*DESC

This is the original Yacas version of the Factor() function.  It has
b een superceeded in MathPiper by the function xFactor().

This function factorizes "x", similarly to {Factors}, but
it shows the result in a more human-readable format.

*E.G.

In> PrettyForm(YacasFactor(24));
        
         3
        2  * 3
        
Result: True;
In> PrettyForm(YacasFactor(2*x^3 + 3*x^2 - 1));
        
                     2   /     1 \
        2 * ( x + 1 )  * | x - - |
                         \     2 /
        
Result: True;

*SEE YacasFactors, xFactor, Prime?, PrettyForm
%/mathpiper_docs





%mathpiper,name="Factor",subtype="automatic_test"

// Factoring 2*x^2 used to generate an error
Verify(Factor(2*x^2),2*x^2);

%/mathpiper