%mathpiper,def="MatrixPower"

//////
// power of a matrix (dr)
//////

MatrixPower(x_SquareMatrix?, n_NonNegativeInteger?) <--
{
   Local(result);
   result:=Identity(Length(x));
   While(n !=? 0)
   {
      If(Odd?(n),
         result:=Dot(result,x));
      x:=Dot(x,x);
      n:=n>>1;
   };
   result;
};

MatrixPower(x_SquareMatrix?, n_NegativeInteger?) <--
   MatrixPower(Inverse(x),-n);

%/mathpiper



%mathpiper_docs,name="MatrixPower",categories="User Functions;Linear Algebra"
*CMD MatrixPower --- get nth power of a square matrix
*STD
*CALL
        MatrixPower(mat,n)

*PARMS

[mat] -- a square matrix

[n] -- an integer

*DESC

[MatrixPower(mat,n)] returns the [n]th power of a square matrix [mat]. For
positive [n] it evaluates dot products of [mat] with itself. For negative
[n] the nth power of the inverse of [mat] is returned. For [n]=0 the identity
matrix is returned.

*E.G.
In> A:=[[1,2],[3,4]]
Result: [[1,2],[3,4]];
In> MatrixPower(A,0)
Result: [[1,0],[0,1]];
In> MatrixPower(A,1)
Result: [[1,2],[3,4]];
In> MatrixPower(A,3)
Result: [[37,54],[81,118]];
In> MatrixPower(A,-3)
Result: [[-59/4,27/4],[81/8,-37/8]];

*SEE SquareMatrix?, Inverse, Dot
%/mathpiper_docs





%mathpiper,name="MatrixPower",subtype="automatic_test"

//Verify(MatrixPower(,),);
Verify(MatrixPower(a,0),Hold(MatrixPower(a,0)));
Verify(MatrixPower(a,n),Hold(MatrixPower(a,n)));
Verify(MatrixPower([a],0),Hold(MatrixPower([a],0)));
Verify(MatrixPower([a],n),Hold(MatrixPower([a],n)));
Verify(MatrixPower([[a]],0),[[1]]);
Verify(MatrixPower([[a]],1),[[a]]);
Verify(MatrixPower([[a]],-1),[[1/a]]);
Verify(MatrixPower([[a]],3/5),Hold(MatrixPower([[a]],3/5)));
Verify(MatrixPower([[a]],10),[[a^10]]);
Verify(MatrixPower([[a]],-10),[[1/a^10]]);
Verify(MatrixPower([[a]],n),Hold(MatrixPower([[a]],n)));

Verify(MatrixPower([[1,2],[3,4]],0),[[1,0],[0,1]]);
Verify(MatrixPower([[1,2],[3,4]],1),[[1,2],[3,4]]);
Verify(MatrixPower([[1,2],[3,4]],2),[[7,10],[15,22]]);
Verify(MatrixPower([[1,2],[3,4]],3),[[37,54],[81,118]]);
Verify(MatrixPower([[1,2],[3,4]],4),[[199,290],[435,634]]);
Verify(MatrixPower([[1,2],[3,4]],5),[[1069,1558],[2337,3406]]);
Verify(MatrixPower([[1,2],[3,4]],7),[[30853,44966],[67449,98302]]);
Verify(MatrixPower([[1,2],[3,4]],13),[[741736909,1081027478],[1621541217,2363278126]]);

Verify(MatrixPower([[1,2],[3,4]],-1),[[-2,1],[3/2,-1/2]]);
Verify(MatrixPower([[1,2],[3,4]],-2),[[11/2,-5/2],[-15/4,7/4]]);
Verify(MatrixPower([[1,2],[3,4]],-3),[[-59/4,27/4],[81/8,-37/8]]);
Verify(MatrixPower([[1,2],[3,4]],-4),[[317/8,-145/8],[-435/16,199/16]]);
Verify(MatrixPower([[1,2],[3,4]],-5),[[-1703/16,779/16],[2337/32,-1069/32]]);

%/mathpiper