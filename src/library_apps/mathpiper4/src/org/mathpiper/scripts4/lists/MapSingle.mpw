%mathpiper,def="MapSingle"

TemplateFunction("MapSingle",[_func,_list])
{
  Local(mapsingleresult);
  mapsingleresult:=[];

  ForEach(mapsingleitem,list)
  {
    DestructiveInsert(mapsingleresult,1,
      Apply(func,[mapsingleitem]));
  };
  DestructiveReverse(mapsingleresult);
};
UnFence("MapSingle",2);
HoldArgument("MapSingle","func");

%/mathpiper



%mathpiper_docs,name="MapSingle",categories="Programming Functions;Lists (Operations)"
*CMD MapSingle --- apply a unary function to all entries in a list
*STD
*CALL
        MapSingle(fn, list)

*PARMS

{fn} -- function to apply

{list} -- list of arguments

*DESC

The function "fn" is successively applied to all entries in
"list", and a list containing the respective results is
returned. The function can be given either as a string or as a pure
function (see Apply for more information on pure functions).

The {/@} operator provides a shorthand for
{MapSingle}.

*E.G.

Known functions of with one argument:
In> MapSingle("Sine",[_a,4,Pi]);
Result: [Sine(_a),Sine(4),Sine(Pi)]

In> MapSingle(Lambda([x],x^2), [(_a+2)^2,2,Pi]); 
Result: [(_a+2)^4,4,Pi^2]

In> MapSingle(Lambda([x],Expand(x^2)), [(_a+2)^2,2,Pi])
Result: [_a^4+8*_a^3+24*_a^2+32*_a+16,4,Pi^2]


*SEE Map, MapArgs, /@, Apply, Lambda
%/mathpiper_docs





%mathpiper,name="MapSingle",subtype="automatic_test"

Verify(MapSingle("!",[1,2,3,4]),[1,2,6,24]);

%/mathpiper