%mathpiper,def="MacroSubstitute"

/*Extremely hacky workaround, MacroSubstitute is actually the same as Substitute,
  but without re-evaluating its arguments. I could not just change Substitute, as
  it changed behaviour such that tests started to break.
 */
 
 
 
Function("MacroSubstitute", [body, predicate, change])
{
  `MacroSubstitute((Hold(@body)));
};



HoldArgument("MacroSubstitute", predicate);

HoldArgument("MacroSubstitute", change);

UnFence("MacroSubstitute", 3);

RulebaseHoldArguments("MacroSubstitute", [body]);

UnFence("MacroSubstitute", 1);



RuleHoldArguments("MacroSubstitute", 1, 1, `ApplyFast(predicate, [Hold(Hold(@body))]) =? True)
{
  `ApplyFast(change, [Hold(Hold(@body))]);
};



RuleHoldArguments("MacroSubstitute", 1, 2, `Function?(Hold(@body)))
{
  `ApplyFast("MacroMapArgs", [Hold(Hold(@body)), "MacroSubstitute"]);
};



RuleHoldArguments("MacroSubstitute", 1, 3, True)
{
 `Hold(@body);
};

%/mathpiper