%mathpiper,def="TeXForm;TexForm;TeXFormFinishList;TeXFormFinishList"

/* def file definitions
TeXForm
TeXFormMaxPrec
TexForm
*/

/* TeXForm: convert MathPiper objects to TeX math mode strings */

/* version 0.4 */

/* Changelog
        0.1        basic functionality
        0.2 fixed bracketing of Exp, added all infix ops and math functions
        0.3 fixed bracketing of lists, changed bracketing of math functions, modified TeX representation of user-defined functions (up to two-letter functions are in italics), added TeX Greek letters
        0.4 added nth roots, Sum, Limit, Integrate, hyperbolics, set operations, Abs, Max, Min, "==", ":=", Infinity; support indexed expressions A[i] and matrices.
        0.4.1 bugfixes for [] operator, support for multiple indices a[1][2][3]
        0.4.2 fix for variable names ending on digits "a2" represented as $a_2$
        0.4.3 bugfixes: complex I, indeterminate integration; relaxed bracketing of Sin()-like functions; implemented $TeX$ and $LaTeX$ correctly now (using \textrm{})
        0.4.4 use ordinary instead of partial derivative if expression has only one variable
        0.4.5 fixes for bracketing of Sum(); added <> to render as \sim and <=> to render as \approx; added BinomialCoefficient()
        0.4.6 moved the <> and <=> operators to initialization.rep/stdopers.mpi
        0.4.7 added Product() i.e. Product()
        0.4.8 added Differentiate(x,n), Deriv(x,n),  Implies? , and fixed errors with ArcSinh, ArcCosh, ArcTanh
        0.4.9 fixed omission: (fraction)^n was not put in brackets
        0.4.10 cosmetic change: insert \cdot between numbers in cases like 2*10^n
        0.4.11 added DumpErrors() to TexForm for the benefit of TeXmacs notebooks
        0.4.12 implement the % operation as Mod
        0.4.13 added Bessel{I,J,K,Y}, Ortho{H,P,T,U}, with a general framework for usual two-argument functions of the form $A_n(x)$; fix for Max, Min
        0.4.14 added mathematical notation for Floor(), Ceil()
        0.4.15 added Block() represented by ( )
        0.4.16 added Zeta()
*/

/* To do:
        0. Find and fix bugs.
        1. The current bracketing approach has limitations: can't omit extra brackets sometimes. " sin a b" is ambiguous, so need to do either "sin a sin b" or "(sin a) b" Hold((a*b)*Sqrt(x)). The current approach is *not* to bracket functions unless the enveloping operation is more binding than multiplication. This produces "sin a b" for both Sin(a*b) and Sin(a)*b but this is the current mathematical practice.
        2. Need to figure out how to deal with variable names such as "alpha3"
*/

//Retract("TeXForm", *);

/// TeXmacs prettyprinter
TexForm(_expr) <-- {DumpErrors();WriteString(TeXForm(expr));NewLine();};

RulebaseHoldArguments("TeXForm",[expression]);
RulebaseHoldArguments("TeXForm",[expression, precedence]);

/* Boolean predicate */


/* this function will put TeX brackets around the string if predicate holds */

Function ("TeXFormBracketIf", [predicate, string])
{
        Check(Boolean?(predicate) And? String?(string), "Argument", "TeXForm internal error: non-boolean and/or non-string argument of TeXFormBracketIf");
        Decide(predicate, ConcatStrings("( ", string, ") "), string);
};




Function ("TeXFormMatrixBracketIf", [predicate, string])
{
        Check(Boolean?(predicate) And? String?(string), "Argument", "TeXForm internal error: non-boolean and/or non-string argument of TeXFormMatrixBracketIf");
        Decide(predicate, ConcatStrings("\\left[ ", string, "\\right]"), string);
};



/* First, we convert TeXForm(x) to TeXForm(x, precedence). The enveloping precedence will determine whether we need to bracket the results. So TeXForm(x, TeXFormMaxPrec()) will always print "x", while TeXForm(x,-TeXFormMaxPrec()) will always print "(x)".
*/

TeXFormMaxPrec() := 60000;         /* This precedence will never be bracketed. It is equal to KMaxPrec */

/// main front-end
100 # TeXForm(_x) <-- ConcatStrings("$", TeXForm(x, TeXFormMaxPrec()), "$");

/* Replace numbers and variables -- never bracketed except explicitly */

110 # TeXForm(x_Number?, _p) <-- ToString(x);
/* Variables */
200 # TeXForm(x_Atom?, _p) <-- TeXFormTeXify(ToString(x));


/* Strings must be quoted but not bracketed */
100 # TeXForm(x_String?, _p) <--
{
    Local(characterList);

    characterList := [];
    ForEach(character, x)
    {
        Decide(character !=? " ", DestructiveAppend(characterList, character), DestructiveAppend(characterList, "\\hspace{2 mm}"));
    };
    ConcatStrings("\\mathrm{''", ListToString(characterList), "''}");
};



/* FunctionToList(...) can generate lists with atoms that would otherwise result in unparsable expressions. */
100 # TeXForm(x_Atom?, _p)_(Infix?(ToString(x))) <-- ConcatStrings("\\mathrm{", ToString(x), "}");


/* Lists: make sure to have matrices processed before them. Enveloping precedence is irrelevant because lists are always bracketed. List items are never bracketed. Note that TeXFormFinishList({a,b}) generates ",a,b" */

100 # TeXForm(x_List?, _p)_(Length(x)=?0) <-- TeXFormBracketIf(True, "");
110 # TeXForm(x_List?, _p) <-- TeXFormBracketIf(True, ConcatStrings(TeXForm(First(x), TeXFormMaxPrec()), TeXFormFinishList(Rest(x)) ) );
100 # TeXFormFinishList(x_List?)_(Length(x)=?0) <-- "";
110 # TeXFormFinishList(x_List?) <-- ConcatStrings(", ", TeXForm(First(x), TeXFormMaxPrec()), TeXFormFinishList(Rest(x)));

/* Replace operations */


        /* Template for "regular" binary infix operators:
100 # TeXForm(_x + _y, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("+"), ConcatStrings(TeXForm(x, LeftPrecedenceGet("+")), " + ", TeXForm(y, RightPrecedenceGet("+")) ) );
        */
// special cases: things like x*2 and 2*10^x look ugly without a period
// cases like x*2
115 # TeXForm(_expr * n_Number?, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("*"), ConcatStrings(TeXForm(expr, LeftPrecedenceGet("*")), "\\cdot ", TeXForm(n, RightPrecedenceGet("*")) ) );
// cases like a*20! and a*10^x
116 # TeXForm(_n * _expr, _p) _ (Function?(expr) And? Contains?(["^", "!", "!!"], Type(expr)) And? Number?(FunctionToList(expr)[2])) <-- TeXFormBracketIf(p<?PrecedenceGet("*"), ConcatStrings(TeXForm(n, LeftPrecedenceGet("*")), "\\cdot ", TeXForm(expr, RightPrecedenceGet("*")) ) );

        /* generic binary ops here */
120 # TeXForm(expr_Function?, _p)_(ArgumentsCount(expr)=?2 And? Infix?(Type(expr)) ) <-- TeXFormBracketIf(p<?PrecedenceGet(Type(expr)), ConcatStrings(TeXForm(FunctionToList(expr)[2], LeftPrecedenceGet(Type(expr))), TeXFormTeXify(Type(expr)), TeXForm(FunctionToList(expr)[3], RightPrecedenceGet(Type(expr))) ) );

        /* Template for "regular" unary prefix operators:
100 # TeXForm(+ _y, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("+"), ConcatStrings(" + ", TeXForm(y, RightPrecedenceGet("+")) ) );
        Note that RightPrecedenceGet needs to be defined for prefix ops or Else we won't be able to tell combined prefix/infix ops like "-" from strictly prefix ops.
        */

        /* generic unary ops here */
        /* prefix */
120 # TeXForm(expr_Function?, _p)_(ArgumentsCount(expr)=?1 And? Prefix?(Type(expr))) <-- TeXFormBracketIf(p<?PrecedenceGet(Type(expr)), ConcatStrings(
        TeXFormTeXify(Type(expr)),
        TeXForm(FunctionToList(expr)[2], RightPrecedenceGet(Type(expr)))
) );
        /* postfix */
120 # TeXForm(expr_Function?, _p)_(ArgumentsCount(expr)=?1 And? Postfix?(Type(expr))) <-- TeXFormBracketIf(p<?LeftPrecedenceGet(Type(expr)), ConcatStrings(
        TeXForm(FunctionToList(expr)[2], LeftPrecedenceGet(Type(expr))),
        TeXFormTeXify(Type(expr))
) );

        /* fraction and its operands are never bracketed except when they are under power */
100 # TeXForm(_x / _y, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings("\\frac{", TeXForm(x, TeXFormMaxPrec()), "}{", TeXForm(y, TeXFormMaxPrec()), "} ") );

        /* power's argument is never bracketed but it must be put in braces. Chained powers must be bracketed. Powers of 1/n are displayed as roots. */
100 # TeXForm(_x ^ (1/2), _p) <-- ConcatStrings("\\sqrt{", TeXForm(x, TeXFormMaxPrec()), "}");
101 # TeXForm(_x ^ (1/_y), _p) <-- ConcatStrings("\\sqrt[", TeXForm(y, TeXFormMaxPrec()), "]{", TeXForm(x, TeXFormMaxPrec()), "}");


120 # TeXForm(_x ^ _y, _p) <-- TeXFormBracketIf(p<=?PrecedenceGet("^"), ConcatStrings(TeXForm(x, PrecedenceGet("^")), " ^{", TeXForm(y, TeXFormMaxPrec()), "}" ) );

100 # TeXForm(If(_pred)_body, _p) <-- "\\textrm{if }(":TeXForm(pred,60000):") ":TeXForm(body,60000);
100 # TeXForm(_left Else _right, _p) <-- TeXForm(left,60000):"\\textrm{ Else }":TeXForm(right,60000);


/* functions */


LocalSymbols(TeXFormRegularOps, TeXFormRegularPrefixOps, TeXFormGreekLetters, TeXFormSpecialNames) {

        /* addition, subtraction, multiplication, all comparison and logical operations are "regular" */

  TeXFormRegularOps :=
  [
    ["+"," + "],
    ["-"," - "],
    ["*"," \\cdot "],
    [":="," := "], //\\equiv "],
    ["=="," = "],
    ["=?"," = "],
    ["!=?","\\neq "],
    ["<=?","\\leq "],
    [">=?","\\geq "],
    ["<?"," < "],
    [">?"," > "],
    ["And?","\\wedge "],
    ["Or?", "\\vee "],
    ["<>", "\\sim "],
    ["<=>", "\\approx "],
    ["Implies?", "\\Rightarrow "],
    ["Equivales?", "\\equiv "],
    ["%", "\\bmod "],
  ];

  TeXFormRegularPrefixOps := [ ["+"," + "], ["-"," - "], ["Not?"," \\neg "] ];



    /* Unknown function: precedence 200. Leave as is, never bracket the function itself and bracket the argumentPointer(s) automatically since it's a list. Other functions are precedence 100 */

  TeXFormGreekLetters := ["Gamma", "Delta", "Theta", "Lambda", "Xi", "Pi", "Sigma", "Upsilon", "Phi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "pi", "rho", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "varpi", "varrho", "varsigma", "varphi", "varepsilon"];
  TeXFormSpecialNames := [
    ["I", "\\imath "],        // this prevents a real uppercase I, use BesselI instead
    ["Pi", "\\pi "],        // this makes it impossible to have an uppercase Pi... hopefully it's not needed
    ["Infinity", "\\infty "],
    ["TeX", "\\textrm{\\TeX\\/}"],
    ["LaTeX", "\\textrm{\\LaTeX\\/}"],
    ["Maximum", "\\max "],        // this replaces these function names
    ["Minimum", "\\min "],
    ["Block", " "],
    ["Zeta", "\\zeta "],
  ];


  /* this function will take a user-defined variable or function name and output either this name unmodified if it's only 2 characters long, or the name in normal text if it's longer, or a TeX Greek letter code */
  Function ("TeXFormTeXify", [string])
  {
    Check(String?(string), "Argument", "TeXForm internal error: non-string argument of TeXFormTeXify");
    /* Check if it's a greek letter or a special name */
    Decide(Contains?(AssocIndices(TeXFormSpecialNames), string), TeXFormSpecialNames[string],
    Decide(Contains?(TeXFormGreekLetters, string), ConcatStrings("\\", string, " "),
    Decide(Contains?(AssocIndices(TeXFormRegularOps), string), TeXFormRegularOps[string],
    Decide(Contains?(AssocIndices(TeXFormRegularPrefixOps), string), TeXFormRegularPrefixOps[string],
    Decide(Length(string) >=? 2 And? Number?(ToAtom(StringMidGet(2, Length(string)-1, string))), ConcatStrings(StringMidGet(1,1,string), "_{", StringMidGet(2, Length(string)-1, string), "}"),
    Decide(Length(string) >? 2, ConcatStrings("\\mathrm{ ", string, " }"),
    string
    ))))));
  };

};

/* */

/* Unknown bodied function */

200 # TeXForm(x_Function?, _p) _ (Bodied?(Type(x))) <-- {
        Local(func, args, lastarg);
        func := Type(x);
        args := Rest(FunctionToList(x));
        lastarg := PopBack(args);
        TeXFormBracketIf(p<?PrecedenceGet(func), ConcatStrings(
          TeXFormTeXify(func), TeXForm(args, TeXFormMaxPrec()),  TeXForm(lastarg, PrecedenceGet(func))
        ));
};

/* Unknown infix function : already done above
210 # TeXForm(x_Function?, _p)_(Infix?(Type(x))) <-- ConcatStrings(TeXFormTeXify(Type(x)), TeXForm(Rest(FunctionToList(x)), TeXFormMaxPrec()) );
*/
/* Unknown function that is not prefix, infix or postfix */
220 # TeXForm(x_Function?, _p) <-- ConcatStrings(TeXFormTeXify(Type(x)), TeXForm(Rest(FunctionToList(x)), TeXFormMaxPrec()) );

        /* Never bracket Sqrt or its arguments */
100 # TeXForm(Sqrt(_x), _p) <-- ConcatStrings("\\sqrt{", TeXForm(x, TeXFormMaxPrec()), "}");

        /* Always bracket Exp's arguments */
100 # TeXForm(Exp(_x), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings("\\exp ", TeXFormBracketIf(True, TeXForm(x, TeXFormMaxPrec())) ) );


LocalSymbols(TeXFormMathFunctions, TeXFormMathFunctions2) {

  /* Sin, Cos, etc. and their argument is bracketed when it's a sum or product but not bracketed when it's a power. */
  /// supported MathPiper functions: "mathematical" functions of one argument which sometimes do not require parentheses (e.g. $\sin x$ )
  TeXFormMathFunctions := [ ["Cos","\\cos "], ["Sin","\\sin "], ["Tan","\\tan "], ["Cosh","\\cosh "], ["Sinh","\\sinh "], ["Tanh","\\tanh "], ["Ln","\\ln "], ["ArcCos","\\arccos "], ["ArcSin","\\arcsin "], ["ArcTan","\\arctan "], ["ArcCosh","\\mathrm{arccosh}\\, "], ["ArcSinh","\\mathrm{arcsinh}\\, "], ["ArcTanh","\\mathrm{arctanh}\\, "],
  ["Erf", "\\mathrm{erf}\\, "], ["Erfc", "\\mathrm{erfc}\\, "],
  ];

  /// supported MathPiper functions: functions of two arguments of the form $A_n(x)$
  TeXFormMathFunctions2 := [
  ["BesselI", "I "], ["BesselJ", "J "],
  ["BesselK", "K "], ["BesselY", "Y "],
  ["OrthoH", "H "], ["OrthoP", "P "],
  ["OrthoT", "T "], ["OrthoU", "U "],
  ];

  // generic two-argument functions of the form $A(x,y)$ where just the name has to be changed: handle this using the usual naming conversion scheme (TeXFormSpecialNames)

  /* Precedence of 120 because we'd like to process other functions like sqrt or exp first */

  // generic math functions of one argument
  120 # TeXForm(expr_Function?, _p) _ (ArgumentsCount(expr)=?1 And? Contains?(AssocIndices(TeXFormMathFunctions), Type(expr)) ) <-- TeXFormBracketIf(p<?PrecedenceGet("*"), ConcatStrings(TeXFormMathFunctions[Type(expr)], TeXForm( FunctionToList(expr)[2], PrecedenceGet("*")) ) );

  /// math functions two arguments of the form $A_n(x)$
  120 # TeXForm(expr_Function?, _p) _ (ArgumentsCount(expr)=?2 And? Contains?(AssocIndices(TeXFormMathFunctions2), Type(expr)) ) <-- TeXFormBracketIf(p<?PrecedenceGet("*"),
    ConcatStrings(
    TeXFormMathFunctions2[Type(expr)],
    "_{",
    TeXForm( FunctionToList(expr)[2], TeXFormMaxPrec()),        // never bracket the subscript
    "}",
    TeXFormBracketIf(True, TeXForm(FunctionToList(expr)[3], TeXFormMaxPrec()) ) // always bracket the function argument
    )
  );

}; // LocalSymbols(TeXFormMathFunctions, TeXFormMathFunctions2)


/* Complex numbers */
100 # TeXForm(Complex(0, 1), _p) <-- TeXForm(Hold(I), p);
100 # TeXForm(Complex(_x, 0), _p) <-- TeXForm(x, p);
110 # TeXForm(Complex(_x, 1), _p) <-- TeXForm(x+Hold(I), p);
110 # TeXForm(Complex(0, _y), _p) <-- TeXForm(Hold(I)*y, p);
120 # TeXForm(Complex(_x, _y), _p) <-- TeXForm(x+Hold(I)*y, p);

/* Abs(), Floor(), Ceil() are displayed as special brackets */

100 # TeXForm(Abs(_x), _p) <-- ConcatStrings("\\left| ", TeXForm(x, TeXFormMaxPrec()), "\\right| ");
100 # TeXForm(Floor(_x), _p) <-- ConcatStrings("\\left\\lfloor ", TeXForm(x, TeXFormMaxPrec()), "\\right\\rfloor ");
100 # TeXForm(Ceil(_x), _p) <-- ConcatStrings("\\left\\lceil ", TeXForm(x, TeXFormMaxPrec()), "\\right\\rceil ");

/* Some functions which are displayed as infix: Mod, Union, Intersection, Difference, Contains? */

100 # TeXForm(Modulo(_x, _y), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(TeXForm(x, PrecedenceGet("/")), "\\bmod ", TeXForm(y, PrecedenceGet("/")) ) );

100 # TeXForm(Union(_x, _y), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(TeXForm(x, PrecedenceGet("/")), "\\cup ", TeXForm(y, PrecedenceGet("/")) ) );

100 # TeXForm(Intersection(_x, _y), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(TeXForm(x, PrecedenceGet("/")), "\\cap ", TeXForm(y, PrecedenceGet("/")) ) );

100 # TeXForm(Difference(_x, _y), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(TeXForm(x, PrecedenceGet("/")), "\\setminus ", TeXForm(y, PrecedenceGet("/")) ) );

/* "Contains?" is displayed right to left */

100 # TeXForm(Contains?(_x, _y), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(TeXForm(y, PrecedenceGet("/")), "\\in ", TeXForm(x, PrecedenceGet("/")) ) );

/// Binomial coefficients: always bracketed
100 # TeXForm(BinomialCoefficient(_n, _m), _p) <-- TeXFormBracketIf(False, ConcatStrings("{", TeXForm(n, TeXFormMaxPrec()), " \\choose ", TeXForm(m, TeXFormMaxPrec()), "}" )
);

/* Some functions with limits: Lim, Sum, Integrate */

100 # TeXForm(Sum(_x, _x1, _x2, _expr), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings("\\sum _{", TeXForm(x, TeXFormMaxPrec()), " = ", TeXForm(x1, TeXFormMaxPrec()), "} ^{", TeXForm(x2, TeXFormMaxPrec()), "} ", TeXForm(expr, PrecedenceGet("*")) ) );

100 # TeXForm(Sum(_expr), _p) <-- TeXFormBracketIf(p <? PrecedenceGet("/"), ConcatStrings("\\sum ", TeXForm(expr, PrecedenceGet("*")) ) );


100 # TeXForm(Product(_x, _x1, _x2, _expr), _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings("\\prod _{", TeXForm(x, TeXFormMaxPrec()), " = ", TeXForm(x1, TeXFormMaxPrec()), "} ^{", TeXForm(x2, TeXFormMaxPrec()), "} ", TeXForm(expr, PrecedenceGet("*")) ) );

100 # TeXForm(Integrate(_x, _x1, _x2) _expr, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(
"\\int _{", TeXForm(x1, TeXFormMaxPrec()), "} ^{", TeXForm(x2, TeXFormMaxPrec()), " } ", TeXForm(expr, PrecedenceGet("*")), " d", TeXForm(x, TeXFormMaxPrec())
) );

/* indeterminate integration */
100 # TeXForm(Integrate(_x) _expr, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings(
"\\int ", TeXForm(expr, PrecedenceGet("*")), " d", TeXForm(x, TeXFormMaxPrec())
) );

100 # TeXForm(Limit(_x, _x1) _expr, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("/"), ConcatStrings("\\lim _{", TeXForm(x, TeXFormMaxPrec()), "\\rightarrow ", TeXForm(x1, TeXFormMaxPrec()), "} ", TeXForm(expr, PrecedenceGet("/")) ) );

/* Derivatives */

/* Use partial derivative only when the expression has several variables */
100 # TeXForm(Deriv(_x)_y, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("-"), ConcatStrings(
        Decide(Length(VarList(y))>?1, "\\frac{\\partial}{\\partial ", "\\frac{d}{d "
        ), TeXForm(x, PrecedenceGet("^")), "}", TeXForm(y, PrecedenceGet("/")) ) );

100 # TeXForm(Deriv(_x, _n)_y, _p) <-- TeXFormBracketIf(p<?PrecedenceGet("-"), ConcatStrings(
        Decide(
                Length(VarList(y))>?1,
                "\\frac{\\partial^" ~ TeXForm(n, TeXFormMaxPrec()) ~ "}{\\partial ",
                "\\frac{d^" ~ TeXForm(n, TeXFormMaxPrec()) ~ "}{d "
        ), TeXForm(x, PrecedenceGet("^")), " ^", TeXForm(n, TeXFormMaxPrec()), "}", TeXForm(y, PrecedenceGet("/")) ) );
100 # TeXForm(Differentiate(_x)_y, _p) <-- TeXForm(Deriv(x) y, p);
100 # TeXForm(Differentiate(_x, _n)_y, _p) <-- TeXForm(Deriv(x, n) y, p);

/* Indexed expressions */

/* This seems not to work because x[i] is replaced by Nth(x,i) */
/*
100 # TeXForm(_x [ _i ], _p) <-- ConcatStrings(TeXForm(x, TeXFormMaxPrec()), " _{", TeXForm(i, TeXFormMaxPrec()), "}");
*/
/* Need to introduce auxiliary function, or Else have trouble with arguments of Nth being lists */
RulebaseHoldArguments("TeXFormNth",[x,y]);
100 # TeXForm(Nth(Nth(_x, i_List?), _j), _p) <-- TeXForm(TeXFormNth(x, Append(i,j)), p);
100 # TeXForm(TeXFormNth(Nth(_x, i_List?), _j), _p) <-- TeXForm(TeXFormNth(x, Append(i,j)), p);
110 # TeXForm(Nth(Nth(_x, _i), _j), _p) <-- TeXForm(TeXFormNth(x, List(i,j)), p);
120 # TeXForm(Nth(_x, _i), _p) <-- ConcatStrings(TeXForm(x, TeXFormMaxPrec()), " _{", TeXForm(i, TeXFormMaxPrec()), "}");
120 # TeXForm(TeXFormNth(_x, _i), _p) <-- ConcatStrings(TeXForm(x, TeXFormMaxPrec()), " _{", TeXForm(i, TeXFormMaxPrec()), "}");

/* Matrices are always bracketed. Precedence 80 because lists are at 100. */

80 # TeXForm(M_Matrix?, _p) <-- TeXFormMatrixBracketDecide(True, TeXFormPrintMatrix(M));

Function ("TeXFormPrintMatrix", [M])
{
/*
        Want something like "\begin{array}{cc} a & b \\ c & d \\ e & f \end{array}"
        here, "cc" is alignment and must be given for each column
*/
        Local(row, col, result, ncol);
        result := "\\begin{array}{";
        ForEach(col, M[1]) result:=ConcatStrings(result, "c");
        result := ConcatStrings(result, "}");

        ForEach(row, 1 .. Length(M)) {
                ForEach(col, 1 .. Length(M[row])) {
                        result := ConcatStrings( result, " ", TeXForm(M[row][col], TeXFormMaxPrec()), Decide(col =? Length(M[row]), Decide(row =? Length(M), "", " \\\\"), " &"));
                };
        };

        ConcatStrings(result, " \\end{array} ");
};

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



%mathpiper_docs,name="TeXForm",categories="User Functions;Input/Output"
*CMD TeXForm --- export expressions to $LaTeX$
*STD
*CALL
        TeXForm(expr)

*PARMS

{expr} -- an expression to be exported

*DESC

{TeXForm} returns a string containing a $LaTeX$ representation of the MathPiper expression {expr}. Currently the exporter handles most expression types but not all.

*E.G.

In> TeXForm(Sin(a1)+2*Cos(b1))
Result: "\$\sin a_{1} + 2 \cos b_{1}\$";

*SEE PrettyForm, CForm
%/mathpiper_docs





%mathpiper,name="TeXForm",subtype="automatic_test"

/* it worketh no more...
Testing("Realistic example");
f:=Exp(I*lambda*eta)*w(T*(k+k1+lambda));
g:=Simplify(Subst(lambda,0) f+(k+k1)*(Differentiate(lambda)f)+k*k1*Differentiate(lambda)Differentiate(lambda)f );
Verify(TeXForm(g), ...);
*/

Verify(
TeXForm(Hold(Cos(A-B)*Sqrt(C+D)-(a+b)*c^d+2*I+Complex(a+b,a-b)/Complex(0,1)))
,"$\\cos ( A - B)  \\cdot \\sqrt{C + D} - ( a + b)  \\cdot c ^{d} + 2 \\cdot \\imath  + \\frac{a + b + \\imath  \\cdot ( a - b) }{\\imath } $"
);

Verify(
TeXForm(Hold(Exp(A*B)/C/D/(E+F)*G-(-(a+b)-(c-d))-b^(c^d) -(a^b)^c))
,"$\\frac{\\frac{\\frac{\\exp ( A \\cdot B) }{C} }{D} }{E + F}  \\cdot G - (  - ( a + b)  - ( c - d) )  - b ^{c ^{d}} - ( a ^{b})  ^{c}$"
);

Verify(
TeXForm(Hold(Cos(A-B)*Sin(a)*f(b,c,d*(e+1))*Sqrt(C+D)-(g(a+b)^(c+d))^(c+d)))
,"$\\cos ( A - B)  \\cdot \\sin a \\cdot f( b, c, d \\cdot ( e + 1) )  \\cdot \\sqrt{C + D} - ( g( a + b)  ^{c + d})  ^{c + d}$"
);


/* This test is commented out because it throws an exception when orthopoly.mpw is removed from the build process.
// testing latest features: \\cdot, %, (a/b)^n, BinomialCoefficient(), BesselI, OrthoH
Verify(
TeXForm(3*2^n+Hold(x*10!) + (x/y)^2 + BinomialCoefficient(x,y) + BesselI(n,x) + Maximum(a,b) + OrthoH(n,x))
, "$3\\cdot 2 ^{n} + x\\cdot 10! + ( \\frac{x}{y} )  ^{2} + {x \\choose y} + I _{n}( x)  + \\max ( a, b)  + H _{n}( x) $"
);
*/

/* this fails because of a bug that Differentiate(x) f(y) does not go to 0 */ /*
Verify(
TeXForm(3*Differentiate(x)f(x,y,z)*Cos(Omega)*Modulo(Sin(a)*4,5/a^b))
,"$3 ( \\frac{\\partial}{\\partial x}f( x, y, z) )  ( \\cos \\Omega )  ( 4 ( \\sin a) ) \\bmod \\frac{5}{a ^{b}} $"
);
*/


RulebaseHoldArguments("f",[x]);
Verify(
TeXForm(Hold(Differentiate(x)f(x)))
,"$\\frac{d}{d x}f( x) $");
Retract("f",1);

Verify(
TeXForm(Hold(Not? (c<?0) And? (a+b)*c>=? -d^e And? (c<=?0 Or? b+1>?0) Or? a!=?0 And? Not? (p=?q)))
,"$ \\neg c < 0\\wedge ( a + b)  \\cdot c\\geq  - d ^{e}\\wedge ( c\\leq 0\\vee b + 1 > 0) \\vee a\\neq 0\\wedge  \\neg p = q$"
);

RulebaseHoldArguments("f",[x,y,z]);
Verify(
TeXForm((Differentiate(x)f(x,y,z))*Cos(Omega)*Modulo(Sin(a)*4,5/a^b))
,"$( \\frac{\\partial}{\\partial x}f( x, y, z) )  \\cdot \\cos \\Omega  \\cdot ( 4 \\cdot \\sin a) \\bmod \\frac{5}{a ^{b}} $"
);
Retract("f",3);

RulebaseHoldArguments("g",[x]);
RulebaseHoldArguments("theta",[x]);
Verify(
TeXForm(Pi+Exp(1)-Theta-Integrate(x,x1,3/g(Pi))2*theta(x)*Exp(1/x))
,"$\\pi  + \\exp ( 1)  - \\Theta  - \\int _{x_{1}} ^{\\frac{3}{g( \\pi ) }  } 2 \\cdot \\theta ( x)  \\cdot \\exp ( \\frac{1}{x} )  dx$"
);
Retract("g",1);
Retract("theta",1);

Verify(
TeXForm([a[3]*b[5]-c[1][2],[a,b,c,d]])
,"$( a _{3} \\cdot b _{5} - c _{( 1, 2) }, ( a, b, c, d) ) $"
);


//Note: this is the only code in the test suite that currently creates new rulebases.
RulebaseHoldArguments("aa",[x,y,z]);
Bodied("aa", 200);
RulebaseHoldArguments("bar", [x,y]);
Infix("bar", 100);
Verify(
TeXForm(aa(x,y) z + 1 bar y!)
,"$aa( x, y) z + 1\\mathrm{ bar }y!$"
);
Retract("aa",3);
Retract("bar",2);

Verify(
TeXForm(x^(1/3)+x^(1/2))
, "$\\sqrt[3]{x} + \\sqrt{x}$"
);

/*
Verify(
TeXForm()
,""
);
*/

/* Bug report from Michael Borcherds. The brackets were missing. */
Verify(TeXForm(Hold(2*x*(-2))), "$2 \\cdot x \\cdot (  - 2) $");


%/mathpiper