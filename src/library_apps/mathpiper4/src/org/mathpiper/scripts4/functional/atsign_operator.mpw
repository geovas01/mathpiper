%mathpiper,def="@"

RulebaseHoldArguments("@",[_func,_arg]);
RuleHoldArguments("@",2,1,List?(arg)) Apply(func,arg);
RuleHoldArguments("@",2,2,True       ) Apply(func,[arg]);

%/mathpiper



%mathpiper_docs,name="@",categories="Operators"
*CMD @ --- apply a function
*STD
*CALL
        fn @ arglist
Precedence:
*EVAL PrecedenceGet("@")

*PARMS

{fn} -- function to apply

{arglist} -- single argument, or a list of arguments

*DESC

This function is a shorthand for {Apply}. It applies the
function "fn" to the argument(s) in "arglist" and returns the
result. The first parameter "fn" can either be a string containing
the name of a function or a pure function.

This operator can help the user to program in the style of functional 
programming languages such as Miranda or Haskell.

*E.G.

In> "Sine" @ _a
Result: Sine(_a);

In> [[_a],Sine(_a)] @ _a
Result: Sine(_a);

In>Function() f(_x,_y) 
Result: True

In> "f" @ [_a,_b]
Result: f(_a,_b);



*SEE Apply
%/mathpiper_docs
