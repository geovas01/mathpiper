%mathpiper,def="/@"

Function("/@",[_func,_lst]) Apply("MapSingle",[func,lst]);

%/mathpiper



%mathpiper_docs,name="/@",categories="Operators"
*CMD /@ --- apply a function to all entries in a list
*STD
*CALL
        fn /@ list
Precedence:
*EVAL PrecedenceGet("/@")

*PARMS

{fn} -- function to apply

{list} -- list of arguments

*DESC
This function is a shorthand for {MapSingle}. It
successively applies the function "fn" to all the entries in
"list" and returns a list contains the results. The parameter "fn"
can either be a string containing the name of a function or a pure
function.

This operator can help the user to program in the style of functional 
programming languages such as Miranda or Haskell.

*E.G.

In> "Sine" /@ [_a,3]
Result: [Sine(_a),Sine(3)];

In> Sine /@ [2,4,NM(Pi,16), Pi]
Result: [Sine(2),Sine(4),Sine(3.141592653589793),Sine(Pi)]

In> SineN /@ [2,4,NM(Pi,16)]
Result: [0.9092974269,-0.7568024961,0.0000000003906125890]

In> Lambda([a],Sine(a)*a) /@ [_a,4]
Result: [Sine(_a)*_a,4*Sine(4)]


*SEE MapSingle, Map, MapArgs
%/mathpiper_docs