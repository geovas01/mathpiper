%mathpiper,title="two boys."

boysAndGirls := {};
ForEach(trial, 1 .. 100)
[
    child1 := Round(Random());
    child2 := Round(Random());
    
    boysAndGirls := Append( boysAndGirls, {child1, child2} );
];

boysOnly := Remove(boysAndGirls,{0,0});

Echo("Trials :", boysOnly);

oneBoy := Count(boysOnly, {1,0}) + Count(boysOnly, {0,1});

twoBoys := Count(boysOnly, {1,1});

Echo("One boy: ", oneBoy);

Echo("Two boys: ", twoBoys);

Echo("At least one boy: ", Length(boysOnly),N( (oneBoy + twoBoys)/Length(boysAndGirls)));


N(twoBoys/ Length(boysOnly));


%/mathpiper

    %output,preserve="false"
      Result: 0
      
      Side Effects:
      Trials :Remove({{1,1},{1,0},{1,0},{0,0},{0,1},{0,1},{0,1},{0,0},{0,0},{1,1},{0,1},{1,0},{1,0},{0,0},{1,1},{1,1},{0,0},{0,0},{0,1},{1,0},{1,0},{1,1},{0,1},{0,0},{1,1},{1,1},{1,1},{1,0},{1,1},{1,0},{0,1},{0,1},{0,0},{0,0},{0,1},{0,0},{1,0},{1,0},{0,0},{0,1},{1,0},{1,0},{0,0},{1,1},{0,0},{0,1},{0,0},{0,0},{0,1},{1,1},{0,1},{1,0},{1,1},{1,1},{1,1},{1,1},{0,0},{1,0},{0,1},{1,1},{1,1},{1,0},{1,1},{1,0},{1,1},{0,0},{1,0},{1,1},{0,0},{1,1},{1,0},{0,1},{1,1},{1,0},{0,0},{1,0},{1,1},{1,1},{1,0},{0,0},{0,1},{0,0},{1,0},{1,0},{1,1},{1,0},{0,0},{1,1},{0,1},{1,1},{0,1},{0,0},{0,1},{1,0},{1,0},{0,0},{0,1},{1,0},{1,0},{0,1}},{0,0}) 
      One boy: 0 
      Two boys: 0 
      At least one boy: 2 0
.   %/output





%mathpiper,title="Repeat"

Retract("Repeat",*);

/*RuleBase("Repeat",{iterations});


10 # Repeat(iterations_isNumber, body) <--
[
    index := 1;
    
    While( index < iterations )
    [
        body;
    ];

];

*/


TemplateFunction("Repeat",{iterations,body})
[
    While (iterations > 0)
    [
        Eval(body);
        iterations--;
    ];
    True;
];
UnFence("Repeat",2);
//HoldArgNr("Repeat",2,1);
HoldArgNr("Repeat",2,2);

Bodied("Repeat", 60000);

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



%mathpiper,title="RandomInteger"
RandomInteger(first, last) :=
[
    difference := last - first;

    Round(Random() * difference) + first;
];



%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



%mathpiper,title="RandomPick"

Retract("RandomPick",*);


10 # RandomPick(list_IsList) <--
[
    pickPosition := RandomInteger(Length(list)) + 1;

    list[pickPosition];
];




Retract("Shuffle",*);


10 # Shuffle(list_IsList) <--
[
    n := Length(list);
    
    While(n > 1)
    [
        k := RandomInteger(1,n);
        tmp := list[k];
        list[k] := list[n];
        list[n] := tmp;
        n--;
    ];      
    
    list;
];


%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



%mathpiper,title="Gold example on pp.82 chapter 6."

ships := {{gold, gold}, {gold, silver}, {silver, silver}};

score := {};


Repeat(1000)
[
    ship := RandomPick(ships);
    
    ship := Shuffle(ship);
    
    If(Count(ship,gold) = 2, score := Append(score,success) );
    
     If(Count(ship,silver) = 1,
            If(ship[1] = gold, score := Append(score,failure)) 
     );
    
    

];
initialGoldCount := Length(score);
goldGoldCount := Count(score,success);

result := N(goldGoldCount/initialGoldCount);

Echo(initialGoldCount,,,goldGoldCount,,,result);

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      525 , 345 , 0.6571428571
.   %/output




%mathpiper,title="Three door problem pp.83 chapter 6."

firstPickScore := {};
secondPickScore := {};


Repeat(1000)
[
    doors := Shuffle( {empty, prize, empty} );
    
    firstPick := doors[1];
    
    If(doors[2] = empty, secondPick := doors[3], secondPick := doors[2]);
    
    firstPickScore := Append(firstPickScore, firstPick);
    secondPickScore := Append(secondPickScore, secondPick);
];

Echo("First Pick: ", Count(firstPickScore,prize));
Echo("Second Pick: ", Count(secondPickScore,prize));


%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      First Pick: 247 
      Second Pick: 753
.   %/output




%mathpiper,title="Shuffle"

Shuffle( { empty, prize, empty});

%/mathpiper

    %output,preserve="false"
      Result: {empty,empty,prize}
.   %/output




%mathpiper,title="Two of a kind problem pp.85 chapter 6."

pairsCount := 0;

deck := Concat(1 .. 13, 1 .. 13, 1 .. 13, 1 .. 13);

trials := 100;

Repeat(trials)
[
    deck := Shuffle(deck);
    
    hand := Take(deck,5);
    
    //Echo(hand);
    
    handPairCount := 0;
    ForEach(card,1 .. 13)
    
    [
        If(Count(hand,card) = 2, handPairCount := handPairCount + 1);
    ];
    
    If(handPairCount = 1, pairsCount := pairsCount + 1);

];


Echo("Probability of a single pair: ", N(pairsCount/trials) );

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      Probability of a single pair: 0.44
.   %/output




%mathpiper,title="Two pairs vs. three of a kind problem pp.90 chapter 6."

pairsCount := 0;
threeOfAKindCount := 0;

deck := Concat(1 .. 13, 1 .. 13, 1 .. 13, 1 .. 13);

trials := 1000;

Repeat(trials)
[

    deck := Shuffle(deck);

    hand := Take(deck,5);
    
    //Echo(hand);
    
    handPairCount := 0;
    handThreeOfAKindCount := 0;
    ForEach(card,1 .. 13)
    
    [
        If(Count(hand,card) = 2, handPairCount := handPairCount + 1);
        If(Count(hand,card) = 3, handThreeOfAKindCount := handThreeOfAKindCount + 1);
    ];
    
    If(handPairCount = 2, pairsCount := pairsCount + 1);
    If(handThreeOfAKindCount = 1, threeOfAKindCount := threeOfAKindCount + 1);

];

Echo("Probability of two pairs: ", N(pairsCount/trials) );
Echo("Probability of three of a kind: ", N(threeOfAKindCount/trials) );

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      Probability of two pairs: 0.038 
      Probability of three of a kind: 0.019
.   %/output




%mathpiper,title="Birthday match from page 97 chapter 7."

birthdayMatchCounter := 0;
trials := 100;
Repeat(trials)
[
    birthdays := RandomIntegerVector(25,1,365);

    dayCounter := 1;
    While(dayCounter <= 365)
    [
        If(Count(birthdays,dayCounter) >= 2, [birthdayMatchCounter := birthdayMatchCounter + 1; dayCounter := 366;]);
        dayCounter := dayCounter + 1;
    ];

];
    
    
    Echo(birthdayMatchCounter,,,trials);

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      56 , 100
.   %/output






%mathpiper,title="RandomSymbol"

Retract("RandomSymbol",*);

//RuleBase("RandomSymbol",{list});


RandomSymbol(list) :=
[

    Local(element);
    
    fractions := 0;
    
    symbols := {};
    
    lastWeight := 0;
    
    
    ForEach(element,list)
    [
        //If(IsRational(element[2]),fraction := element[2], fraction := element[1]);
        
        fraction := element[2];

        fractions := fractions + fraction;
        
    ];
    
    If(fractions != 1, 
        [
            Echo("Error: The fractions must sum to 1."); False;
        ],
        [
            ForEach(element,list)
            [
                //If(IsRational(element[2]),[fraction := element[2];symbol := element[1];], [fraction := element[1];symbol := element[2];]);
                fraction := element[2];
                symbol := element[1];
                symbols := Append(symbols, {symbol, {lastWeight, lastWeight := lastWeight + N(fraction)}} );
            ];
             
            randomNumber := Random();
            
            ForEach(symbolData,symbols)
            [
            //Echo(symbol[2][1],randomNumber);
                If(randomNumber >= symbolData[2][1] And randomNumber <= symbolData[2][2], result := symbolData[1] );
            ];
            
            result;
        ]
        
    );
        

];



RandomSymbol({girl*1/2, boy*1/2});

lst := Table(RandomSymbol({ {girl,52/100}, {boy,48/100} }),x,0,100,1) ;


Echo(Count(lst,girl),,,Count(lst,boy));

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      Error: The fractions must sum to 1.
      52 , 49
.   %/output





%mathpiper,title="RamdomSymbolVector"
RandomSymbolVector(list, count) :=
[
    If(IsList(list)= True, Table(RandomSymbol(list),x,1,count,1), False );
];



%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output




%mathpiper,title="Three daughters example pp.97 chapter 7."

trials := 100;

successes := 0;

Repeat(trials)
[
    sample := RandomSymbolVector( {{boy,1/2}, {girl,1/2} },4);
    //Echo(sample);
    
    If(Count(sample,girl) = 3, successes := successes + 1);
    
];

Echo(successes,,,trials);
%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      24 , 100
.   %/output



%mathpiper,title="5 shot basketball example pp.102 chapter 7."

trials := 100;

successes := 0;

Repeat(trials)
[
    //sample := Table(RandomSymbol({{hit,1/4}, {miss,3/4} }),x,1,5,1);
    sample := RandomSymbolVector({{hit,1/4}, {miss,3/4}},5);
    //Echo(sample);
    
    If(Count(sample,hit) >= 3, successes := successes + 1);
    
];

Echo(successes,,,trials);
%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      6 , 100
.   %/output




%mathpiper,title="Archery example pp.104 chapter 7."

trials := 100;

successes := 0;

Repeat(trials)
[
    //sample := Table(RandomSymbol({ {black,10/100}, {white,60/100}, {miss,30/100} }),x,1,3,1);
    sample := RandomSymbolVector({{black,10/100}, {white,60/100}, {miss,30/100}},3);
    //Echo(sample);
    
    If(Count(sample,black)= 1 And Count(sample,white) = 2, successes := successes + 1);
    
];

Echo(successes,,,trials);
%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      13 , 100
.   %/output





%mathpiper,title="Mean and Median"
Mean(list) :=
[
    N(Add(list)/Length(list));

];

Median(list) :=
[
    list2 := HeapSort(list,"<");
    length := Length(list);
    
    If(IsEven(length),
        [   
            //Even.
            result := N(( list2[Div(length,2)] + list2[Div(length,2)+1])/2);
        ],
        [
            //Odd.
            result :=  list2[Div(length,2)+1];
        ]
    );

];

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output




                 
%mathpiper,title="Mode"
Mode(list) :=
[
    
    Local(mostFrequent, highestFrequency, currentElementCount);
    
    highestFrequency := 0;
    
    noDuplicatesList := RemoveDuplicates(list);
    
    ForEach(element, noDuplicatesList)
    [
        If( (currentElementCount := Count(list, element)) > highestFrequency,[ mostFrequent := element; highestFrequency := currentElementCount;] );
    ];
    
    mostFrequent;

];


Mode({3,4,5,4,3,2,3,4,5,6,7,8,5,6,5,4,5,6,7,3,3,3});
%/mathpiper

    %output,preserve="false"
      Result: 3
.   %/output




%mathpiper,title="Quartile"

Retract("Quartile",*);

Quartile(list) :=
[
    sortedList := HeapSort(list,"<");
    
    secondQuartile := Median(sortedList);
    
    If(IsOdd(sortedList),
    [   
        Echo(1);
        /*secondQuartileIndex := Find(sortedList, secondQuartile);
        
        leftList := Take(sortedList, secondQuartileIndex-1);
        rightList := Take(sortedList, -(Length(sortedList) - (secondQuartileIndex) ) );*/
    ],
    [
        Echo(2);
        /*leftList := Take(sortedList, Length(sortedList)/2);
        rightList := Take(sortedList, -Length(sortedList)/2);*/
    ]
    );
    
    //firstQuartile := Median(leftList);
    
    //thirdQuartile := Median(rightList);
    
    {firstQuartile, secondQuartile, thirdQuartile};

];


Quartile({6, 47, 49, 15, 42, 41, 7, 39, 43, 40, 36});
%/mathpiper

    %output,preserve="false"
      Result: {firstQuartile,40,thirdQuartile}
      
      Side Effects:
      2
.   %/output



%mathpiper,title="Sum of hammers and handle lengths pp. 108"

sample := {};
trials := 100;
Repeat(trials)
[
    handleLength := RandomSymbol({{10.0,20/100},{10.1,30/100},{10.2,30/100},{10.3,20/100}});
    headLength := RandomSymbol({{2.0,20/100},{2.1,20/100},{2.2,30/100},{2.3,20/100},{2.4,10/100}});
    
    totalLength := handleLength + headLength;
    
    sample := Append(sample, totalLength);
    
];


givenLength := 12.4;
overOrEqual := 0;
ForEach(element, sample)
[
    If(element >= givenLength, overOrEqual := overOrEqual + 1);

];

mean := Mean(sample);

Echo(overOrEqual,,,trials,,,mean);

%/mathpiper

    %error,preserve="false"
      Result: Expecting a ] close bracket for program block, but got ; instead. Error near line 662
.   %/error


