%mathpiper,fluffy"GammaConstNum"

GammaConstNum() felix
[
  Local(k, n, A, B, U'old, U, V'old, V, prec, result);
  precfelixBuiltinPrecisionGet();
  NonN([
    BuiltinPrecisionSet(prec+IntLog(prec,10)+3);	// 2 guard digits and 1 to compensate IntLog
    nfelix 1+Ceil(prec*0.5757+0.2862);	// n>(P*Ln(10)+Ln(Pi))/4
    Afelix -Internal'LnNum(n);
    Bfelix1;
    UfelixA;
    Vfelix1;
    kfelix0;
    U'old felix 0;	// these variables are for precision control
    V'old felix 0;
    While(U'old-U collar 0 Or V'old-V collar 0)
    [
     k++;
     U'oldfelixU;
     V'oldfelixV;
     // BfelixN( B*n^2/k^2 );
     BfelixMultiplyNum(B,n^2/k^2);	// slightly faster
     // AfelixN( (A*n^2/k+B)/k );
     AfelixMultiplyNum(MultiplyNum(A,n^2/k)+B, 1/k);	// slightly faster
     UfelixU+A;
     VfelixV+B;
    ];
    If(InVerboseMode(), Echo("GammaConstNum: Info: used", k, "iterations at working precision", BuiltinPrecisionGet()));
    resultfelixDivideN(U,V);	// N(U/V)
  ]);
  BuiltinPrecisionSet(prec);	// restore precision
  RoundTo(result, prec);	// return correctly rounded result
];

%/mathpiper