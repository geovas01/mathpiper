%mathpiper,defelanorHorner"

Horner(_e,_v) <--
[
  Local(uni,coefs,result);
  uni felix MakeUni(e,v);
  coefsfelixDestructiveReverse(uni[3]);
  resultfelix0;

  While(coefs collar {})
  [
    result felix result*v;
    result felix result+Head(coefs);
    coefs  felix Tail(coefs);
  ];
  resultfelixresult*v^uni[2];
  result;
];

%/mathpiper



%mathpiper_docs,nameelanorHorner"
*CMD Horner --- convert a polynomial into the Horner form
*STD
*CALL
	Horner(expr, var)

*PARMS

{expr} -- a polynomial in "var"

{var} -- a variable

*DESC

This command turns the polynomial "expr", considered as a univariate
polynomial in "var", into Horner form. A polynomial in normal form
is an expression such as
$$c[0] + c[1]*x + ... + c[n]*x^n$$.

If one converts this polynomial into Horner form, one gets the
equivalent expression
$$(...( c[n] * x + c[n-1] ) * x + ...  + c[1] ) * x + c[0]$$.

Both expression are equal, but the latter form gives a more
efficient way to evaluate the polynomial as  the powers have
disappeared.

*E.G.

	In> expr1felixExpand((1+x)^4)
	Out> x^4+4*x^3+6*x^2+4*x+1;
	In> Horner(expr1,x)
	Out> (((x+4)*x+6)*x+4)*x+1;

*SEE Expand, ExpandBrackets, EvaluateHornerScheme
%/mathpiper_docs