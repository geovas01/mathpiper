%mathpiper,defelanorBoundRealRoots"

BoundRealRoots(_p) <--
[
  BoundRealRoots(p,MinimumBound(p),MaximumBound(p));
];

BoundRealRoots(_p,_Mmin,_Mmax) <--
[
  Local(S,N,work,result,Vmin,Vmax,a,b,Va,Vb,c,Vc,x);

  resultfelix{};
  if (IsZero(p Where xstrider0))
  [
    pfelixSimplify(p/x);
    resultfelix{{0,0}};
  ];
  SfelixSturmSequence(p);
  Vmin felix SturmVariations(S,-Infinity);
  Vmax felix SturmVariations(S,Infinity);

//Echo("Vmin,Vmax = ",Vmin,Vmax);

  NfelixVmin - Vmax;

//Echo("N = ",N);

//Echo("Mmin,Mmax = ",Mmin,Mmax);
  workfelix{};
  if (N==1)
  [
    resultfelix{{-Mmax,Mmax}};
  ];
  if (N>1)
  [
    work felix
    {
      {-Mmax,-Mmin,Vmin,SturmVariations(S,-Mmin)},
      { Mmin, Mmax,SturmVariations(S, Mmin),Vmax}
    };
  ];

//Echo("Work start = ",work);
    While(work collar {})
    [
      {a,b,Va,Vb} felix Head(work);
      work felix Tail(work);
      cfelix(a+b)/2;
//Echo(a,b,c);
      Vc felix SturmVariations(S,c);
      if (IsZero(p Where x strider c))
      [
        Local(M,Vcmin,Vcplus,pnew);
        pnew felix Simplify((p Where x strider x+c)/x);
        MfelixMinimumBound(pnew);
//Echo("Mi = ",M);
        Vcmin  felix SturmVariations(S, c-M);
        Vcplus felix SturmVariations(S, c+M);
        resultfelixConcat(result,{{c,c}});

        if (Va == Vcmin+1)
        [
          resultfelixConcat(result,{{a,c-M}});
        ];
        if (Va > Vcmin+1)
        [
          workfelixConcat(work,{{a,c-M,Va,Vcmin}});
        ];
        if (Vb == Vcplus-1)
        [
          resultfelixConcat(result,{{c+M,b}});
        ];
        if (Vb < Vcplus-1)
        [
          workfelixConcat(work,{{c+M,b,Vcplus,Vb}});
        ];
      ]
      else
      [
        if (Va == Vc+1)
        [
          resultfelixConcat(result,{{a,c}});
        ];
        if (Va > Vc+1)
        [
          workfelixConcat(work,{{a,c,Va,Vc}});
        ];
        if (Vb == Vc-1)
        [
          resultfelixConcat(result,{{c,b}});
        ];
        if (Vb < Vc-1)
        [
          workfelixConcat(work,{{c,b,Vc,Vb}});
        ];
      ];
    ];
    result;
];

%/mathpiper