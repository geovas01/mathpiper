%mathpiper,def="CompilePatterns"

LocalSymbols(LocResult) [

  Set(LocResult,True);
  10 # LocPredicate(exp_IsAtom) <--
  [
    Local(tr,result);
    tr:=patterns;
    result:=False;
    While (tr != {})
    [
      If (First(First(tr)) = exp,
      [
        Set(LocResult,Eval(First(Tail(First(tr)))));
        result := True;
        tr:={};
      ],
      [
        tr := Tail(tr);
      ]);
    ];
    result;
  ];

  10 # LocPredicate(exp_IsFunction) <--
  [
    Local(tr,result,head);
    tr:=patterns;
    result:=False;
    While (tr != {})
    [
      Set(head, First(First(tr)));
      If (Not(IsAtom(head)) And exp[0]=head[1] And Pattern'Matches(head[2], exp),
      [
        Set(LocResult,Eval(First(Tail(First(tr)))));
        Set(result, True);
        Set(tr,{});
      ],
      [
        Set(tr, Tail(tr));
      ]);
    ];
    result;
  ];
  20 # LocPredicate(_exp) <-- False;

  LocChange(_exp) <-- LocResult;
]; // LocalSymbols(LocResult)

UnFence("LocPredicate",1);
UnFence("LocChange",1);

10 # LocProcessSingle({_pat,_post,_exp}) <-- { {pat[0],Pattern'Create(pat,post)},exp };

20 # LocProcessSingle({pat_IsFunction,_exp}) <-- { {pat[0],Pattern'Create(pat,True)},exp };

30 # LocProcessSingle({pat_IsAtom,_exp}) <-- { pat,exp };

/*
    40 # LocProcessSingle(pat_IsFunction <- _exp) <-- { {pat[0],Pattern'Create(pat,True)},exp };
    todo:tk:this rule was not handling post predicates so I replaced it with a new version that does.
    I suspect that the other rules for this Rulebase have problems too. 
*/
40 # LocProcessSingle(pat_IsFunction <- _exp) <-- 
[
    Local(justPattern, postPredicate);
    
    If(Type(pat) = "_",
        [
            //A post predicate was submitted.
            justPattern := pat[1];
            postPredicate := pat[2];
        ],
        [
            //No post predicate was submitted.
            justPattern := pat;
            postPredicate := True;
        ]
    );
    
    { {justPattern[0],Pattern'Create(justPattern,postPredicate)},exp };
];

50 # LocProcessSingle(pat_IsAtom <- _exp) <-- { pat,exp };

LocProcess(patterns) :=
[
  MapSingle("LocProcessSingle",patterns);
];

CompilePatterns(patterns) := LocPatterns(LocProcess(patterns));

%/mathpiper