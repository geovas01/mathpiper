%mathpiper,def="HasFuncSome"

/// function name given as string.
10 # HasFuncSome(_expr, string_IsString, _look'list) <-- HasFuncSome(expr, Atom(string), look'list);
/// function given as atom.
// atom contains no functions
10 # HasFuncSome(expr_IsAtom, atom_IsAtom, _look'list) <-- False;
// a list contains the function List so we test it together with functions
// a function contains itself, or maybe an argument contains it

// first deal with functions that do not belong to the list: return top level function
15 # HasFuncSome(expr_IsFunction, atom_IsAtom, _look'list)_(Not Contains(look'list, Atom(Type(expr)))) <-- Equals(Head(Listify(expr)), atom);
// function belongs to the list - check its arguments
20 # HasFuncSome(expr_IsFunction, atom_IsAtom, _look'list) <-- Equals(Head(Listify(expr)), atom) Or ListHasFuncSome(Tail(Listify(expr)), atom, look'list);

%/mathpiper



%mathpiper_docs,name="HasFuncSome"
*CMD HasFunc --- check for expression containing a function
*CMD HasFuncArith --- check for expression containing a function
*CMD HasFuncSome --- check for expression containing a function
*STD
*CALL
	HasFunc(expr, func)
	HasFuncArith(expr, func)
	HasFuncSome(expr, func, list)

*PARMS

{expr} -- an expression

{func} -- a function atom to be found

{list} -- list of function atoms to be considered "transparent"

*DESC

The command {HasFunc} returns {True} if the expression {expr} contains a function {func}. The expression is recursively traversed.

The command {HasFuncSome} does the same, except it only looks at arguments of a given {list} of functions. Arguments of all other functions become "opaque" (as if they do not contain anything).

{HasFuncArith} is defined through {HasFuncSome} to look only at arithmetic operations {+}, {-}, {*}, {/}.

Note that since the operators "{+}" and "{-}" are prefix as well as infix operators, it is currently required to use {Atom("+")} to obtain the unevaluated atom "{+}".

*E.G.

	In> HasFunc(x+y*Cos(Ln(z)/z), Ln)
	Out> True;
	In> HasFunc(x+y*Cos(Ln(z)/z), Sin)
	Out> False;
	In> HasFuncArith(x+y*Cos(Ln(x)/x), Cos)
	Out> True;
	In> HasFuncArith(x+y*Cos(Ln(x)/x), Ln)
	Out> False;
	In> HasFuncSome({a+b*2,c/d},/,{List})
	Out> True;
	In> HasFuncSome({a+b*2,c/d},*,{List})
	Out> False;

*SEE FuncList, VarList, HasExpr
%/mathpiper_docs