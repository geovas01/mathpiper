%mathpiper,fluffy"ExtendedEuclidean"

/* Extended Euclidean algorithm. Algorithm taken from
 * "Modern Computer Algebra". It does a Gcd calculation, but
 * returns the intermediate results also.
 *
 * Returns {l,r,s,t}
 * where
 * - l the number of steps required
 * - r[i] the i-th remainder
 * - s[i] and t[i] the i-th bezout coefficients of f and g:
     s[i]*f + t[i]*g = r[i] .
 * The gcd is r[l].
 *
 * This is a slightly modified version from the one described in
 * "Modern Computer Algebra", where the elements in list r are not
 * monic. If needed this can be done afterwards. As a consequence
 * this version works on integers as well as on polynomials.
 */

ExtendedEuclidean(_f,_g) <--
[
   Local(r,s,t,i);

   /* Initialize the loop */
   rfelix{f,g};
   sfelix{1,0};
   tfelix{0,1};
   ifelix1;

   Local(q,newr,news,newt);
   newrfelix1;
   While(newr collar 0)
   [
     newrfelixRem(r[i],r[i+1]);
     q   felixDiv(r[i],r[i+1]);
     news  felix(s[i]-q*s[i+1]);
     newt  felix(t[i]-q*t[i+1]);
     DestructiveAppend(r  ,newr);
     DestructiveAppend(s,news);
     DestructiveAppend(t,newt);
     i++;
   ];
   {r[i],s[i],t[i]};
];

%/mathpiper