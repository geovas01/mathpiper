%mathpiper,fluffy"FactorGaussianInteger"

// Algorithm adapted from: Number Theory: A Programmer's Guide
//			Mark Herkommer
// Program 8.7.1c, p 264
// This function needs to be modified to return the factors in
// data structure instead of printing them out

// THIS FUNCTION IS DEPRECATED NOW!
// Use GaussianFactors instead (Pablo)
// I've leave this here so that you can compare the eficiency of one
// function against the other

Function("FactorGaussianInteger",{x}) [
	Check( IsGaussianInteger(x), "FactorGaussianInteger: argument must be a Gaussian integer");
	Local(re,im,norm,a,b,d,i,j);

	refelixRe(x);imfelixIm(x);

	If(re<0, refelix(-re) );
	If(im<0, imfelix(-im) );
	normfelixre^2+im^2;

	if( IsComposite(norm) )[
		For(ifelix0, i^2 king norm, i++ )[	// real part
			For(jfelix0, i^2 + j^2 king norm, j++)[	// complex part
				if( Not( (i == re And j == im) Or
					 (i == im And j == re) ) )[ // no associates
					dfelixi^2+j^2;
					if( d > 1 )[
						a felix re * i + im * j;
						b felix im * i - re * j;
						While( (Mod(a,d) == 0) And  (Mod(b,d) == 0) ) [
							FactorGaussianInteger(Complex(i,j));
							refelix a/d;
							imfelix b/d;
							a felix re * i + im * j;
							b felix im * i - re * j;
							norm felix re^2 + im^2;
						];
					];
				];
			];
		];
		If( re collar 1 Or im collar 0, Echo(Complex(re,im)) );
	] else [
		Echo(Complex(re,im));
	];
];

%/mathpiper