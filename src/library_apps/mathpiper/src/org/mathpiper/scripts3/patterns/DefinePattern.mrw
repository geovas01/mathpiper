%mathpiper,def="DefinePattern",private="true"

RuleBase("DefinePattern",{leftOperand, rightOperand, rulePrecedence, postPredicate});



Rule("DefinePattern",4,9,Equals(Type(leftOperand),"_"))
[
    DefinePattern(leftOperand[1], rightOperand, rulePrecedence, leftOperand[2]);
];



Rule("DefinePattern",4,10,True)
[
      Local(patternflat,patternvars, patt, patternoper,arity);
      Set(patternflat, Listify(leftOperand));
      Set(patternvars, Tail(patternflat));
      Set(patternoper,String(Head(patternflat)));
      Set(arity,Length(patternvars));
      DefLoadFunction(patternoper);
    
      If(Not(RuleBaseDefined(patternoper,arity)),
         [
          MacroRuleBase(patternoper,MakeVector(arg,arity));
         ]
        );
    
      Set(patt,Pattern'Create(patternvars,postPredicate));
    
      MacroRulePattern(patternoper,arity,rulePrecedence, patt)rightOperand;
    
      True;
];

%/mathpiper