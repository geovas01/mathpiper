%mathpiper,def="DefinePattern",private="true"

RuleBase("DefinePattern",{patternleft, patternright, patternprecedence, postpredicate});

Rule("DefinePattern",4,9,Equals(Type(patternleft),"_"))
[
    DefinePattern(patternleft[1], patternright, patternprecedence, patternleft[2]);
];

Rule("DefinePattern",4,10,True)
[
  Local(patternflat,patternvars, patt, patternoper,arity);
  Set(patternflat, Listify(patternleft));
  Set(patternvars, Tail(patternflat));
  Set(patternoper,String(Head(patternflat)));
  Set(arity,Length(patternvars));
  DefLoadFunction(patternoper);

  If(Not(RuleBaseDefined(patternoper,arity)),
     [
      MacroRuleBase(patternoper,MakeVector(arg,arity));
     ]
    );

  Set(patt,Pattern'Create(patternvars,postpredicate));

  MacroRulePattern(patternoper,arity,patternprecedence, patt)patternright;

  True;
];

%/mathpiper