%mathpiper,def=":"

/* Operators for functional programming. todo:tk:move some of this documentation into the proper function's .mrw files.
 * Examples:
 *  a:b:c:{}       ->  {a,b,c}
 *  "Sin" @ a      ->   Sin(a)
 *  "Sin" @ {a,b}  ->   Sin(a,b)
 *  "Sin" /@ {a,b} ->   {Sin(a),Sin(b)}
 *  1 .. 4         ->   {1,2,3,4}
 */


/* a : b will now return unevaluated (rather than cause error of invalid argument in Concat) if neither a nor b is a list and if one of them is not a string
*/
RuleBase(":",{head,tail});
Rule(":",2,20,IsList(head) And Not IsList(tail) ) Concat(head,{tail});
Rule(":",2,30,IsList(tail) ) Concat({head},tail);
Rule(":",2,10,IsString(tail) And IsString(head)) ConcatStrings(head,tail);
UnFence(":",2);

%/mathpiper



%mathpiper_docs,name=":"
*CMD : --- prepend item to list, or concatenate strings
*STD
*CALL
	item : list
	string1 : string2
Precedence:
*EVAL OpPrecedence(":")

*PARMS
{item} -- an item to be prepended to a list

{list} -- a list

{string1} -- a string

{string2} -- a string

*DESC

The first form prepends "item" as the first entry to the list
"list". The second form concatenates the strings "string1" and
"string2".

This operator can help the user to program in the style of functional programming languages such as Miranda or Haskell.

*E.G.

	In> a:b:c:{}
	Out> {a,b,c};
	In> "This":"Is":"A":"String"
	Out> "ThisIsAString";

*SEE Concat, ConcatStrings
%/mathpiper_docs
