%mathpiper,def="true"

FindRealRoots(_p) <--
[
//Echo("0...");
//Echo("0...");
  p:=SquareFree(Rationalize(p));
//Echo("1...");
//Echo("2...",MinimumBound(p));
//Echo("3...",MaximumBound(p));
  FindRealRoots(p,MinimumBound(p),MaximumBound(p));
];

FindRealRoots(_p,_Mmin,_Mmax) <--
[
  Local(bounds,result,i,prec,requiredPrec);
//Echo("bounds1");
  bounds := BoundRealRoots(p,Mmin,Mmax);
//Echo("bounds2");
  result:=FillList(0,Length(bounds));
  requiredPrec := BuiltinPrecisionGet();
  BuiltinPrecisionSet(BuiltinPrecisionGet()+2);
  prec:=10^-(requiredPrec+1);

  For(i:=1,i<=Length(bounds),i++)
  [
    Local(a,b,c,r);
    {a,b} := bounds[i];
    c:=N(Eval((a+b)/2));
//Echo(a,b,c);
    r := Fail;
//Echo("newton1",`Hold(Newton(@p,x,@c,@prec,@a,@b)));
    if (a != b) [r := `Newton(@p,x,@c,prec,a,b);];
//Echo("newton2",r," ",CurrentFile(),CurrentLine());
    if (r = Fail)
    [
      Local(c,cold,pa,pb,pc);
      pa:=(p Where x==a);
      pb:=(p Where x==b);
      c:=((a+b)/2);
      cold := a;
      While (Abs(cold-c)>prec)
      [
        pc:=(p Where x==c);
//Echo(a,b,c);
        if (Abs(pc) < prec)
        [
          a:=c;
          b:=c;
        ]
        else if (pa*pc < 0)
        [
          b:=c;
          pb:=pc;
        ]
        else
        [
          a:=c;
          pa:=pc;
        ];
        cold:=c;
        c:=((a+b)/2);
      ];
      r:=c;
    ];
    result[i] := N(Eval((r/10)*(10)),requiredPrec);
  ];
  BuiltinPrecisionSet(requiredPrec);
  result;
];

%/mathpiper