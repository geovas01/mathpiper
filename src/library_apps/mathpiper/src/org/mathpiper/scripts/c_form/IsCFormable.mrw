%mathpiper,def="true"

//////////////////////////////////////////////////
/// IsCFormable
//////////////////////////////////////////////////

LocalSymbols(CFormAllFunctions) [

  /// predicate to test whether an expression can be successfully exported to C code

  /// interface with empty extra function list
  // need the backquote stuff b/c we have HoldArg now
  IsCFormable(_expr) <-- `IsCFormable(@expr, {});

  // need to check that expr contains only allowed functions
  IsCFormable(_expr, funclist_IsList) <--
  [
    Local(bad'functions);
    bad'functions := Difference(`FuncList(@expr), Concat(CFormAllFunctions, funclist));
    If(Length(bad'functions)=0,
      True,
      [
        If(InVerboseMode(),
          Echo(Concat({"IsCFormable: Info: unexportable function(s): "}, bad'functions))
        );
        False;
      ]
    );
  ];
  HoldArgNr("IsCFormable", 1, 1);
  HoldArgNr("IsCFormable", 2, 1);

  /// This is a list of all function atoms which CForm can safely handle
  CFormAllFunctions := MapSingle(Atom, Concat(AssocIndices(CFormMathFunctions()), AssocIndices(CFormRegularOps()),
  // list of "other" (non-math) functions supported by CForm: needs to be updated when CForm is extended to handle new functions
  {
    "For",
    "While",
    "Prog",
    "Nth",
    "Mod",
    "Complex",
    "if",
    "else",
    "++",
    "--",
  }
  ));


]; // LocalSymbols(CFormAllFunctions)

%/mathpiper