%mathpiper,def="true"

/* NFunction("new'func", "old'func" {arg'list}) will define a wrapper function
around  "old'func", called "new'func", which will return "old'func(arg'list)"
only when all arguments are numbers and will return unevaluated
"new'func(arg'list)" otherwise. */
LocalSymbols(NFunction'Numberize)
[
NFunction(new'name_IsString, old'name_IsString, arg'list_IsList) <-- [
	MacroRuleBase(new'name, arg'list);
	MacroRule(new'name, Length(arg'list), 0,	// check whether all args are numeric
		UnList({IsNumericList, arg'list})
	)

		/* this is the rule defined for the new function.
		// this expression should evaluate to the body of the rule.
		// the body looks like this:
		// NFunction'Numberize(old'name(arg'list))
		*/
			NFunction'Numberize(UnList({Atom("@"), old'name, arg'list}));
			// cannot use bare '@' b/c get a syntax error

];

// this function is local to NFunction.
// special handling for numerical errors: return Undefined unless given a number.
10 # NFunction'Numberize(x_IsNumber) <-- x;
20 # NFunction'Numberize(x_IsAtom) <-- Undefined;
// do nothing unless given an atom

];	// LocalSymbols()


%/mathpiper