/* {{{ License.
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */ //}}}

// :indentSize=4:lineSeparator=\n:noTabs=false:tabSize=4:folding=explicit:collapseFolds=0:
package org.mathpiper.test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author tkosan
 */
public class Build {

    private java.io.File scriptsDir;
    private java.io.FileWriter packagesFile;
    private String sourceScriptsDirectory = null;
    private String outputScriptsDirectory = null;
    private String outputDocsDirectory = null;
    private java.io.FileWriter documentationFile;
    private java.io.FileWriter documentationIndexFile;
    private long documentationOffset = 0;
    private java.io.FileWriter functionCategoriesFile;

    public Build() {
    }//end constructor.

    public Build(String sourceScriptsDirectory, String outputScriptsDirectory) {
        this.sourceScriptsDirectory = sourceScriptsDirectory;
        this.outputScriptsDirectory = outputScriptsDirectory;
    }//end constructor.

    public Build(String sourceScriptsDirectory, String outputScriptsDirectory, String outputDocsDirectory) {
        this(sourceScriptsDirectory, outputScriptsDirectory);

        this.outputDocsDirectory = outputDocsDirectory;
        try {

            documentationFile = new java.io.FileWriter(outputDocsDirectory + "documentation.txt");
            documentationIndexFile = new java.io.FileWriter(outputDocsDirectory + "documentation_index.txt");
            functionCategoriesFile = new java.io.FileWriter(outputDocsDirectory + "function_categories.txt");

        } catch (java.io.IOException e) {
            e.printStackTrace();
        }

    }

    public void setSourceScriptsDirectory(String scriptsDirectory) {
        this.sourceScriptsDirectory = scriptsDirectory;
    }//end method.

    public void setOutputScriptsDirectory(String outputDirectory) {
        this.outputScriptsDirectory = outputDirectory;
    }//end method.

    public void compileScripts() {

        StringBuilder mainScriptsClassBuffer = new StringBuilder();


        mainScriptsClassBuffer.append("static{\n");


        try {
            //System.out.println("XXXXX " + outputDirectory);
            packagesFile = new java.io.FileWriter(outputScriptsDirectory + "initialization.rep/packages.mpi");
            packagesFile.write("//// This file is generated by a script.\n/// It lists all {.def} files in the library.\nDefun(DefFileList,{}) {\n");


            scriptsDir = new java.io.File(sourceScriptsDirectory);

            if (scriptsDir.exists()) {
                java.io.File[] packagesDirectory = scriptsDir.listFiles(new java.io.FilenameFilter() {

                    public boolean accept(java.io.File file, String name) {
                        if (name.endsWith(".rep") || name.startsWith(".")) {
                            return (false);
                        } else {
                            return (true);
                        }
                    }
                });

                Arrays.sort(packagesDirectory);



                String output;
                for (int x = 0; x < packagesDirectory.length; x++) {
                    //Process each package directory.************************************************************************
                    File packageDirectoryFile = packagesDirectory[x];
                    String packageDirectoryFileName = packageDirectoryFile.getName();
                    System.out.println(packageDirectoryFileName);

                    //Create package directory
                    String dirNameRep = packageDirectoryFileName;
                    String newPackageName = dirNameRep + ".rep";
                    String newPackagePath = outputScriptsDirectory + newPackageName;
                    File newPackageFile = new File(newPackagePath);
                    Boolean directoryCreated = newPackageFile.mkdir();

                    //mpi file.
                    BufferedWriter mpiFileOut = null;
                    File newMPIFile = new File(newPackagePath + "/" + "code.mpi");
                    newMPIFile.createNewFile();
                    mpiFileOut = new BufferedWriter(new FileWriter(newMPIFile));

                    packagesFile.write("\"org/mathpiper/scripts/" + newPackageName + "/code.mpi\",\n");

                    //mpi.def file
                    BufferedWriter mpiDefFileOut = null;
                    File newMPIDefFile = new File(newPackagePath + "/" + "code.mpi.def");
                    newMPIDefFile.createNewFile();
                    mpiDefFileOut = new BufferedWriter(new FileWriter(newMPIDefFile));


                    //Place files in package dir
                    if (packageDirectoryFile.exists()) {
                        java.io.File[] packageDirectoryContentsArray = packageDirectoryFile.listFiles(new java.io.FilenameFilter() {

                            public boolean accept(java.io.File file, String name) {
                                if (name.startsWith(".")) {
                                    return (false);
                                } else {
                                    return (true);
                                }
                            }
                        });

                        Arrays.sort(packageDirectoryContentsArray);


                        // }//note:tk:remove.
                        String classNameUpper = null;

                        for (int x2 = 0; x2 < packageDirectoryContentsArray.length; x2++) {
                            //Process each script or subdirectory in a .rep directory.***********************************************************************************
                            File scriptFileOrSubdirectoy = packageDirectoryContentsArray[x2];
                            System.out.println("    " + scriptFileOrSubdirectoy.getName());

                            if (scriptFileOrSubdirectoy.getName().endsWith(".mrw")) {
                                //Process a .mrw files that is in a top-level package. ************************************************************************

                                processMRWFile(scriptFileOrSubdirectoy, mpiDefFileOut, mpiFileOut);

                            } else {
                                //Process a subdirectory.***********************************************************************************************
                                java.io.File[] packageSubDirectoryContentsArray = scriptFileOrSubdirectoy.listFiles(new java.io.FilenameFilter() {

                                    public boolean accept(java.io.File file, String name) {
                                        if (name.startsWith(".")) {
                                            return (false);
                                        } else {
                                            return (true);
                                        }
                                    }
                                });

                                Arrays.sort(packageSubDirectoryContentsArray);

                                BufferedWriter mpiSubDirectoyFileOut = null;
                                File newMPISubDirectoyFile = new File(newPackagePath + "/" + scriptFileOrSubdirectoy.getName() + ".mpi");
                                newMPISubDirectoyFile.createNewFile();
                                mpiSubDirectoyFileOut = new BufferedWriter(new FileWriter(newMPISubDirectoyFile));

                                packagesFile.write("\"org/mathpiper/scripts/" + newPackageName + "/" + scriptFileOrSubdirectoy.getName() + ".mpi" + "\",\n");

                                //mpi.def file
                                BufferedWriter mpiSubDirectoyDefFileOut = null;
                                File newMPISubDirectoyDefFile = new File(newPackagePath + "/" + scriptFileOrSubdirectoy.getName() + ".mpi.def");
                                newMPISubDirectoyDefFile.createNewFile();
                                mpiSubDirectoyDefFileOut = new BufferedWriter(new FileWriter(newMPISubDirectoyDefFile));

                                for (int x3 = 0; x3 < packageSubDirectoryContentsArray.length; x3++) {
                                    //Process each script in a package subdirectlry directory.
                                    File scriptFile2 = packageSubDirectoryContentsArray[x3];
                                    System.out.println("        " + scriptFile2.getName());

                                    processMRWFile(scriptFile2, mpiSubDirectoyDefFileOut, mpiSubDirectoyFileOut);

                                //mpi file.


                                }//end subpackage for.

                                if (mpiSubDirectoyFileOut != null) {
                                    mpiSubDirectoyFileOut.close();
                                    mpiSubDirectoyDefFileOut.write("}\n\n");
                                    mpiSubDirectoyDefFileOut.close();
                                }

                            }//end else.

                        }//end package for.




                    }//end if. 

                    if (mpiFileOut != null) {
                        mpiFileOut.close();
                        mpiDefFileOut.write("}\n");
                        mpiDefFileOut.close();
                    }

                }//end for.



            } else {
                System.out.println("\nDirectory " + sourceScriptsDirectory + "does not exist.\n");
            }

            packagesFile.write("\n};\n");
            packagesFile.close();

            if (documentationFile != null) {
                documentationFile.close();
                documentationIndexFile.close();
                functionCategoriesFile.close();
            }


        } catch (java.io.IOException e) {
            e.printStackTrace();
        }

    }//end method.

    List scanMRWFile(File mrwFile) {
        List<Fold> folds = new ArrayList();
        StringBuilder foldContents = new StringBuilder();
        String foldHeader = "";
        boolean inFold = false;

        try {
            FileInputStream fstream = new FileInputStream(mrwFile);
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line;
            //Read File Line By Line
            while ((line = br.readLine()) != null) {

                //System.out.println(line);

                if (line.startsWith("%/")) {
                    Fold fold = new Fold(foldHeader, foldContents.toString());
                    foldContents.delete(0, foldContents.length());
                    folds.add(fold);
                    inFold = false;

                } else if (line.startsWith("%")) {
                    foldHeader = line;
                    inFold = true;
                } else if (inFold == true) {
                    foldContents.append(line);
                    foldContents.append("\n");

                }
            }//end while.


            //Close the input stream
            in.close();

        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
        return folds;

    }//end.

    class Fold {

        private String type;
        private String contents;
        private Map<String, String> attributes = new HashMap();

        public Fold(String header, String contents) {
            scanHeader(header);

            this.contents = contents;
        }//end inner class.

        private void scanHeader(String header) {
            String[] headerParts = header.trim().split(",");

            type = headerParts[0];

            for (int x = 1; x < headerParts.length; x++) {
                headerParts[x] = headerParts[x].replaceFirst("=", ",");
                String[] headerPart = headerParts[x].split(",");
                String attributeName = headerPart[0];
                String attributeValue = headerPart[1].replace("\"", "");
                attributes.put(attributeName, attributeValue);
            }

        }//end method.

        public Map getAttributes() {
            return attributes;
        }

        public String getContents() {
            return contents;
        }

        public String getType() {
            return type;
        }
    }//end inner class.

    private void processMRWFile(File mrwFile, Writer mpiDefFileOut, Writer mpiFileOut) throws IOException {
        List<Fold> folds = scanMRWFile(mrwFile);

        for (Fold fold : folds) {

            String foldType = fold.getType();
            if (foldType.equalsIgnoreCase("%mathpiper")) {

                String scopeAttribute = "";
                if (fold.getAttributes().containsKey("scope")) {
                    scopeAttribute = (String) fold.getAttributes().get("scope");
                }

                if (!scopeAttribute.equalsIgnoreCase("nobuild")) {

                    mpiFileOut.write(fold.getContents());

                    if (fold.getAttributes().containsKey("def")) {
                        String defAttribute = (String) fold.getAttributes().get("def");
                        if (!defAttribute.equalsIgnoreCase("")) {

                            String[] defFunctionNames = defAttribute.split(";");

                            for (int x = 0; x < defFunctionNames.length; x++) {
                                mpiDefFileOut.write(defFunctionNames[x]);
                                mpiDefFileOut.write("\n");
                            }//end if.
                        }//end if.
                    }//end if.
                }//end if.

            } else if (foldType.equalsIgnoreCase("%mathpiper_docs")) {
                System.out.println("        **** Contains docs *****");
                if (documentationFile != null) {

                    String functionNamesString = "";
                    if (fold.getAttributes().containsKey("name")) {
                        functionNamesString = (String) fold.getAttributes().get("name");

                        String[] functionNames = functionNamesString.split(";");

                        for (String functionName : functionNames) {

                            documentationIndexFile.write(functionName + ",");
                            documentationIndexFile.write(documentationOffset + ",");

                            String contents = fold.getContents();
                            documentationFile.write(contents);
                            documentationOffset += contents.length();
                            documentationIndexFile.write(documentationOffset + "\n");

                            documentationFile.write("\n==========\n");


                            if (fold.getAttributes().containsKey("categories")) {
                                functionCategoriesFile.write(functionName + ",");
                                int commandIndex = contents.indexOf("*CMD");
                                String descriptionLine = contents.substring(commandIndex,contents.indexOf("\n", commandIndex));
                                String description = descriptionLine.substring(descriptionLine.lastIndexOf("--")+2);
                                description = description.trim();
                                 functionCategoriesFile.write(description + ",");
                                String functionCategories = (String) fold.getAttributes().get("categories");
                                String[] categoryNames = functionCategories.split(";");
                                String categories = "";
                                for (String categoryName : categoryNames) {
                                    categories = categories + categoryName + ",";
                                }//end for.
                                categories = categories.substring(0, categories.length() - 1);
                                functionCategoriesFile.write(categories);
                                functionCategoriesFile.write("\n");
                            }//end if.
                        }//end for.
                    }//end if.




                }//end if.

            }//end if.


        }//end subpackage for.
    }//end method.

    public void execute() {
        System.out.println("****************** Compiling scripts *******");
        System.out.println("Source directory: " + this.sourceScriptsDirectory);
        System.out.println("Destination directory: " + this.outputScriptsDirectory);
        compileScripts();
    }//end method.

    public static void main(String[] args) {

        String sourceScriptsDirectory;

        if (args.length > 0) {
            sourceScriptsDirectory = args[0];
        } else {
            sourceScriptsDirectory = "/home/tkosan/NetBeansProjects/mathpiper/src/org/mathpiper/scripts3/";
        }

        String outputScriptsDirectory = "/home/tkosan/NetBeansProjects/scripts/";
        File newScriptsDirectory = new File(outputScriptsDirectory);
        Boolean directoryCreated = newScriptsDirectory.mkdir();


        File newInitializationDirectory = new File(outputScriptsDirectory + "initialization.rep/");
        newInitializationDirectory.mkdir();

        File outputDocsDirectory = new File(outputScriptsDirectory + "documentation/");
        outputDocsDirectory.mkdir();


        //String outputDirectory = "/home/tkosan/temp/mathpiper/org/mathpiper/scripts/";

        Build scripts = new Build(sourceScriptsDirectory, outputScriptsDirectory, outputDocsDirectory.getPath() + "/");
        scripts.compileScripts();

        Map functionDocs = new HashMap();
        try {
            BufferedReader documentationIndex = new BufferedReader(new FileReader(outputDocsDirectory.getPath() + "/documentation_index.txt"));

            String line;
            while ((line = documentationIndex.readLine()) != null) {

                String[] values = line.split(",");

                if (values[0].indexOf(";") != -1) {
                    String[] functionNames = values[0].split(";");
                    for (String name : functionNames) {
                        functionDocs.put(name, values[1] + "," + values[2]);
                    }//end for.
                } else {
                    functionDocs.put(values[0], values[1] + "," + values[2]);
                }//end else.
            }//end while.

            documentationIndex.close();

        } catch (java.io.IOException e) {
            e.printStackTrace();
        }


    }//end main
}//end class.
