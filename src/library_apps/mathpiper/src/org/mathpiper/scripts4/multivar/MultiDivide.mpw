%mathpiper,def="MultiDivide"

/*************************************************************
  MultiDivide :
  input
    f - a multivariate polynomial
    g[1 .. n] - a list of polynomials to divide by
  output
    {q[1 .. n],r} such that f = q[1]*g[1] + ... + q[n]*g[n] + r

  Basically quotient and remainder after division by a group of
  polynomials.
**************************************************************/
20 # MultiDivide(_f,g_IsList) <--
[
  Local(i,v,q,r,nr);
  v:=MultiExpressionList(f+Sum(g));
  f:=MakeMultiNomial(f,v);
  nr := Length(g);
  For(i:=1,i<=nr,i++)
  [
    g[i] := MakeMultiNomial(g[i],v);
  ];
  {q,r}:=MultiDivide(f,g);
  q:=MapSingle("NormalForm",q);
  r:=NormalForm(r);
  {q,r};
];

10 # MultiDivide(f_IsMulti,g_IsList) <--
[
  Local(i,nr,q,r,p,v,finished);
  Bind(nr, Length(g));
  Bind(v, MultiVars(f));
  Bind(q, FillList(0,nr));
  Bind(r, 0);
  Bind(p, f);
  Bind(finished,MultiZero(p));
  Local(plt,glt);
  While (Not finished)
  [
    Bind(plt, MultiLT(p));
    For(i:=1,i<=nr,i++)
    [
      Bind(glt, MultiLT(g[i]));

      if (MultiLM(glt) = MultiLM(plt) Or MultiTermLess({MultiLM(glt),1}, {MultiLM(plt),1}))
      if (Select(MultiLM(plt)-MultiLM(glt)) = {}, {{n},n<0})
      [
        Local(ff);
      Bind(ff, CreateTerm(v,{MultiLM(plt)-MultiLM(glt),MultiLC(plt)/MultiLC(glt)}));
        q[i] := q[i] + ff;
        Local(ltbefore,ltafter);
        Bind(ltbefore,MultiLeadingTerm(p));
//        Echo(ltbefore,MultiLeadingTerm(p));
        Bind(p, p - ff*g[i]);
        Bind(ltafter,MultiLeadingTerm(p));
//        Echo(ltbefore,MultiLeadingTerm(p));
        if (ltbefore[1] = ltafter[1])
        [
          Bind(ltafter,MultiLT(p));
          Bind(p,p-ltafter);
        ];
//        Echo(ltbefore,MultiLeadingTerm(p));
        Bind(i,nr+2);
      ];
    ];

    If (i = nr+1,
    [
      Bind(r, r + LocalSymbols(a,b)(Subst(a,b)plt));
      Bind(p,  p - LocalSymbols(a,b)(Subst(a,b)plt));
    ]);
//Echo(p);
    Bind(finished,MultiZero(p));
  ];
  {q,r};
];

%/mathpiper