%mathpiper,def="Select",scope="public"

LocalSymbols(predicate,list,result,item)
[
  Function("Select",{predicate,list})
  [
    Local(result);
    result:={};
    ForEach(item,list)
    [
      If(Apply(predicate,{item}),DestructiveAppend(result,item));
    ];
    result;
  ];
  HoldArgument("Select",predicate);
  UnFence("Select",2);
];

%/mathpiper



%mathpiper_docs,name="Select",categories="User Functions;Lists (Operations)"
*CMD Select --- select entries satisfying some predicate
*STD
*CALL
	Select(pred, list)

*PARMS

{pred} -- a predicate

{list} -- a list of elements to select from

*DESC

{Select} returns a sublist of "list" which contains all
the entries for which the predicate "pred" returns
{True} when applied to this entry.

The {Lambda} function can be used in place of a predicate function
if desired.

*E.G.

In> Select("IsInteger",{a,b,2,c,3,d,4,e,f})
Out> {2,3,4};


/%mathpiper

list := {1,-3,2,-6,-4,3};

Select(Lambda({i}, i > 0 ),list);

/%/mathpiper

    /%output,preserve="false"
      Result: {1,2,3}
.   /%/output

*SEE Length, Find, Count, Lambda
%/mathpiper_docs