%mathpiper,def="TestEquivalent"

Retract("TestEquivalent",*);

Macro("TestEquivalent",{left,right})
[
    Local(leftEval,rightEval,diff,vars,isEquiv);
    If(InVerboseMode(),[Tell(TestEquivalent,{left,right});]);
    leftEval  := @left;
    rightEval := @right;
    If(InVerboseMode(),
      [ NewLine(); Tell("    ",leftEval); Tell("   ",rightEval); ]);
    If( IsList(leftEval),
      [
          If( IsList(rightEval),
            [
                // both are lists, so check equality as SETS
                If(InVerboseMode(),Tell("     both are sets "));
                isEquiv := EqualAsSets(leftEval,rightEval);
            ],
            isEquiv := False
          );
      ],
      [
          If( IsList(rightEval), 
            isEquiv := False,
            [
                // neither is a list, so check equality of diff
                diff      := Simplify(leftEval - rightEval);
                vars      := VarList(diff);
                If(InVerboseMode(),
                  [
                     Tell("    ",{leftEval,rightEval});
                     Tell("    ",vars);
                     Tell("    ",diff);
                  ]
                );
                isEquiv   := ( IsZero(diff) Or IsZeroVector(diff) );
            ]
          );
      ]
    );
    If(InVerboseMode(),Tell("     Equivalence = ",isEquiv));
    If ( Not isEquiv,
      [
		  WriteString("******************");          NewLine();
		  WriteString("L.H.S. evaluates to: ");
		  Write(leftEval);                            NewLine();
		  WriteString("which differs from   ");
		  Write(rightEval);                           NewLine();
		  WriteString(" by                  "); 
		  Write(diff);                                NewLine();
		  WriteString("******************");          NewLine();
      ]
    );
    isEquiv;
];

%/mathpiper


