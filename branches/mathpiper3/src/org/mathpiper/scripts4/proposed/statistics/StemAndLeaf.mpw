%mathpiper
//Obtained from http://math.uc.edu/~pelikan/probandstat/stem.htm


trunc(x):= [

  If(x <? 0, s := -1, s := 1);
s* Floor(Abs(x));
];




intlabels(y1,y2,tnumint) := [
    diff :=y2-y1;
    x := intervals(diff,tnumint);
    bot := trunc(y1/x)*x;
  yy = bot;
  L = [];
  //i = 0;
  xx = 0;
  breakLoop := False;
  While (yy-x <? y2 Or? breakLoop = True) [
      L := Append(L, yy);
    yy := yy + x;
    //i++;
    xx++;
    If (xx >? 100, breakLoop := True);
  ];
  L[i] = yy;
        L;
];




intervals(diff, NumCats) := [
    t4 := trunc(N(Ln(diff))) * 0.4342945;
  t4 = Power(10,t4);
  T := [];
  T := N(t4/10 : t4/5 : t4/2 : t4 : T);

  
  A := [];
  
  For (i := 0,i <? 4, i++) [
      A := Append(A,trunc(diff/T[i]) +1);
  ];
  
  D := AbsN(10 - A[0]);
  
  index := 1;
  For (i := 1, i <? 4, i++) 
  [
    if (A[i] <=? 25) [
      if (A[i] >? 2) [
      XX := AbsN(NumCats - A[i]);
        if (XX <? D) [
        D := XX;
          index = i+1;
        ];
      ];
    ];
  ];
  T[index-1];
];





stemandleaf(x) :=
[
  Echo("Stem and Leaf Display");
  didzero := False;
   N := x.length;
  
  if (N<?20)
    [
      tNumInt := 5;
    ] 
  else 
    [
      if (N <? 100) 
        [
          tNumInt := 10;
        ] 
      else 
        [
          if (N <? 150) 
            [
              tNumInt := 15;
            ] 
          else
            [
              tNumInt := 20;
            ];
        ];
    ];
   theMax := x[N-1];
   theMin := x[0];
  alldone := False;
  if (theMax - theMin <? 10) 
  [
     ratio := 1000/(theMax - theMin);
    ratio := Math.max(ratio,1000);
    ratio := trunc(Math.log(ratio) * 0.4342945);
    ratio := Math.pow(10,ratio);
    For ( i := 0, i <? N , i++) 
      [
            x[i] := x[i] * ratio;
      ];
  ]
  else 
    [
              ratio := 1;
    ];
   zcount := 0;         
  theMin := x[0];
   abMin := Math.abs(theMin);
  theMax := x[N-1];
   Y := intervals(theMax-theMin,tNumInt);
   indexA := index +0;
  if (indexA= 2) 
    [
      Y := Y * 5;
       ncats :=5 ;
       newz := 1;
    ] 
  else 
    [
      if(indexA=3) 
        [
          Y := Y * 2;
           ncats := 2;
        ] 
      else 
        [
           ncats := 1;
           newz := 0; 
        ];
    ];

   cutoffs := intlabels(x[0], x[N-1], tNumInt);
  theMax := ratio * Round(theMax);
   nc := cutoffs.length;
   xx8:=0;
  While (cutoffs[nc-2] >? theMax) 
    [
      nc--;
    ];
  theMax := cutoffs[nc-2];
  if (Y >? AbsN(theMax)) 
    [
      nc++;
      While(Y >? AbsN(theMax)) 
        [
          xx8++;
          if(xx8>?100)[break;];
          if (nc >? Length(cutoffs)) 
            [
               temp := cutoffs[nc-2] - cutoffs[nc - 3];
              temp := temp + cutoffs[nc-2];
              cutoffs[nc-1] := temp;
            ];
          theMax := cutoffs[nc-1];
          nc++;
        ];
    ];
   base := trunc(theMax/Y);
   leftover := Round(theMax - base * Y);
  While (AbsN(leftover) >? 10) 
    [
      leftover := AbsN(Round(leftover/10));
    ];
   theMax2 := Maximum(theMax,abMin);
   t4 := trunc(theMax2/base);
  t4 := trunc(N(Ln(t4) * .4342945));
  t4 := Power(10,t4);
   t3 := t4/10;
  if (indexA = 2) 
    [
      if (leftover >=? 8)
        [
           newz := 1;
        ]
    else 
      [
        if (leftover >=? 6)  
          [
             newz := 0;
          ]
        else 
          [
            if (leftover >=? 4) 
              [
                 newz := 4;
              ] 
            else 
              [
                if (leftover >=? 2) 
                  [
                     newz := 3;
                  ] 
                else 
                  [
                     newz := 2; 
                  ];
              ];
          ];
      ];
    ]
  else 
    [
    if (indexA = 3) 
      [
        if (leftover >=?5) 
          [
             newz := 1;
          ] 
        else 
          [
             newz := 0;
          ];
      ];
    ];
   start := False;
   LN := 1;
   LN2 := 0;
   nn := N;
   cur := cutoffs[nc-2];
   count := nc-2;
   base2 :=base;
   newline := True;
   stems := {base2};
   leaves := {""};

 
  For ( i := nn-1, i >=? 0 , i--) 
    [
     it := x[i];
     dd := Round(it/t3) * t3;
     b := trunc(dd/t4);
     L := dd-t4*b;
    leftover := AbsN(Round(L/t3));
    While (leftover >=? 10)
      [
            leftover := Round(leftover/10);
      ];
    if (it >=?0) 
      [
             tt := t3;
      ]
    else 
      [
        tt := -t3;
      ];
      
     xz := b * t4 + leftover * tt;
     
    if (it<?0)
      [
            if (xz >? 0 ) 
          [
            xz := xz * -1;
          ];
          xz := xz - .00001;
      ];
      
    if (xz<?cur) 
    [
            newline := True;
        While (xz<?cur)
         [
                  LN ++;
              if (start) 
              [
                      LN2++;
                  leaves  := Append(leaves, "");
              ];
              temp := trunc(LN/ncats);
              temp := LN - temp*ncats;
              
              if(temp = newz)
              [
                if (base2 = 0) 
                [
                    if (didzero)
                    [
                base2 := base2 - 1;
                    ] 
                    else 
                    [
                        didzero := 1;
                    ];
               ]
               else 
                [
            base2 := base2 - 1;
                ];
          ];
        
          count := count - 1;
          
          if (count <? 0)
          [
            cur := xz -1000;
          ] 
          else 
          [
            cur := cutoffs[count];
          ];
          
          if (base2 = 0)
          [
                    zcount ++;
                if ( ((indexA = 2) And? (zcount >=?6)) Or? ((indexA = 3) And? (zcount >=?3)) Or? ((indexA = 1) And? (zcount >?1)) Or? ((indexA = 4) And? (zcount >?1))) 
                 [
                    stems := Append(stems,"-" : ToString(base2));
                 ] 
                 else 
                 [
                        stems := Append(stems, ToString(base2));
                 ];
          ] 
          else 
          [
                    stems := Append(stems, ToString(base2));
          ];
        
           ];//end While.
      
      
      ];//end if
      
    start := True;
    leftover := ToString(leftover);
    
    if (it>=?0) 
      [
     
  leaves[LN2] := leftover : "" : leaves[LN2];
     
      ]
    else 
      [
            leaves[LN2] := leaves[LN2] : "" : leftover;
      ];
    ];
  
  For ( i := 0, i <? N , i++) [
    x[i] := x[i] / ratio;
  ];
  

  Echo("Stems Leaves");
    For (i:=0, i<?leaves.length, i++)[
        test := " " : stems[i];
    
      While (test.length <? 8) 
       [
            test := " " : test;
       ];
       test := test : "|";
       Echo(test :  leaves[i]);
      
    ];
  

  
];

        
        
%/mathpiper

    %output,preserve="false"
            Result: True
.   %/output















<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Stem and Leaf Plot</title>


<script>
var index = 0;
var T = new Array(4);
var nw = "";
var mean = 0;
var Delimiters=new Array();
Delimiters[0]= ;
Delimiters[1]=\n;
Delimiters[2]=,;
Delimiters[3]=\t;
Delimiters[4]=\r;
var x=new Array();
function main()
{
  nw = window.open("","Output", "toolbar,resizeable,scrollbars,menubar");    
  nw.document.write("<HTML><HEAD><TITLE>Stem and Leaf Plot  Output</TITLE></head><BODY BGCOLOR=#FFFFFF >");
  //Parse the data from the field data 
  ParseString(document.theform.data.value );//Now x has the data
  x=bsort(x);//Macs and Bill Gs product dont do array.sort()
  stemandleaf(x);
  nw.document.write("</body></html>");
  nw.document.close();
}
function compare (a,b) {
  return a-b;
}

function ParseString(string)
{
  i=0;
  ii=0;
  temp="";
  while(i<string.length)
    {
      c=string.charAt(i);
      while((c == Delimiters[0] ||  c == Delimiters[1] || c == Delimiters[2] || c == Delimiters[3] || c == Delimiters[4]) && i<string.length)
        {
          i++;
          c=string.charAt(i);
        }
      temp="";
      while(c != Delimiters[0] &&  c != Delimiters[1] && c !=
            Delimiters[2] && c != Delimiters[3] && c != Delimiters[4] && i<string.length)
        { 
          temp =temp+c;
          i++;
          c=string.charAt(i);
        }     
      x[ii]=temp;
      ii++;
    }
  for(i=0;i<x.length;i++) x[i]=parseFloat(x[i]);
}

function trunc(x) {
  var s = (x<0)?-1:1;
  return s*Math.floor(Math.abs(x));
}


function intlabels(y1,y2,tnumint){
  var diff =y2-y1;
  var x= intervals(diff,tnumint);
  var bot = trunc(y1/x)*x;
  var yy = bot;
  L = new Array();
  var i = 0;
  var xx = 0;
  while (yy-x < y2) {
    L[i] = yy;
    yy += x;
    i++;
    xx++;
    if (xx > 100) {break};
  }
  L[i] = yy;
        return L;
}
function intervals(diff, NumCats) {
  var t4 = trunc(Math.log(diff) * 0.4342945);
  t4 = Math.pow(10,t4);
  T[3]= t4;
  T[2] = t4/2;
  T[1] = t4/5;
  T[0] = t4/10;
  
  var A = new Array(4);
  
  for (i = 0;i < 4; i++) {
                A[i] = trunc(diff/T[i]) +1;
  }
  var D = Math.abs(10 - A[0]);
  index = 1;
  for (i = 1; i < 4; i++) {
    if (A[i] <=? 25) {
      if (A[i] > 2) {
        XX = Math.abs(NumCats - A[i]);
        if (XX < D) {
          D = XX;
          index = i+1;
        }
      }
    }
  }
  return T[index-1];
}

function stemandleaf(x) 
{
  nw.document.write("<b>Stem and Leaf Display</b>");
  var didzero = false;
  var N = x.length;
  
  if (N<20)
    {
      tNumInt = 5;
    } 
  else 
    {
      if (N < 100) 
        {
          tNumInt = 10;
        } 
      else 
        {
          if (N < 150) 
            {
              tNumInt = 15;
            } 
          else
            {
              tNumInt = 20;
            }
        }
    }
  var theMax = x[N-1];
  var theMin = x[0];
  alldone = false;
  if (theMax - theMin < 10) {
    var ratio = 1000/(theMax - theMin);
    ratio = Math.max(ratio,1000);
    ratio = trunc(Math.log(ratio) * 0.4342945);
    ratio = Math.pow(10,ratio);
    for (var i = 0; i < N ; i++) 
      {
        x[i] *= ratio;
      }
  } 
  else 
    {
      var        ratio = 1;
    }
  var zcount = 0;         
  theMin = x[0];
  var abMin = Math.abs(theMin);
  theMax = x[N-1];
  var Y = intervals(theMax-theMin,tNumInt);
  var indexA = index +0;
  if (indexA== 2) 
    {
      Y *= 5;
      var ncats =5 ;
      var newz = 1;
    } 
  else 
    {
      if(indexA==3) 
        {
          Y *= 2;
          var ncats = 2;
        } 
      else 
        {
          var ncats = 1;
          var newz = 0; 
        }
    }

  var cutoffs = intlabels(x[0], x[N-1], tNumInt);
  theMax = ratio * Math.round(theMax);
  var nc = cutoffs.length;
  var xx8=0;
  while (cutoffs[nc-2] > theMax) 
    {
      nc--;
    }
  theMax = cutoffs[nc-2];
  if (Y > Math.abs(theMax)) 
    {
      nc++;
      while(Y > Math.abs(theMax)) 
        {
          xx8++;
          if(xx8>100){break;}
          if (nc > cutoffs.length) 
            {
              var temp = cutoffs[nc-2] - cutoffs[nc - 3];
              temp += cutoffs[nc-2];
              cutoffs[nc-1] = temp;
            }
          theMax = cutoffs[nc-1];
          nc++;
        }
    }
  var base = trunc(theMax/Y);
  var leftover = Math.round(theMax - base * Y);
  while (Math.abs(leftover) > 10) 
    {
      leftover = Math.abs(Math.round(leftover/10));
    }
  var theMax2 = Math.max(theMax,abMin);
  var t4 = trunc(theMax2/base);
  t4 = trunc(Math.log(t4) * .4342945);
  t4 = Math.pow(10,t4);
  var t3 = t4/10;
  if (indexA == 2) 
    {
      if (leftover >=? 8)
        {
          var newz = 1;
        }
    else 
      {
        if (leftover >=? 6)  
          {
            var newz = 0;
          }
        else 
          {
            if (leftover >=? 4) 
              {
                var newz = 4;
              } 
            else 
              {
                if (leftover >=? 2) 
                  {
                    var newz = 3;
                  } 
                else 
                  {
                    var newz = 2; 
                  }
              }
          }
      }
    }
  else 
    {
    if (indexA == 3) 
      {
        if (leftover >=?5) 
          {
            var newz = 1;
          } 
        else 
          {
            var newz = 0;
          }
      }
    }
  var start = false;
  var LN = 1;
  var LN2 = 0;
  var nn = N;
  var cur = cutoffs[nc-2];
  var count = nc-2;
  var base2=base;
  var newline = true;
  var stems = new Array();
  var leaves = new Array();
  stems[0] = base2;
  leaves[0] = "";
 
  for (var i = nn-1; i >=? 0 ; i--) 
    {
    var it = x[i];
    var dd = Math.round(it/t3) * t3;
    var b = trunc(dd/t4);
    var L = dd-t4*b;
    leftover = Math.abs(Math.round(L/t3));
    while (leftover >=? 10)
      {
        leftover = Math.round(leftover/10);
      }
    if (it >=?0) 
      {
        var tt = t3;
      }
    else 
      {
      var tt = -t3;
      }
    var xz = b * t4 + leftover * tt;
    if (it<0)
      {
        if (xz > 0 ) 
          {
            xz = xz * -1;
          }
        xz -= .00001;
      }
    if (xz<cur) 
      {
        newline = true;
      while (xz<cur)
        {
          LN ++;
          if (start) 
            {
              LN2++;
              leaves[LN2] = "";
            }
          var temp = trunc(LN/ncats);
          temp = LN - temp*ncats;
        if(temp == newz)
          {
          if (base2 == 0) 
            {
            if (didzero)
              {
                base2 -= 1;
              } 
            else 
              {
                didzero = 1;
              }
          } 
          else 
            {
              base2 -= 1;
            }
          }
        
        count -= 1;
        if (count < 0)
          {
            cur = xz -1000;
          } 
        else 
          {
               cur = cutoffs[count];
          }
        if (base2 == 0)
          {
            zcount ++;
            if ( ((indexA == 2) && (zcount >=?6)) || ((indexA == 3) && (zcount >=?3)) || ((indexA == 1) && (zcount >1)) || ((indexA == 4) && (zcount >1))) {
              stems[LN2] = "-" + base2;
            } 
            else 
              {
                stems[LN2] = base2;
              }
          } 
        else 
          {
            stems[LN2] = base2;
          }
        
        }
      
      
      }
    start = true;
    leftover += "";
    if (it>=?0) 
      {
     
      leaves[LN2] = leftover + "" + leaves[LN2];
     
      }
    else 
      {
        leaves[LN2] = leaves[LN2] + "" + leftover;
      }
    }
  
  for (var i = 0; i < N ; i++) {
    x[i] /= ratio;
  }
  
  nw.document.write ("<br> <pre>");
  nw.document.write ("   Stems Leaves" + "<br>")
    for (i=0;i<leaves.length; i++){
      var test = " " + stems[i];
      while (test.length < 8) {
        test = " " + test}
      test += "|";
      nw.document.write(test +  leaves[i] + "<br>");
      
    }
  
  nw.document.write ("</pre>");
  nw.document.write("<FONT SIZE=-1><p> Multiply stems by " + t4/ratio + ". ")
    nw.document.write("Multiply leaves by " + t3/ratio + " if stem is positve or by -" + t3/ratio + " if stem is negative.<p></font><p><p>");
  
}

        
        
function bsort(x) 
{
  var N = x.length -1;
  var done = false;
  while (done == false) 
    {
      done = true;
      for (i=0; i<N; i++) 
        {
          if (x[i] > x[i+1]) 
            {
              var t = x[i];
              x[i] = x[i+1];
              x[i+1] = t;
              done = false;
            }
        }
      N--;
    }
  
  return x;
}


function clear()
{
document.theform.data.value="";
}
</script>

  </head>

  <body>

      <h1>Stem and Leaf Plot</h1>

<p> This page contains JavaScript that will make a Stem-and-Leaf plot of the data you
paste or type into the text area below. Separate the different values by spaces, commas, or newlines
 as you enter them. Then hit the "Compute" button and your browser will open a new window and display the plot. When you are done looking at the new window minimize it or close it with controls from its pull-down menus.</p>

<p>Note that Microsoft has implemented a <b>different</b> version of scripting language in their Internet Explorer browser. Very likely, the JavaScript program on this page will <b>not work</b> in Microsofts browser. To the best of my knowledge, the script does work in Netscapes internet browser 3.0.</p>

<FORM name="theform">
<TextArea NAME="data" ROWS=10 COLS=50></TEXTAREA><br>
<INPUT type="button" NAME="calc" Value="Compute" onClick=main();>
<!--<IMPUT type="button" NAME="Clear" Value="Clear" onClick=clear();><br>-->
</FORM>
<p>
<FONT size=-1> The code in this page for the "hard" part of making the plot was borrowed from Lanes Hyperstat. All Ive done is parsed the imput data differently.</FONT>
</p>
<hr>If you find errors in this program please send email:
      <address><a href="mailto:pelikan@spelikan.csm.uc.edu">Stephan Pelikan</a></address>
<!-- Created: Tue Sep 30 14:54:56 EDT 1997 -->
<!-- hhmts start -->

Last modified: Tue Sep 30 17:09:00 EDT 1997
<!-- hhmts end -->
  </body>
</html>














%html
<HTML>
<HEAD><TITLE>Minitab </TITLE></HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">
<p><p><br><p><p><br>
<H1 ALIGN="CENTER"><FONT FACE="Times New Roman Special G1"
FONT COLOR="#ff0000"  SIZE=+3>
Section 2.6. http://www.math.binghamton.edu/arcones/327/2.6.html</H1>
</FONT>  
<pre><h3>

First we use the yarn strength data. We find the boxplot of these data
MTB > Retrieve  A:\YARNSTRG.MTW.
Retrieving worksheet from file: A:\YARNSTRG.MTW
**************************************
A boxplot consists of a box, whiskers, and outliers. A line is drawn across 
the box at the median. By default, the bottom of the box is at the first
quartile (Q1), and the top is at the third quartile (Q3) value. The whiskers 
are the lines that extend from the top and bottom of the box to the adjacent 
values. The adjacent values are the lowest and highest observations that are 
still inside the region defined by the following limits:

      Lower Limit:   Q1 - 1.5 (Q3 - Q1)
      Upper Limit:   Q3 + 1.5 (Q3 - Q1)

Outliers are points outside of the lower and upper limits and are plotted 
with asterisks (*).
**************************************
MTB > boxplot c1

<P><IMG SRC="Image2.6a.gif" WIDTH=384 HEIGHT=257></P>
Using that
MTB > desc c1
                N     MEAN   MEDIAN   TRMEAN    STDEV   SEMEAN
Ln_YarnS      100   2.9238   2.8331   2.8982   0.9378   0.0938

              MIN      MAX       Q1       Q3
Ln_YarnS   1.1514   5.7978   2.2789   3.5732
We have that
Minimum=1.1514; Q1=2.2789; median=2.8331; Q3=3.5732; maximum=5.7978
In this case
Lower Limit:   Q1 - 1.5 (Q3 - Q1)= 2.2789-1.5(3.5732-2.2789)=0.8903
Upper Limit:   Q3 + 1.5 (Q3 - Q1)= 3.5732+1.5(3.5732-2.2789)=5.5146
The minimum is not an outlier, but the maximum is.
So, the lower whisker goes to the minimum. The upper whisker goes to
the biggest value in the data small than 5.5146. This value is  5.0904
Observe that
MTB > sort c1 c2
MTB > print c2


C2      
  1.1514   1.1535   1.3436   1.4328   1.4570   1.5059   1.5219   1.5305 
  1.6438   1.6787   1.7261   1.7837   1.7902   1.8926   1.8952   2.0813 
  2.0968   2.1232   2.1306   2.1381   2.1771   2.2163   2.2364   2.2671 
  2.2762   2.2872   2.3018   2.3459   2.3483   2.4016   2.4064   2.4190 
  2.4240   2.4822   2.5000   2.5238   2.5264   2.5326   2.5364   2.5453 
  2.5654   2.5724   2.5800   2.5813   2.6266   2.6537   2.6745   2.7243 
  2.7317   2.8243   2.8418   2.8732   2.9382   2.9394   2.9908   3.0027 
  3.0164   3.0693   3.0722   3.1166   3.1412   3.1860   3.1860   3.2108 
  3.2177   3.2217   3.3077   3.3770   3.4002   3.4217   3.4603   3.4743 
  3.4866   3.5017   3.5272   3.5886   3.6152   3.6162   3.6394   3.6398 
  3.6561   3.7043   3.7071   3.7782   3.8849   3.9821   4.0017   4.0022 
  4.0126   4.1251   4.3215   4.3389   4.4382   4.4563   4.5234   4.6315 
  4.6426   4.8444   5.0904   5.7978

Next, we draw the quantile graph in page 37:
MTB > set c2
DATA> 1:100
DATA> end
MTB > let c2=c2/101
MTB > sort c1 c3
MTB > Plot C3*C2;
SUBC>   Symbol;
SUBC>     Type 5.

<P><IMG SRC="Image2.6b.gif" WIDTH=384 HEIGHT=254></P>

Next, we get the stem-and leaf- for the strength yard data
******************************************************************
A stem-and-leaf display shows the distribution of a variable in much the
same way as a histogram.  However, the initial digits of each value are 
used to construct the display, so individual values can be read from the 
display. A stem-and-leaf display has three parts:

   The first column shows a cumulative count of the number of values on that
line or on lines toward the nearer edge.  (The line that contains the median 
shows a count of values on that line instead, enclosed in parentheses.)

   The second column of numbers holds the stems.

   The right-hand portion of the display holds the leaves.  Each leaf digit 
represents an individual value.  The initial digits of that value are the 
stem digits.  This is followed by the leaf digit.  Thus, a stem of 46 and a 
leaf of 2 could represent the number 462, or 46.2, or .00462.  The position 
of the decimal point is indicated by the UNIT of the leaf digit printed at 
the top of the display.
**************************************************

MTB > stemandleaf c1

Stem-and-leaf of Ln_YarnS  N  = 100
Leaf Unit = 0.10


    5    1 11344
   15    1 5556677788
   34    2 0011112222233344444
  (21)   2 555555555566677888999
   45    3 000011112223344444
   27    3 5556666677789
   14    4 00013344
    6    4 5668
    2    5 0
    1    5 7
Next, we find robust statistics for location and dispersion.
To find the 5 % trimmed mean we do:
MTB > descr c1

                N     MEAN   MEDIAN   TRMEAN    STDEV   SEMEAN
Ln_YarnS      100   2.9238   2.8331   2.8982   0.9378   0.0938

              MIN      MAX       Q1       Q3
Ln_YarnS   1.1514   5.7978   2.2789   3.5732
The trimmed mean is 2.8982
Alternatively, we could do:
MTB > sort c1 c2
MTB > delete 1,2,3,4,5,96,97,98,99,100 c2 
MTB > mean c2
   MEAN    =      2.8982
In this way, we can also find the 5 % trimmed standard deviation:
MTB > stdev c2
   ST.DEV. =     0.75951


</HTML>



%/html

    %output,preserve="false"
      
.   %/output


