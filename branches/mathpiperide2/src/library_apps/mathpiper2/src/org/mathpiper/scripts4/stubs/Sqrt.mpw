%mathpiper,def="Sqrt"

0 # Sqrt(0) <-- 0;
0 # Sqrt(Infinity) <--  Infinity;
0 # Sqrt(-Infinity) <-- Complex(0,Infinity);
0 # Sqrt(Undefined) <--  Undefined;
1 # Sqrt(x_PositiveInteger?)_(Integer?(SqrtN(x))) <-- SqrtN(x);
2 # Sqrt(x_PositiveNumber?)_InNumericMode() <-- SqrtN(x);
2 # Sqrt(x_NegativeNumber?) <-- Complex(0,Sqrt(-x));
/* 3 # Sqrt(x_IsNumber/y_IsNumber) <-- Sqrt(x)/Sqrt(y); */
3 # Sqrt(x_IsComplex)_InNumericMode() <-- x^(1/2);
/* Threading  */
Sqrt(xlist_IsList) <-- MapSingle("Sqrt",xlist);

90 # (Sqrt(x_Constant?))_(NegativeNumber?(N(x))) <-- Complex(0,Sqrt(-x));

400 # x_RationalOrNumber? * Sqrt(y_RationalOrNumber?)  <-- Sign(x)*Sqrt(x^2*y);
400 # Sqrt(y_RationalOrNumber?) * x_RationalOrNumber?  <-- Sign(x)*Sqrt(x^2*y);
400 # x_RationalOrNumber? / Sqrt(y_RationalOrNumber?)  <-- Sign(x)*Sqrt(x^2/y);
400 # Sqrt(y_RationalOrNumber?) / x_RationalOrNumber?  <-- Sign(x)*Sqrt(y/(x^2));
400 # Sqrt(y_RationalOrNumber?) / Sqrt(x_RationalOrNumber?)  <-- Sqrt(y/x);
400 # Sqrt(y_RationalOrNumber?) * Sqrt(x_RationalOrNumber?)  <-- Sqrt(y*x);
400 # Sqrt(x_Integer?)_Integer?(SqrtN(x)) <-- SqrtN(x);
400 # Sqrt(x_Integer?/y_Integer?)_(Integer?(SqrtN(x)) And? Integer?(SqrtN(y))) <-- SqrtN(x)/SqrtN(y);

%/mathpiper



%mathpiper_docs,name="Sqrt",categories="User Functions;Calculus Related (Symbolic)"
*CMD Sqrt --- square root
*STD
*CALL
        Sqrt(x)

*PARMS

{x} -- argument to the function

*DESC

This function calculates the square root of "x". If the result is
not rational, the call is returned unevaluated unless a numerical
approximation is forced with the {N} function. This
function can also handle negative and complex arguments.

This function is threaded, meaning that if the argument {x} is a
list, the function is applied to all entries in the list.

*E.G.

In> Sqrt(16)
Result: 4;
In> Sqrt(15)
Result: Sqrt(15);
In> N(Sqrt(15))
Result: 3.8729833462;
In> Sqrt(4/9)
Result: 2/3;
In> Sqrt(-1)
Result: Complex(0,1);

*SEE Exp, ^, N
%/mathpiper_docs





%mathpiper,name="Sqrt",subtype="automatic_test"

Verify(Sqrt(Infinity),Infinity);

// version 1.0.56: Due to MathBitCount returning negative values sometimes, functions depending on
// proper functioning failed. MathSqrtFloat failed for instance on N(1/2). It did give the right
// result for 0.5.
NumericEqual(N(Sqrt(500000e-6),20),N(Sqrt(0.0000005e6),20),20);
NumericEqual(N(Sqrt(0.5),20),N(Sqrt(N(1/2)),20),20);

%/mathpiper