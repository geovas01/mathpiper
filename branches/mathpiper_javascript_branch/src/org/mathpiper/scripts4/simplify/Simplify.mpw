%mathpiper,def="Simplify"

//Retract("Simplify",*);

10 # Simplify(expr_IsList) <-- MapSingle("Simplify",expr);

15 # Simplify(Complex(_r,_i)) <-- Complex(Simplify(r),Simplify(i));

20 # Simplify((_xex) == (_yex)) <-- (Simplify(xex-yex) == 0);

20 # Simplify((_xex) > (_yex)) <-- (Simplify(xex-yex) > 0);
20 # Simplify((_xex) < (_yex)) <-- (Simplify(xex-yex) < 0);
20 # Simplify((_xex) >= (_yex)) <-- (Simplify(xex-yex) >= 0);
20 # Simplify((_xex) <= (_yex)) <-- (Simplify(xex-yex) <= 0);
20 # Simplify((_xex) !== (_yex)) <-- (Simplify(xex-yex) !== 0);

// conditionals
25 # Simplify(if (_a) _b) <-- "if" @ {Simplify(a), Simplify(b)};
25 # Simplify(_a else _b) <-- "else" @ {Simplify(a), Simplify(b)};

// otherwise
40 # Simplify(_expr)_(Type(expr)="Ln") <--
[
    //If(InVerboseMode(),Tell("Simplify_Ln",expr));
    LnCombine(expr);
];

40 # Simplify(_expr)_(Type(expr)="Exp") <--
[
    //If(InVerboseMode(),Tell("Simplify_Exp",expr));
    expr;
];

50 # Simplify(_expr) <-- 
[
    //If(InVerboseMode(),Tell("Simplify_other",expr));
    MultiSimp(Eval(expr));
];

%/mathpiper



%mathpiper_docs,name="Simplify",categories="User Functions;Expression Simplification"
*CMD Simplify --- try to simplify an expression
*STD
*CALL
	Simplify(expr)

*PARMS

{expr} -- expression to simplify

*DESC

This function tries to simplify the expression {expr} as much
as possible. It does this by grouping powers within terms, and then
grouping similar terms.

*E.G.

In> a*b*a^2/b-a^3
Result: (b*a^3)/b-a^3;
In> Simplify(a*b*a^2/b-a^3)
Result: 0;

*SEE TrigSimpCombine, RadSimp, Combine
%/mathpiper_docs





%mathpiper,name="Simplify",subtype="automatic_test"

Verify([Local(a);a:=0.1;Simplify((a*b*c)/(a*c*b));],1);


LocalSymbols(p,a,x)
[
  p := a+2-(a+1);
  Verify(Simplify(x^p),x);
];


LocalSymbols(f,p,a,b,x,n,simple,u,v)
[
  simple := {
            Exp(_a)*Exp(_b) <- Exp(a+b),
            Exp(_a)*_u*Exp(_b) <- u*Exp(a+b),
            _u*Exp(_a)*Exp(_b) <- u*Exp(a+b),
            Exp(_a)*Exp(_b)*_u <- u*Exp(a+b),
            _u*Exp(_a)*_v*Exp(_b) <- u*v*Exp(a+b),
            Exp(_a)*_u*Exp(_b)*_v <- u*v*Exp(a+b),
            _u*Exp(_a)*Exp(_b)*_v <- u*v*Exp(a+b),
            _u*Exp(_a)*_v*Exp(_b)*_w <- u*v*w*Exp(a+b)
          };

  a := Simplify(Exp(x)*(Differentiate(x) x*Exp(-x)));
  b := Exp(x)*Exp(-x)-Exp(x)*x*Exp(-x);

  a:= (a /: simple);
  b:= (b /: simple);

  Verify(Simplify(a-(1-x)),0);
  Verify(Simplify(b-(1-x)),0);

];

%/mathpiper