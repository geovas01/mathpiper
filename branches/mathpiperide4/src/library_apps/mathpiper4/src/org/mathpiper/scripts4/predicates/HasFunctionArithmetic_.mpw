%mathpiper,def="HasFunctionArithmetic?"

/// Analyse arithmetic expressions

HasFunctionArithmetic?(expr, atom) := HasFunctionSome?(expr, atom, [ToAtom("+"), ToAtom("-"), *, /]);

%/mathpiper



%mathpiper_docs,name="HasFunctionArithmetic?",categories="Programming Functions;Predicates"
*CMD HasFunctionArithmetic? --- check for expression containing a function
*STD
*CALL
        HasFunctionArithmetic?(expr, func)

*PARMS

{expr} -- an expression

{func} -- a function atom to be found

*DESC

{HasFunctionArithmetic?} is defined through {HasFunctionSome?} to look 
only at arithmetic operations {+}, {-}, {*}, {/}.

Note that since the operators "{+}" and "{-}" are prefix as well as infix 
operators, it is currently required to use {ToAtom("+")} to obtain the 
unevaluated atom "{+}".

*E.G.

In> HasFunctionArithmetic?(x+y*Cos(Ln(x)/x), Cos)
Result: True;

In> HasFunctionArithmetic?(x+y*Cos(Ln(x)/x), Ln)
Result: False;

*SEE HasFunction?, HasFunctionSome?, FuncList, VarList, HasExpression?
%/mathpiper_docs






%mathpiper,name="HasFunctionArithmetic?",subtype="automatic_test"

Verify(HasFunctionArithmetic?(_a*_b+1,ToAtom("+")),True);
Verify(HasFunctionArithmetic?(_a+Sin(_b*_c),'(*)),False);
Verify(HasFunctionArithmetic?(_a+Sin(_b*_c),'Sin),True);

RulebaseHoldArguments("f",[_a]);
Verify(HasFunctionArithmetic?(_a*_b+f([_b,_c]),'List),False);
Retract("f",*);

%/mathpiper