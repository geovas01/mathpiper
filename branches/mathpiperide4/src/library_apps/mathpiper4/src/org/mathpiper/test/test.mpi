Random();

/*v1 := '(_a +$ _b +$ _c) == 3;

list := [
   
    ["function",
        Lambda([trackingList,positionString,node], 
        {   
            Echo(positionString, x, y);
            1 +$ 2; 
        })
    ]
];

// _ is a metavariable that matches all signs.
v1 := TreeProcess(v1,x_ +$ y_, list, Position:"11");



Show(TreeView(v1, Code:False));

*/


v1 := '(_a+_b-_c*_a);

list := [
    ["track",[]],
    
    ["function",
        Lambda([trackingList,positionString,node], 
        {
            DestructiveAppend(trackingList["track"],ToString(node));
            
            MetaSet(node,"Position", positionString);
            
            node; 
        })
    ]
];

//Two leading underscores are used to match a sign literally.
v1 := TreeProcess(v1, _, list);

[track,function] := list;
Echo(track);


process := [
    
    ["function",
        Lambda([trackingList,positionString,node], 
        {   
            MetaSet(node,"HighlightColor","GREEN");
            
            node; 
        })
    ]
];
function := ` '(TreeProcess(@v1, "pattern", @process, Position:"position"));


    theorems := [
            ["Commutative +", x_ + y_, "x\\_ + y\\_", '(y + x), "y + x"],
            ["Commutative *", x_ * y_, "x\\_ * y\\_", '(y * x), "y * x"],
    ];
    
    

    
process2 := [
	["function",
		Lambda([trackingList,positionString,node], 
		{   
			MetaSet(Eval("replacement"),"HighlightColor","YELLOW");			
		})
	]
];
function2 := ` '(TreeProcess(@v1, "pattern", @process2, Position:"position"));


Show(TreeView(v1, Code:False, Manipulate:True, Process:function, Substitute:function2, Theorems:theorems, ShowPositions:True));



