Random();

/*v1 := '(_a +$ _b +$ _c) == 3;

list := [
   
    ["function",
        Lambda([trackingList,positionString,node], 
        {   
            Echo(positionString, x, y);
            1 +$ 2; 
        })
    ]
];

// _ is a metavariable that matches all signs.
v1 := TreeProcess(v1,x_ +$ y_, list, Position:"11");



Show(TreeView(v1, Code:False));

*/






/*
// Add position information.
v1 := '(_a+_b-_c*_d);

list := [
    ["track",[]],
    
    ["function",
        Lambda([trackingList,positionString,node], 
        {
            DestructiveAppend(trackingList["track"],ToString(node));
            
            MetaSet(node,"Position", positionString);
            
            node; 
        })
    ]
];

v1 := TreeProcess(v1, _, list);
*/


//v1 := '(_a+$_b-$_c*$ (_d *$ (_e +$ _f)));
v1 := '(_a+$_b-$_c*$ (_d *$ (_e -$ _f)));

process := [
    
    ["function",
        Lambda([trackingList,positionString,node], 
        {   
            MetaSet(node,"HighlightColor","GREEN");
            
            node; 
        })
    ]
];
function := ` '(TreeProcess("expression", "pattern", @process, Position:"position"));


    theorems := [
        ["Commutative +", x_ +$ y_, "x\\_ + y\\_", '(y +$ x), "y + x"],
        ["Commutative *", x_ *$ y_, "x\\_ * y\\_", '(y *$ x), "y * x"],
        ["Distributive1 *", x_ *$ (y_ +$ z_), "x\\_ * (y\\_ + z\\_)", '(x *$ y + x *$ z), "x * y + x * z"],
        ["Distributive2 *", x_ *$ y_ +$ x_ *$ z_, "x\\_ * y\\_ + x\\_ * z\\_", '(x *$ (y +$ z)), "x * (y + z)"],
        ["Associative1 +", (x_ +$ y_) +$ z_, "(x\\_ + y\\_) + z\\_", '(x +$ (y +$ z)), "x + (y + z)"],
        ["Associative2 +", x_ +$ (_ +$ z_), "x\\_ + (y\\_ + z\\_)", '((x +$ y) +$ z), "(x + y) + z"],
        ["Associative1 *", (x_ *$ y_) *$ z_, "(x\\_ * y\\_) * z\\_", '(x *$ (y +$ z)), "x * (y * z)"],
        ["Associative2 *", x_ *$ (y_ *$ z_), "x\\_ * (y\\_ * z\\_)", '((x *$ y) *$ z), "(x * y) * z"],
        ["Undefine -", x_ -$ y_, "x\\_ - y\\_", '(x +$ -$y), "x + -y"],

    ];
    
    

    
process2 := [
	["function",
		Lambda([trackingList,positionString,node], 
		{   
			MetaSet(Eval("replacement"),"HighlightColor","YELLOW");			
		})
	]
];
function2 := ` '(TreeProcess("expression", "pattern", @process2, Position:"position"));


Show(TreeView(v1, Code:False, Manipulate:True, Process:function, Substitute:function2, Theorems:theorems, ShowPositions:False));



