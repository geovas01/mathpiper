%mathpiper,def="Floor"

5 # Floor(Infinity) <-- Infinity;
5 # Floor(-Infinity) <-- -Infinity;
5 # Floor(Undefined) <-- Undefined;


10 # Floor(x_RationalOrNumber?)
   <--
   {
     x:=N(Eval(x));
//Echo("x = ",x);
     Local(prec,result,n);
     Bind(prec,BuiltinPrecisionGet());
     If(Zero?(x),
       Bind(n,2),
       If(x>?0,
         Bind(n,2+FloorN(N(FastLog(x)/FastLog(10)))),
         Bind(n,2+FloorN(N(FastLog(-x)/FastLog(10))))
       ));
     If(n>?prec,BuiltinPrecisionSet(n));
//Echo("Before");
     Bind(result,FloorN(x));
//Echo("After");
     BuiltinPrecisionSet(prec);
     result;
   };

//     FloorN(N(x));


//todo:tk:should this be removed because it is no longer needed?
/* Changed by Nobbi before redefinition of Rational
10 # Floor(x_Number?) <-- FloorN(x);
10 # Ceil (x_Number?) <-- CeilN (x);
10 # Round(x_Number?) <-- FloorN(x+0.5);

20 # Floor(x_Rational?) _ (Number?(Numerator(x)) And? Number?(Denominator(x))) <-- FloorN(N(x));
20 # Ceil (x_Rational?) _ (Number?(Numerator(x)) And? Number?(Denominator(x))) <-- CeilN (N(x));
20 # Round(x_Rational?) _ (Number?(Numerator(x)) And? Number?(Denominator(x))) <-- FloorN(N(x+0.5));
*/

%/mathpiper



%mathpiper_docs,name="Floor",categories="User Functions;Numbers (Operations)"
*CMD Floor --- round a number downwards
*STD
*CALL
        Floor(x)

*PARMS

[x] -- a number

*DESC

This function returns $Floor(x)$, the largest integer smaller than or equal to $x$.

*E.G.

In> Floor(1.1)
Result: 1;
In> Floor(-1.1)
Result: -2;

*SEE Ceil, Round
%/mathpiper_docs





%mathpiper,name="Floor",subtype="automatic_test"

// Discovered that Floor didn't handle new exponent notation
Verify(Floor(1001.1e-1),100);
Verify(Floor(10.01e1),100);
Verify(Floor(100.1),100);

%/mathpiper