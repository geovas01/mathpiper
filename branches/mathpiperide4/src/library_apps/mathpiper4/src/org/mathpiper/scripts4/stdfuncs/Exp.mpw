%mathpiper,def="Exp"

2 # Exp(x_Number?)::NumericMode?() <-- ExpNum(x);
4 # Exp(Ln(_x))           <-- x;
//110 # Exp(Complex(_r,_i)) <--  Exp(r)*(Cos(i) + I*Sin(i));
200 # Exp(0) <-- 1;
200 # Exp(-Infinity) <-- 0;
200 # Exp(Infinity) <-- Infinity;
200 # Exp(Undefined) <-- Undefined;

Exp(xlist_List?) <-- MapSingle("Exp",xlist);

%/mathpiper



%mathpiper_docs,name="Exp",categories="Mathematics Functions;Calculus Related (Symbolic)"
*CMD Exp --- exponential function
*STD
*CALL
        Exp(x)

*PARMS

{x} -- argument to the function

*DESC

This function calculates $e$ raised to the power $x$, where $e$ is the
mathematic constant 2.71828... One can use {Exp(1)}
to represent $e$.

This function is threaded, meaning that if the argument {x} is a
list, the function is applied to all entries in the list.

*E.G.

In> Exp(0)
Result: 1;

In> Exp(I*Pi)
Result: -1;

In> NM(Exp(1))
Result: 2.7182818284;

*SEE Ln, Sin, Cos, Tan, N
%/mathpiper_docs