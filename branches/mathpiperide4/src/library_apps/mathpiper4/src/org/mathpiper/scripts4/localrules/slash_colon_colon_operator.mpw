%mathpiper,def="/::"

5 # (_expression /:: LocPatterns(_patterns)) <--
⊕
  MacroSubstitute(expression,"LocPredicate","LocChange");
⊖;



10 # (_expression /:: _patterns) <--
⊕
  Local(old);
  
  Bind(patterns, LocProcess(patterns));
  
  Bind(old, expression);
  
  Bind(expression, MacroSubstitute(expression,"LocPredicate","LocChange"));
  
  While (expression !=? old)
  ⊕
    Bind(old, expression);
    
    Bind(expression, MacroSubstitute(expression,"LocPredicate","LocChange"));
  ⊖;
  
  expression;
⊖;


%/mathpiper



%mathpiper_docs,name="/::",categories="Operators"
*CMD /:: --- local simplification rules

    expressions /:: patterns


*PARMS

[expression] -- an expression

[patterns] -- a list of patterns

*DESC

It might be necessary sometimes to use the [/::] operator, which
repeatedly applies the [/:] operator until the result doesn't change
any more. Caution is required, since rules can contradict each other,
which could result in an infinite loop. To detect this situation,
just use /: repeatedly on the expression. The repetitive nature
should become apparent.



*E.G.

In> Sin(u)*Ln(a*b) /:: [ a <- 2, b <- 3 ]
Result: Sin(u)*Ln(6);

*SEE /:, Subst
%/mathpiper_docs