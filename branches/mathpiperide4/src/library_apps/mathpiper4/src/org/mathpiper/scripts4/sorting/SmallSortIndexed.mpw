%mathpiper,def="SmallSortIndexed"

/// This is a fast in-place sorting of a short list (or array!)
/// It is used to speed up the final steps of a HeapSort.
/// SmallSort sorts up to 3 elements, HeapSort sorts 4 and more elements

SmallSortIndexed(list_, first_, last_, compare_)::(last=?first) <-- list;

SmallSortIndexed(list_, first_, last_, compare_)::(last=?first+1) <--
{
        Local(temp);
        temp := list[first];
        Decide(
                Apply(compare,[temp[1],list[last][1]]),
                list,
                {
                        list[first] := list[last];
                        list[last] := temp;
                }        //Swap(list, first, last)
        );
        list;
};

SmallSortIndexed(list_, first_, last_, compare_)::(last=?first+2) <--
{
        Local(temp);
        temp := list[first];
        Decide(
                Apply(compare,[list[first+1][1],temp[1]]),
                {
                        list[first] := list[first+1];
                        list[first+1] := temp;
                }        //Swap(list, first, first+1)        // x>y, z
        );
        // x<y, z
        temp := list[last];
        Decide(
                Apply(compare,[list[first][1],temp[1]]),
                Decide(        // z>x<y
                        Apply(compare,[list[first+1][1],temp[1]]),
                        list,
                        {
                                list[last] := list[first+1];
                                list[first+1] := temp;
                        }        //Swap(list, first+1, last)        // 1, 3, 2
                ),
                {        // 2, 3, 1 -> 1, 2, 3
                        list[last] := list[first+1];
                        list[first+1] := list[first];
                        list[first] := temp;
                }
        );
        list;
};

%/mathpiper

