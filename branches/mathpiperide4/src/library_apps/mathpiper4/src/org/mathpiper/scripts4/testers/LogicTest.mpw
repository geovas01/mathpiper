%mathpiper,def="LogicTest;TrueFalse"

/* LogicTest compares the truth tables of two expressions. */
LocalSymbols(TrueFalse)
{
  RulebaseHoldArguments("TrueFalse",[_var,_expr]);
  10 # TrueFalse(var_Atom?, expr_) <-- `[(@expr) Where (@var)==False,(@expr) Where (@var)==True];
  20 # TrueFalse([], expr_) <-- `(@expr);
  30 # TrueFalse(var_List?, expr_) <--
  `{ 
    Local(t,h);
    Assign(h,First(@var));
    Assign(t,Rest(@var));
    TrueFalse(h,TrueFalse(t,@expr));
  };
  
  HoldArgument("TrueFalse","var");
  HoldArgument("TrueFalse","expr");

  Macro("LogicTest",[_vars,_expr1,_expr2]) Verify(TrueFalse((@vars),(@expr1)), TrueFalse((@vars),(@expr2)));
};

%/mathpiper





%mathpiper_docs,name="LogicTest",categories="Programming Functions;Testing"
*CMD LogicTest --- verifying equivalence of two expressions
*STD
*CALL
        LogicTest(variables,expr1,expr2)

*PARMS

{variables} -- list of variables

{exprN} -- Some boolean expression

*DESC

The command {LogicTest} can be used to verify that an
expression is <I>equivalent</I> to  a correct answer after evaluation.
It returns {True} or {False}.


*E.G.

In> LogicTest([A,B,C],Not?((Not? A) And? (Not? B)),A Or? B)
Result: True

In> LogicTest([A,B,C],Not?((Not? A) And? (Not? B)),A Or? C)
        ******************
        CommandLine: 1

        $TrueFalse4([A,B,C],Not?(Not? A And? Not? B))
         evaluates to
        [[[False,False],[True,True]],[[True,True],[True,True]]]
         which differs from
        [[[False,True],[False,True]],[[True,True],[True,True]]]
        ******************
Result: False

*SEE Simplify, CanProve, KnownFailure, Verify, TestMathPiper, LogicVerify

%/mathpiper_docs




%mathpiper,name="LogicTest",subtype="automatic_test"

LogicTest([_A],_A And? _A,_A);
LogicTest([_A],_A And? True, _A);
LogicTest([_A],_A And? False,False);
LogicTest([_A],_A Or? True, True);
LogicTest([_A],_A Or? False,_A);
LogicTest([_A],_A Or? Not? _A,True);
LogicTest([_A],_A And? Not? _A,False);
LogicTest([_A,_B],(_A And? _B) Or? (_A And? _B), _A And? _B);
LogicTest([_A,_B],_A Or? (_A And? _B), _A And?(_A Or? _B));
LogicTest([_A,_B],(_A And? _B) And? _A,(_A And? _B) And? _A);
LogicTest([_A,_B],Not? (_A And? _B) And? _A,(Not? _A Or? Not? _B) And? _A);
LogicTest([_A,_B],(_A Or? _B) And? Not? _A,_B And? Not? _A);
LogicTest([_A,_B,_C],(_A Or? _B) And? (Not? _A Or? _C), (_A Or? _B) And? (_C Or? Not? _A));
LogicTest([_A,_B,_C],(_B Or? _A) And? (Not? _A Or? _C), (_A Or? _B) And? (_C Or? Not? _A));
LogicTest([_A,_B,_C], _A And? (_A Or? _B Or? _C), _A);
LogicTest([_A,_B,_C], _A And? (Not? _A Or? _B Or? _C),_A And? (_B Or? _C));

%/mathpiper