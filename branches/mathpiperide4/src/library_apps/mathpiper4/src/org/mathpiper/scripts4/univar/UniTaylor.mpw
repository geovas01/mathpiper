%mathpiper,def="UniTaylor"

Function("UniTaylor",[_taylorfunction,_taylorvariable,_taylorat,_taylororder])
{
  Local(n,result,dif,polf);
  result:=[];
  {
    MacroLocal(taylorvariable);
    MacroAssign(taylorvariable,taylorat);
    DestructiveAppend(result,Eval(taylorfunction));
  };
  dif:=taylorfunction;
  polf:=(taylorvariable-taylorat);
  For(n:=1,n<=?taylororder,n++)
  {
    dif:= Deriv(taylorvariable) dif;
    MacroLocal(taylorvariable);
    MacroAssign(taylorvariable,taylorat);
    DestructiveAppend(result,(Eval(dif)/n!));
  };
  UniVariate(taylorvariable,0,result);
};

%/mathpiper