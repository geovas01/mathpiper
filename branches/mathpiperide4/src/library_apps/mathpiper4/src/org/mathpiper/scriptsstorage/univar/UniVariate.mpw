%mathpiper,def="UniVariate;ShiftUniVar"

//Auxiliary function.
ShiftUniVar(UniVariate(_var,_first,_coefs),_fact,_shift)
   <--
   {
//Echo("fact, coefs = ",fact,coefs);
     UniVariate(var,first+shift,fact*coefs);
   };



RulebaseHoldArguments("UniVariate",[var,first,coefs]);

RuleHoldArguments("UniVariate",3,10,Length(coefs)>?0 And? coefs[1]=?0)
  UniVariate(var,first+1,Rest(coefs));
RuleHoldArguments("UniVariate",3,1000,Complex?(var) Or? List?(var))
    ExpandUniVariate(var,first,coefs);

500 # UniVariate(_var,_f1,_c1) + UniVariate(_var,_f2,_c2) <--
{
  Local(from,result);
  Local(curl,curr,left,right);

  Assign(curl, f1);
  Assign(curr, f2);
  Assign(left, c1);
  Assign(right, c2);
  Assign(result, []);
  Assign(from, Minimum(curl,curr));

  While(And?(LessThan?(curl,curr),left !=? []))
  {
    DestructiveAppend(result,First(left));
    Assign(left,Rest(left));
    Assign(curl,AddN(curl,1));
  };
  While(LessThan?(curl,curr))
  {
    DestructiveAppend(result,0);
    Assign(curl,AddN(curl,1));
  };
  While(And?(LessThan?(curr,curl), right !=? []))
  {
    DestructiveAppend(result,First(right));
    Assign(right,Rest(right));
    Assign(curr,AddN(curr,1));
  };
  While(LessThan?(curr,curl))
  {
    DestructiveAppend(result,0);
    Assign(curr,AddN(curr,1));
  };
  While(And?(left !=? [], right !=? []))
  {
    DestructiveAppend(result,First(left)+First(right));
    Assign(left, Rest(left));
    Assign(right, Rest(right));
  };
  While(left !=? [])
  {
    DestructiveAppend(result,First(left));
    Assign(left, Rest(left));
  };
  While(right !=? [])
  {
    DestructiveAppend(result,First(right));
    Assign(right, Rest(right));
  };

  UniVariate(var,from,result);
};


200 # UniVariate(_var,_first,_coefs) + a_Number? <--
      UniVariate(var,first,coefs) + UniVariate(var,0,[a]);
200 # a_Number? + UniVariate(_var,_first,_coefs) <--
      UniVariate(var,first,coefs) + UniVariate(var,0,[a]);


200 # - UniVariate(_var,_first,_coefs) <-- UniVariate(var,first,-coefs);


200 # (_factor * UniVariate(_var,_first,_coefs))_((FreeOf?(var,factor))) <--
  UniVariate(var,first,coefs*factor);

200 # (UniVariate(_var,_first,_coefs)/_factor)_((FreeOf?(var,factor))) <--
  UniVariate(var,first,coefs/factor);



200 # UniVariate(_var,_f1,_c1) * UniVariate(_var,_f2,_c2) <--
{
  Local(i,j,n,shifted,result);
  Assign(result,MakeUni(0,var));
//Echo("c1 = ",var,f1,c1);
//Echo("c2 = ",var,f2,c2);
  Assign(n,Length(c1));
  For(i:=1,i<=?n,i++)
  {
//Echo("before = ",result);
//Echo("parms = ",var,c1,c2,f1,f2,f1+i-1);
    Assign(result,result+ShiftUniVar(UniVariate(var,f2,c2),MathNth(c1,i),f1+i-1));
//Echo("after = ",result);
  };
//Echo("result = ",result);
  result;
};




%/mathpiper