%mathpiper,def="MakeMultiNomial;MultiExpressionList;MultiExpression?;MultiConstant?;IsVr;MultiSingleFactor;Multi?;MultiNomialMultiply"


/* code pertaining to creating the internal format for multivariate
   polynomials (the inverse of NormalForm

- MultiExpressionList(x)
  extract all variable-like sub-expressions from the main expression,
  including functions, which can then get treated as if they were
  a variable.
- MultiExpression?(x)
  determing whether 'x' can be a 'variable' for a multiNomial
- Multi?(x)
  returns True if 'x' is a multivariate expression in internal format.
  Useful for transformation rules.
 */

MultiExpressionList(_expr) <-- VarList(expr,"MultiExpression?");
10 # MultiExpression?(_x + _y) <-- False;
10 # MultiExpression?(_x - _y) <-- False;
10 # MultiExpression?(   - _y) <-- False;
10 # MultiExpression?(_x * _y) <-- False;
10 # MultiExpression?(_x / _y) <-- False;
10 # MultiExpression?(_x ^ y_PositiveInteger?) <-- False;
11 # MultiExpression?(_x ^ _y)_(PositiveInteger?(Simplify(y))) <-- False;
//10 # MultiExpression?(x_Constant?) <-- False;
10 # MultiExpression?(x_MultiConstant?) <-- False;

//TODO: shouldn't this be more global? The problem right now is
// that Constant?/Variable? take Pi to be a constant...
MultiConstant?(_n) <-- (VarList(n,"IsVr")=?[]);
10 # IsVr(n_Number?) <-- False;
10 # IsVr(n_Function?) <-- False;
10 # IsVr(n_String?) <-- False;
20 # IsVr(_n) <-- True;
100 # MultiExpression?(_x) <-- True;

10 # Multi?(MultiNomial(vars_List?,_terms)) <-- True;
20 # Multi?(_anything) <-- False;



LocalSymbols(a,vars,pow)  {
  20 #  MultiSingleFactor(_vars,_a,_pow) <--
    {
      Local(term);
      term:=[FillList(0,Length(vars)),1];
      term[1][Find(vars,a)] := pow;
      CreateTerm(vars,term);
    };
};
LocalSymbols(x,y,vars)  {
10 #  MakeMultiNomial(x_MultiConstant?,vars_List?) <--
      CreateTerm(vars,[FillList(0,Length(vars)),x]);
20 #  MakeMultiNomial(_x,vars_List?)_(Contains?(vars,x)) <-- MultiSingleFactor(vars,x,1);
30 #  MakeMultiNomial(_x + _y,vars_List?) <--
      MakeMultiNomial(x,vars) + MakeMultiNomial(y,vars);
30 #  MakeMultiNomial(_x * _y,vars_List?) <--
      MakeMultiNomial(x,vars) * MakeMultiNomial(y,vars);
30 #  MakeMultiNomial(- _x,vars_List?) <-- -MakeMultiNomial(x,vars);
30 #  MakeMultiNomial(_x - _y,vars_List?) <--
      MakeMultiNomial(x,vars) - MakeMultiNomial(y,vars);
30 #  MakeMultiNomial(MultiNomial(_vars,_terms),vars_List?)
      <-- MultiNomial(vars,terms);

// This rule would accept almost all terms, assuming them to be const.
100 #  MakeMultiNomial(_x,vars_List?) <--
      {
      CreateTerm(vars,[FillList(0,Length(vars)),x]);
      };

};

LocalSymbols(x,y,z,vars,gcd,a,a)  {
  20 #  MakeMultiNomial(_x / (_y / _z),vars_List?)
     <-- MakeMultiNomial((x*z) / y,vars_List?);
  20 #  MakeMultiNomial((_x / _y) / _z,vars_List?)
     <-- MakeMultiNomial((x*z) / y,vars_List?);
  25 #  MakeMultiNomial(_x / y_Constant?,vars_List?)
     <-- MakeMultiNomial(1/y,vars)*MakeMultiNomial(x,vars);
  30 #  MakeMultiNomial(_x / _y,vars_List?) <--
        {
          Local(result);
//Echo("1...",x);
//Echo("2...",y);
          Bind(result,MultiRemoveGcd(MakeMultiNomial(x,vars)/MakeMultiNomial(y,vars)));
//Echo("3...",result);
          result;
        };
  };


MultiNomial(_vars,_x) + MultiNomial(_vars,_y) <--
           MultiNomialAdd(MultiNomial(vars,x), MultiNomial(vars,y));
MultiNomial(_vars,_x) * MultiNomial(_vars,_y) <--
           MultiNomialMultiply(MultiNomial(vars,x), MultiNomial(vars,y));
MultiNomial(_vars,_x) - MultiNomial(_vars,_y) <--
        MultiNomialAdd(MultiNomial(vars,x), MultiNomialNegate(MultiNomial(vars,y)));
                      - MultiNomial(_vars,_y) <--
        MultiNomialNegate(MultiNomial(vars,y));
MultiNomial(_vars,_x) / MultiNomial(_vars,_x) <-- MakeMultiNomial(1, vars);


LocalSymbols(x,n,vars)  {
30 #  MakeMultiNomial(_x ^ n_Integer?,vars_List?)_(Contains?(vars,x)) <--
      MultiSingleFactor(vars,x,n);
40 #  MakeMultiNomial(_x ^ n_PositiveInteger?,vars_List?) <--
      {
        Local(mult,result);
        Bind(mult,MakeMultiNomial(x,vars));
        Bind(result,MakeMultiNomial(1,vars));
        While(n>?0)
        {
          If(n&1 !=? 0, Bind(result, MultiNomialMultiply(result,mult)));
          Bind(n,n>>1);
          If(n!=?0,Bind(mult,MultiNomialMultiply(mult,mult)));
        };
        result;
      };

  15 #  MakeMultiNomial(_x ^ _n,vars_List?)_(Not?(Integer?(n)) And? Integer?(Simplify(n))) <--
        MakeMultiNomial( x ^  Simplify(n),vars);

  50 #  MakeMultiNomial(_x ^ (_n),vars_List?)_(Contains?(vars,x)) <--
        {
          Bind(n,Simplify(n));
          If(Integer?(n),
            MultiSingleFactor(vars,x,n),
            MultiSingleFactor(vars,x^n,1)
              );
        };
};


x_Multi? + (y_Multi?/z_Multi?) <-- ((x*z+y)/z);
(y_Multi?/z_Multi?) + x_Multi? <-- ((x*z+y)/z);
(y_Multi?/z_Multi?) + (x_Multi?/w_Multi?) <-- ((y*w+x*z)/(z*w));
(y_Multi?/z_Multi?) - (x_Multi?/w_Multi?) <-- ((y*w-x*z)/(z*w));
(y_Multi?/z_Multi?) * (x_Multi?/w_Multi?) <-- ((y*x)/(z*w));
(y_Multi?/z_Multi?) / (x_Multi?/w_Multi?) <-- ((y*w)/(z*x));
x_Multi? - (y_Multi?/z_Multi?) <-- ((x*z-y)/z);
(y_Multi?/z_Multi?) - x_Multi? <-- ((y-x*z)/z);
(a_Multi?/(c_Multi?/b_Multi?))    <-- ((a*b)/c);
((a_Multi?/c_Multi?)/b_Multi?)    <-- (a/(b*c));
((a_Multi?/b_Multi?) * c_Multi?)  <-- ((a*c)/b);
(a_Multi? * (c_Multi?/b_Multi?))  <-- ((a*c)/b);
- ((a_Multi?)/(b_Multi?))         <-- (-a)/b;


MultiNomialMultiply(
     MultiNomial(_vars,_terms1)/MultiNomial(_vars,_terms2),
     MultiNomial(_vars,_terms3)/MultiNomial(_vars,_terms4)) <--
{
  MultiNomialMultiply(MultiNomial(vars,terms1),MultiNomial(vars,terms3))/
  MultiNomialMultiply(MultiNomial(vars,terms2),MultiNomial(vars,terms4));
};
MultiNomialMultiply(
     MultiNomial(_vars,_terms1)/MultiNomial(_vars,_terms2),
     MultiNomial(_vars,_terms3)) <--
{
  MultiNomialMultiply(MultiNomial(vars,terms1),MultiNomial(vars,terms3))/
  MultiNomial(vars,terms2);
};
MultiNomialMultiply(
     MultiNomial(_vars,_terms3),
     MultiNomial(_vars,_terms1)/MultiNomial(_vars,_terms2)) <--
{
  MultiNomialMultiply(MultiNomial(vars,terms1),MultiNomial(vars,terms3))/
  MultiNomial(vars,terms2);
};

10 # MultiNomialMultiply(_a,_b) <--
{
  Echo(["ERROR!",a,b]);
  Echo(["ERROR!",Type(a),Type(b)]);
};







%/mathpiper
