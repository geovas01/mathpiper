
package org.mathpiper.ui.gui.applications.chess;


// Obtained from http://stackoverflow.com/questions/21142686/making-a-robust-resizable-swing-chess-gui.

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import javax.swing.*;
import javax.swing.border.*;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import sun.misc.BASE64Decoder;

public class ChessBoard {

    private final JPanel gui = new JPanel(new BorderLayout(3, 3));
    private JButton[][] chessBoardSquares = new JButton[8][8];
    private Image[][] chessPieceImages = new Image[2][6];
    private JPanel chessBoard;
    private final JLabel message = new JLabel(
            "TheoremChess");
    private static final String COLS = "12345678";
    // Piece images from http://i.stack.imgur.com/memI0.png.
    private String piecesImageBase64 = "";
    private Map<String, Piece> piecesMap = new<String,Piece> HashMap();
    
    public static final int QUEEN = 0, KING = 1, ROOK = 2, KNIGHT = 3, BISHOP = 4, PAWN = 5;
    public static final int[] STARTING_ROW = { ROOK, KNIGHT, BISHOP, KING, QUEEN, BISHOP, KNIGHT, ROOK
    };
    public static final int BLACK = 0, WHITE = 1;

    public ChessBoard() {
        initializeGui();
    }

    public final void initializeGui() {
        // create the images for the chess pieces
        createImages();

        // set up the main GUI
        gui.setBorder(new EmptyBorder(5, 5, 5, 5));
        JToolBar tools = new JToolBar();
        tools.setFloatable(false);
        gui.add(tools, BorderLayout.PAGE_START);

        

        Action initAction = new AbstractAction("Init") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    ChessBoard.this.setPiece("pw1", 3, 2);
                }catch(Exception ex)
                {
                    ex.printStackTrace();
                }
            }
        };
        tools.add(initAction);

        Action moveAction = new AbstractAction("Move") {

            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    ChessBoard.this.movePiece("pw1", 3, 3);
                }catch(Exception ex)
                {
                    ex.printStackTrace();
                }
            }
        };
        tools.add(moveAction);        

        tools.addSeparator();
        tools.add(new JButton("Resign")); // TODO - add functionality!
        tools.addSeparator();
        tools.add(message);

        gui.add(new JLabel("?"), BorderLayout.LINE_START);

        chessBoard = new JPanel(new GridLayout(0, 9)) {

            /**
             * Override the preferred size to return the largest it can, in
             * a square shape.  Must (must, must) be added to a GridBagLayout
             * as the only component (it uses the parent as a guide to size)
             * with no GridBagConstaint (so it is centered).
             */
            @Override
            public final Dimension getPreferredSize() {
                Dimension d = super.getPreferredSize();
                Dimension prefSize = null;
                Component c = getParent();
                if (c == null) {
                    prefSize = new Dimension(
                            (int)d.getWidth(),(int)d.getHeight());
                } else if (c!=null &&
                        c.getWidth()>d.getWidth() &&
                        c.getHeight()>d.getHeight()) {
                    prefSize = c.getSize();
                } else {
                    prefSize = d;
                }
                int w = (int) prefSize.getWidth();
                int h = (int) prefSize.getHeight();
                // the smaller of the two sizes
                int s = (w>h ? h : w);
                return new Dimension(s,s);
            }
        };
        chessBoard.setBorder(new CompoundBorder(
                new EmptyBorder(8,8,8,8),
                new LineBorder(Color.BLACK)
                ));
        // Set the BG to be ochre
        Color ochre = new Color(204,119,34);
        chessBoard.setBackground(ochre);
        JPanel boardConstrain = new JPanel(new GridBagLayout());
        boardConstrain.setBackground(ochre);
        boardConstrain.add(chessBoard);
        gui.add(boardConstrain);

        // create the chess board squares
        Insets buttonMargin = new Insets(0, 0, 0, 0);
        for (int ii = 0; ii < chessBoardSquares.length; ii++) {
            for (int jj = 0; jj < chessBoardSquares[ii].length; jj++) {
                JButton b = new JButton();
                b.setMargin(buttonMargin);
                // our chess pieces are 64x64 px in size, so we'll
                // 'fill this in' using a transparent icon..
                ImageIcon icon = new ImageIcon(
                        new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
                b.setIcon(icon);
                if ((jj % 2 == 1 && ii % 2 == 1)
                        //) {
                        || (jj % 2 == 0 && ii % 2 == 0)) {
                    b.setBackground(Color.WHITE);
                } else {
                    b.setBackground(Color.BLACK);
                }
                chessBoardSquares[jj][ii] = b;
            }
        }

        /*
         * fill the chess board
         */

        

        
        // fill the black non-pawn piece row
        for (int ii = 0; ii < 8; ii++) {
            for (int jj = 0; jj < 8; jj++) {
                switch (jj) {
                    case 0:
                        chessBoard.add(new JLabel("" + (9-(ii + 1)),
                                SwingConstants.CENTER));
                    default:
                        chessBoard.add(chessBoardSquares[jj][ii]);
                }
            }
        }
        
        chessBoard.add(new JLabel(""));
                // fill the bottom row
        for (int ii = 0; ii < 8; ii++) {
            chessBoard.add(
                    new JLabel(COLS.substring(ii, ii + 1),
                    SwingConstants.CENTER));
        }
    }

    public final JComponent getGui() {
        return gui;
    }
    
    
    public static BufferedImage decodeToImage(String imageString) {

        BufferedImage image = null;
        byte[] imageByte;
        try {
            BASE64Decoder decoder = new BASE64Decoder();
            imageByte = decoder.decodeBuffer(imageString);
            ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
            image = ImageIO.read(bis);
            bis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return image;
    }

    private final void createImages() {
        try {
//            URL url = new URL("http://i.stack.imgur.com/memI0.png");
//            BufferedImage bi = ImageIO.read(url);
            BufferedImage bi = decodeToImage(piecesImageBase64);
            for (int ii = 0; ii < 2; ii++) {
                for (int jj = 0; jj < 6; jj++) {
                    chessPieceImages[ii][jj] = bi.getSubimage(
                            jj * 64, ii * 64, 64, 64);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Initializes the icons of the initial chess board piece places
     */
    private final void setupNewGame() {
        message.setText("Make your move!");
        // set up the black pieces
        for (int ii = 0; ii < STARTING_ROW.length; ii++) {
            chessBoardSquares[ii][0].setIcon(new ImageIcon(
                    chessPieceImages[BLACK][STARTING_ROW[ii]]));
        }
        for (int ii = 0; ii < STARTING_ROW.length; ii++) {
            chessBoardSquares[ii][1].setIcon(new ImageIcon(
                    chessPieceImages[BLACK][PAWN]));
        }
        // set up the white pieces
        for (int ii = 0; ii < STARTING_ROW.length; ii++) {
            chessBoardSquares[ii][6].setIcon(new ImageIcon(
                    chessPieceImages[WHITE][PAWN]));
        }
        for (int ii = 0; ii < STARTING_ROW.length; ii++) {
            chessBoardSquares[ii][7].setIcon(new ImageIcon(
                    chessPieceImages[WHITE][STARTING_ROW[ii]]));
        }
    }
    
    
    public void setPiece(String name, int column, int row) throws Exception
    {
        column--;
        
        row = 8 - row;
        
        char pieceType = name.charAt(0);
        
        int piece = 0;

        if(pieceType == 'q')
        {
            piece = QUEEN;
        }
        else if(pieceType == 'k')
        {
            piece = KING;
        }
        else if(pieceType == 'r')
        {
            piece = ROOK;
        }
        else if(pieceType == 'n')
        {
            piece = KNIGHT;
        }
        else if(pieceType == 'b')
        {
            piece = BISHOP;
        }
        else if(pieceType == 'p')
        {
            piece = PAWN;
        }
        else
        {
            throw new Exception("Illegal piece type <" + pieceType + ".");
        }
        
        int color = name.charAt(1) == 'w' ? WHITE : BLACK;
        
        Piece piece2 = new Piece(column,row);
        
        piece2.setIcon(new ImageIcon(chessPieceImages[color][piece]));
        
        piece2.setOriginalIcon(chessBoardSquares[column][row].getIcon());
        
        chessBoardSquares[column][row].setIcon(piece2.getIcon());
        
        piecesMap.put(name, piece2);
    }
    
    
    public void movePiece(String name, int column, int row)
    {
        column--;
        
        row = 8 - row;
        
        Piece piece = piecesMap.get(name);

        chessBoardSquares[piece.getColumn()][piece.getRow()].setIcon(piece.getOriginalOcon());
        
        piece.setOriginalIcon(chessBoardSquares[column][row].getIcon());
        
        chessBoardSquares[column][row].setIcon(piece.getIcon());
    }
    
    
    private class Piece
    {
        private int column;
        private int row;
        private Icon icon;
        private Icon originalIcon;
        
        public Piece(int column, int row)
        {
            this.column = column;
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public Icon getIcon() {
            return icon;
        }

        public void setIcon(Icon icon) {
            this.icon = icon;
        }
        
        

        public Icon getOriginalOcon() {
            return originalIcon;
        }

        public void setOriginalIcon(Icon originalIcon) {
            this.originalIcon = originalIcon;
        }
    }

    public static void main(String[] args) {
        
        final ChessBoard cg = new ChessBoard();
        
        cg.setupNewGame();
        Runnable r = new Runnable() {

            @Override
            public void run() {
  
                JFrame f = new JFrame("Chessboard");
                f.add(cg.getGui());
                // Ensures JVM closes after frame(s) closed and
                // all non-daemon threads are finished
                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                // See http://stackoverflow.com/a/7143398/418556 for demo.
                f.setLocationByPlatform(true);

                // ensures the frame is the minimum size it needs to be
                // in order display the components within it
                f.pack();
                // ensures the minimum size is enforced.
                f.setMinimumSize(f.getSize());
                f.setVisible(true);
            }
        };
        // Swing GUIs should be created and updated on the EDT
        // http://docs.oracle.com/javase/tutorial/uiswing/concurrency
        SwingUtilities.invokeLater(r);
    }
}