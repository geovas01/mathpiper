%mathpiper,def="+;SumListSide"

/* Addition */

100 # + _x  <-- x;

50 # x_Number? + y_Number? <-- AddN(x,y);

100 # 0 + _x    <-- x;
100 # _x + 0    <-- x;
100 # _x + _x   <-- 2*x;
100 # _x + n_Constant?*(_x)   <-- (n+1)*x;
100 # n_Constant?*(_x) + _x   <-- (n+1)*x;
100 # Sinh(_x)+Cosh(_x)                <-- Exp(x);

101 # _x + - _y <-- x-y;
101 # _x + (- _y)/(_z) <-- x-(y/z);
101 # (- _y)/(_z) + _x  <-- x-(y/z);
101 # (- _x) + _y <-- y-x;
102 # _x + y_NegativeNumber? <-- x-(-y);
102 # _x + y_NegativeNumber? * _z <-- x-((-y)*z);
102 # _x + (y_NegativeNumber?)/(_z) <-- x-((-y)/z);
102 # (y_NegativeNumber?)/(_z) + _x  <-- x-((-y)/z);
102 # (x_NegativeNumber?) + _y <-- y-(-x);
// fractions
150 # _n1 / _d + _n2 / _d <-- (n1+n2)/d;

200 # (x_Number? + _y)_Not?(Number?(y)) <-- y+x;
200 # ((_y + x_Number?) + _z)_Not?(Number?(y) Or? Number?(z)) <-- (y+z)+x;
200 # ((x_Number? + _y) + z_Number?)_Not?(Number?(y)) <-- y+(x+z);
200 # ((_x + y_Number?) + z_Number?)_Not?(Number?(x)) <-- x+(y+z);
// fractions
210 # x_Number? + (y_Number? / z_Number?) <--(x*z+y)/z;
210 # (y_Number? / z_Number?) + x_Number? <--(x*z+y)/z;
210 # (x_Number? / v_Number?) + (y_Number? / z_Number?) <--(x*z+y*v)/(v*z);


//  220 # + x_List?          <-- MapSingle("+",x);        // this rule is never active

220 # (xlist_List? + ylist_List?)_(Length(xlist)=?Length(ylist)) <-- Map("+",[xlist,ylist]);

SumListSide(_x, y_List?) <--
{
   Local(i,result);
   result:=[];
   For(i:=1,i<=?Length(y),i++)
   { DestructiveInsert(result,i,x + y[i]); };
   result;
};

240 # (x_List? + _y)_Not?(List?(y)) <-- SumListSide(y,x);
241 # (_x + y_List?)_Not?(List?(x)) <-- SumListSide(x,y);

250 # z_Infinity? + Complex(_x,_y) <-- Complex(x+z,y);
250 # Complex(_x,_y) + z_Infinity? <-- Complex(x+z,y);

251 # z_Infinity? + _x <-- z;
251 # _x + z_Infinity? <-- z;


250 # Undefined + _y <-- Undefined;
250 # _x + Undefined <-- Undefined;

%/mathpiper





%mathpiper_docs,name="+",categories="Operators"
*CMD + --- arithmetic addition
*STD
*CALL

        x+y
        +x
Precedence:
*EVAL PrecedenceGet("+")

*PARMS

[x] and [y] -- objects for which arithmetic addition is defined


*DESC

The addition operators can work on integers,
rational numbers, complex numbers, vectors, matrices and lists.

These operators are implemented in the standard math library (as opposed
to being built-in). This means that they can be extended by the user.

*E.G.

In> 2+3
Result: 5;
%/mathpiper_docs