


    
%mathpiper

//Show a person's immediate friends.

AssocIndices(users);

%/mathpiper

    %output,preserve="false"
      Result: {"41600939","613730531","41601872","33311604","194400051","194400056","32804593","553467138","1258749604","194401092","22000740","661987533","48603816","701330577","1252813158","22914451","1911792","39500668","39507917","1912216","41600170","1158930043","33101268","655562780","39509173","194401495","1432050082","110600146","30826178","1146721802","22914002","4710213","51602799","41601137","41602990","39500121","194400535","22901085","672592995","1932474","194401551","1432050073","22922273","621257393","1909962","1948344","41601206","194400001","115900714","41600504","812395223","1274923835","41600860","41600346","501038571","1214686840","1908839","31112891","51600290","1948818","146302015","30801688","215904492","22916527","1937095","39503344","158400167","41600890","115900913","115900286","545067116","39501750","41600593","39509102","115901408","69600121","57205799","504712969","35600070","733011866","41600806","51602767","33101520","41602343","41602069","194402862","31109511","2407122","572164144","786000584","41600690","1158930071","1146722110","808875712","41600577","672828667","13930754","22922494","146100330","115900324","115900611","41601016","513204554","39500222","510496770","1912833","712717472","41600043","41601243","39506560","1910064","41600910","39504825","618875395","22000543","200303428","41600823","39505313","60701475","41600836","51600919","701550590","1911793","1603140028","41600386","41601003","23603689","12430127","770820064","639451702","51600302","33102092","194400383","41602975","1912564","820864007","41602801","41600270","58301963","185600037","41600998","41601383","523613901","612741836","41600163","1909770","39500479","30809016","41600469","39513312","39504653","41603015","41600688","39506054","115900653","13964912","36200173","1006195416"}
    %/output






    
%mathpiper,truncate="100"

//Sort users by the number of friends they have.

sorted := HeapSort(users,Lambda({x,y}, Length(x[2]) > Length(y[2]) ) );

%/mathpiper

    %output,preserve="false"
      Result: {{"39506054",{39507877,1426200127,39512961,39507979,39507972,215903193,1410690030,12441892,5
    %/output











%mathpiper,truncate="100"

// Create an ordered list of just the main user's IDs.
rank := {};

ForEach(user,sorted)
[
    DestructiveAppend(rank, user[1]);
];

rank;

%/mathpiper

    %output,preserve="false"
      Result: {"39506054","194401551","41600860","41600577","41600469","39505313","41600170","39509173","4
    %/output





    
%mathpiper,output="geogebra"

//Plot sorted users. (Note:tk: add Result/Side effects removal code to geogebra code.
x := 1;

ForEach(user,sorted)
[
    Echo(Atom("("),x,,,Length(user[2]),Atom(")"));
    x++;
];
%/mathpiper

    %geogebra,preserve="false"
      Result: True
      
      Side effects:
      ( 1 , 1749 ) 
      ( 2 , 1412 ) 
      ( 3 , 1111 ) 
      ( 4 , 936 ) 
      ( 5 , 908 ) 
      ( 6 , 852 ) 
      ( 7 , 809 ) 
      ( 8 , 778 ) 
      ( 9 , 761 ) 
      ( 10 , 756 ) 
      ( 11 , 723 ) 
      ( 12 , 700 ) 
      ( 13 , 684 ) 
      ( 14 , 681 ) 
      ( 15 , 680 ) 
      ( 16 , 677 ) 
      ( 17 , 669 ) 
      ( 18 , 630 ) 
      ( 19 , 616 ) 
      ( 20 , 612 ) 
      ( 21 , 608 ) 
      ( 22 , 596 ) 
      ( 23 , 568 ) 
      ( 24 , 566 ) 
      ( 25 , 560 ) 
      ( 26 , 547 ) 
      ( 27 , 546 ) 
      ( 28 , 544 ) 
      ( 29 , 540 ) 
      ( 30 , 535 ) 
      ( 31 , 520 ) 
      ( 32 , 506 ) 
      ( 33 , 501 ) 
      ( 34 , 487 ) 
      ( 35 , 480 ) 
      ( 36 , 478 ) 
      ( 37 , 472 ) 
      ( 38 , 469 ) 
      ( 39 , 458 ) 
      ( 40 , 457 ) 
      ( 41 , 456 ) 
      ( 42 , 449 ) 
      ( 43 , 410 ) 
      ( 44 , 407 ) 
      ( 45 , 403 ) 
      ( 46 , 402 ) 
      ( 47 , 401 ) 
      ( 48 , 395 ) 
      ( 49 , 390 ) 
      ( 50 , 388 ) 
      ( 51 , 387 ) 
      ( 52 , 385 ) 
      ( 53 , 381 ) 
      ( 54 , 379 ) 
      ( 55 , 378 ) 
      ( 56 , 374 ) 
      ( 57 , 362 ) 
      ( 58 , 360 ) 
      ( 59 , 360 ) 
      ( 60 , 357 ) 
      ( 61 , 356 ) 
      ( 62 , 354 ) 
      ( 63 , 352 ) 
      ( 64 , 352 ) 
      ( 65 , 340 ) 
      ( 66 , 339 ) 
      ( 67 , 333 ) 
      ( 68 , 332 ) 
      ( 69 , 329 ) 
      ( 70 , 327 ) 
      ( 71 , 324 ) 
      ( 72 , 322 ) 
      ( 73 , 314 ) 
      ( 74 , 303 ) 
      ( 75 , 298 ) 
      ( 76 , 295 ) 
      ( 77 , 279 ) 
      ( 78 , 277 ) 
      ( 79 , 270 ) 
      ( 80 , 262 ) 
      ( 81 , 261 ) 
      ( 82 , 261 ) 
      ( 83 , 260 ) 
      ( 84 , 260 ) 
      ( 85 , 252 ) 
      ( 86 , 247 ) 
      ( 87 , 247 ) 
      ( 88 , 241 ) 
      ( 89 , 240 ) 
      ( 90 , 239 ) 
      ( 91 , 225 ) 
      ( 92 , 222 ) 
      ( 93 , 220 ) 
      ( 94 , 219 ) 
      ( 95 , 218 ) 
      ( 96 , 218 ) 
      ( 97 , 213 ) 
      ( 98 , 208 ) 
      ( 99 , 202 ) 
      ( 100 , 201 ) 
      ( 101 , 201 ) 
      ( 102 , 199 ) 
      ( 103 , 192 ) 
      ( 104 , 191 ) 
      ( 105 , 184 ) 
      ( 106 , 180 ) 
      ( 107 , 169 ) 
      ( 108 , 159 ) 
      ( 109 , 157 ) 
      ( 110 , 157 ) 
      ( 111 , 156 ) 
      ( 112 , 152 ) 
      ( 113 , 151 ) 
      ( 114 , 149 ) 
      ( 115 , 148 ) 
      ( 116 , 146 ) 
      ( 117 , 145 ) 
      ( 118 , 143 ) 
      ( 119 , 141 ) 
      ( 120 , 123 ) 
      ( 121 , 120 ) 
      ( 122 , 120 ) 
      ( 123 , 119 ) 
      ( 124 , 119 ) 
      ( 125 , 114 ) 
      ( 126 , 110 ) 
      ( 127 , 101 ) 
      ( 128 , 101 ) 
      ( 129 , 99 ) 
      ( 130 , 98 ) 
      ( 131 , 97 ) 
      ( 132 , 94 ) 
      ( 133 , 93 ) 
      ( 134 , 91 ) 
      ( 135 , 88 ) 
      ( 136 , 88 ) 
      ( 137 , 88 ) 
      ( 138 , 80 ) 
      ( 139 , 77 ) 
      ( 140 , 76 ) 
      ( 141 , 76 ) 
      ( 142 , 73 ) 
      ( 143 , 71 ) 
      ( 144 , 71 ) 
      ( 145 , 67 ) 
      ( 146 , 59 ) 
      ( 147 , 59 ) 
      ( 148 , 55 ) 
      ( 149 , 53 ) 
      ( 150 , 53 ) 
      ( 151 , 36 ) 
      ( 152 , 36 ) 
      ( 153 , 33 ) 
      ( 154 , 27 ) 
      ( 155 , 26 ) 
      ( 156 , 21 ) 
      ( 157 , 14 ) 
      ( 158 , 11 )
    %/geogebra

        %output,preserve="false"
          GeoGebra updated.
        %/output






   

%mathpiper

//Compare two users to see how many friends they have in common.
Length(Intersection(sorted[90][2], sorted[92][2]) );

%/mathpiper

    %output,preserve="false"
      Result: 1
    %/output




%mathpiper
//
%/mathpiper
   
      


