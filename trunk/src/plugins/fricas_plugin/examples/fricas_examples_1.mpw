v 1.00. Author: Ralf Hemmecke.
Before executing any folds, make sure you have set the path to the CAS executable
in the Plugins -> Plugin Options -> FriCAS menu.  Then, place the cursor in a fold
and press <shift><enter> to execute it.




%_fricas,title=""
1+1 
%/_fricas




        	


%_fricas,title=""
1-1
%/_fricas


 
        	




%_fricas,title=""
-1 
%/_fricas


        	


The FriCAS interpreter guesses the most appropriate type. For simple things types do not matter much.

Apart from the above integer domains, there are rational numbers and floting point numbers, complex integers, complex floats, etc.

%_fricas,title=""
2/3 
%/_fricas


        	



%_fricas,title=""
3/6 
%/_fricas



        	



%_fricas,title=""
2/3 + 1/5 * (- 2/11)
%/_fricas


 
        	



%_fricas,title=""
2^10 
%/_fricas


        	


%_fricas,title=""
factorial(100) 
%/_fricas



        	


By default 20 digits are used for floting point computation.

%_fricas,title=""
2/3 + 1.0 
%/_fricas



        	


By using the digits function, one can query and set the number of digits that are used during the computation.

By default, a fraction is expressed in the most appropriate domain, which would be Fraction(Integer). Coercion into the appropriate type is done via the :: operator.

%_fricas,title=""
digits 40 
22/7 :: Float 
digits(20) 
22/7 :: Float 
%/_fricas



        	


A number that contains a dot, is automatically a member of the floating point domain. So the following fraction is computed within the respective domain, namely, Float.

%_fricas,title=""
22/7.0 
%/_fricas





%_fricas,title=""
sqrt(2.0)
%/_fricas


 
        	


For integer arguments, it is not clear what the user actually wants. So the expression remains unevaluated.

Note that we get AlgebraicNumber as yet another number type.

%_fricas,title=""
sqrt(3)
%/_fricas


 
        	

AlgebraicNumber

In fact, AlgebraicNumber is a step into the direction of computing with symbols rather than just numbers.

%_fricas,title=""
sqrt(2)+sqrt(3)
%/_fricas


 
        	



FriCAS can also deal with complex numbers. The symbol %i denotes the imaginary unit. Here we have Gaussian integers.

%_fricas,title=""
2+3*%i 
%/_fricas



        	



As with integers, the resulting type is appropriately chosen, i.e. "complex rational numbers".

%_fricas,title=""
(2 + 3*%i) / (3 + 5*%i)
%/_fricas


 


As with real numbers where Float is the corresponding domain in FriCAS, complex numbers can only be modelled approximately on a computer.

%_fricas,title=""
sqrt(2.0) * (1 + 2.0*%i)
%/_fricas


 
        	



Not everything can be done with floating point numbers. FriCAS does not automatically extend the number domain from real numbers to complex numbers. 
It rather considers Float as a domain with partial operations, i.e. operations that might fail on certain input.

%_fricas,title=""
sqrt(5.0) 
sqrt(-5.0)
%/_fricas


 
        	



But we can convert an algebraic number into a complex floating point number.

%_fricas,title=""
sqrt(-5) 
sqrt(-5) :: Complex(Float) 
%/_fricas



        	



There are a lot of functions that can be used with floating point numbers.

Note that % is an abbreviation of "this domain", i.e. Float in our case. The question mark is just used as a placeholder for an argument.

%_fricas,title=""
)show Float 
%/_fricas



        	



FriCAS can be used as a numerical engine.

%_fricas,title=""
tan(sin(1.0)*exp(3.5)) 
%/_fricas



        	



%_fricas,title=""
log(abs(-3.0*sin(2*3.1415))) 
%/_fricas



        	


Referring to previous results

FriCAS uses % to refer to the previous result. Using %%(n) with a positive integer n, refers to the n-th computed output, 
while the expression %%(-n) counts from the current line number backwards and refers to this output.

%_fricas,title=""
11 
%/_fricas



        	



%_fricas,title=""
22 
%/_fricas



        	


%_fricas,title=""
% 
%/_fricas



        	



%_fricas,title=""
%%(-3)
%/_fricas


 
        	


%_fricas,title=""
%%(3)
%/_fricas


 
        	



Computation with symbols

Entering variables is as easy as in most other CAS.

%_fricas,title=""
4*x^2+4*x+1
%/_fricas


 
        	


Note that the resulting domain is not Polynomial(Integer).

%_fricas,title=""
factor(%) 
%/_fricas



        	



The domain Factored(X) keeps its elements in a factored form as long as possible.

%_fricas,title=""
factor((x^2-1))
%/_fricas


 
        	



%_fricas,title=""
%*(x-1)
%/_fricas


 
        	



%_fricas,title=""
%+1
%/_fricas


 
        	



But since factorization is costly, elements are not automatically factored.

Delaying computation to the time when an actual result is needed is usually a good idea, since working symbolically with the operations can save computational effort.

%_fricas,title=""
%-1
%/_fricas


 
        	



%_fricas,title=""
factor % 
%/_fricas



        	



FriCAS knows about the standard mathematical functions. And can do computations with them.

%_fricas,title=""
sin(x)*exp(x) 
%/_fricas



        	



Some mathematical constants and their properties are built-in.

%_fricas,title=""
%e 
%/_fricas



        	



%_fricas,title=""
%pi
%/_fricas


 
        	



%_fricas,title=""
%e^(%pi * %i) 
%/_fricas



        	



Expressions vs. specific types

Eagerness of evaluation of an expression depends on its type. In fact, each type defines a certain normal form and the expression is simply stored in this form.

%_fricas,title=""
(x^100 + 1)*(x^100-1)
%/_fricas


 
        	



%_fricas,title=""
(x^50-1)/(x-1) 
%/_fricas



        	



The domain Expression(Integer) is similar to the way expressions are stored in other computer algebra systems.

If FriCAS does not find a more appropriate interpretation for an expresssion, the expression often ends up in being of type Expression(Integer).

%_fricas,title=""
sin(%pi/3)
%/_fricas


 
        	



%_fricas,title=""
sin(x)^2 + cos(x)^2 
%/_fricas



        	


Some expressions are not automatically simplified.

%_fricas,title=""
simplify(%)
%/_fricas


 
        	



In some cases, it is simply not clear what a "simpler expression" actually means.

%_fricas,title=""
simplify(sin(2*x)) 
%/_fricas



        	



%_fricas,title=""
simplify(2*sin(x)*cos(x))
%/_fricas


 
        	



Variables, Assignments, Equations, Declarations

In addition to accessing previoiusly computed values via the %%(n) mechanism, intermediate results can also be stored in variables.

%_fricas,title=""
a := 1/3 + 22/7
%/_fricas


 
        	



%_fricas,title=""
a
%/_fricas



        	



Assignment is done via :=. A simple = sign just creates an equation.

%_fricas,title=""
A = 1/3 + 22/7 
%/_fricas



        	



FriCAS is case-sensitive.

%_fricas,title=""
A 
%/_fricas



        	



%_fricas,title=""
A = lhs(%%(-2))
%/_fricas


 
        	



In order to see whether an equation is true or false, we must turn it into a boolean.

%_fricas,title=""
%::Boolean
%/_fricas


 
        	



%_fricas,title=""
(A=10)::Boolean
%/_fricas


 
        	



The type of a variable can be declared in advance. Its type is then fixed for the whole session.

%_fricas,title=""
v: PositiveInteger
%/_fricas


 
        	



%_fricas,title=""
v := 1/2 
%/_fricas



        	




If a variable has been declared, it is no longer automatically converted to an indeterminate that can be used in an expression.

%_fricas,title=""
5*v
%/_fricas


 
        	

 


One would have to prepend an apostroph to refer to a symbol of that name.

%_fricas,title=""
5 * 'v
%/_fricas


 
        	



Only values that belong to the respective type can be assigned to the variable.

%_fricas,title=""
v := -1
%/_fricas


 
        	



%_fricas,title=""
v := 1
%/_fricas


 
        	



Functions

Functions, are first class objects, they can be assigned to variables and can be used as arguments of functions.

The operator +-> is used to created anonymous functions, i.e. lambda expressions.

%_fricas,title=""
f := x +-> sin(x)*exp(x)
%/_fricas


 
        	



%_fricas,title=""
f(%pi/3) 
%/_fricas



        	



Simply using an expression in a functional way makes no sense.

%_fricas,title=""
g := sin(x)*exp(x)
%/_fricas


 
        	



%_fricas,title=""
g(%pi/2)
%/_fricas


 
        	




%_fricas,title=""
eval(g, x=%pi/2) 
%/_fricas



        	



Declaring the type of a function explicitly, restricts the way the function can be used.

%_fricas,title=""
f1: Integer -> Integer 
%/_fricas



        	


%_fricas,title=""
f1 := x +-> gcd(x,x+6) 
%/_fricas



        	



%_fricas,title=""
f1(18)
%/_fricas


 
        	



%_fricas,title=""
f1(2.3) 
%/_fricas



        	



Functions can also be defined via the "delayed assignment" using ==.

%_fricas,title=""
f2(x: Integer): String == reverse(string(x))
%/_fricas


 
        	



Functions will automatically be compiled to machine code, the first time they are used.

%_fricas,title=""
f2(123453) 
%/_fricas



        	



The function cannot be applied to strings, because that would require the string to be converted into an integer.

%_fricas,title=""
f2("FriCAS") 
%/_fricas



        	



Multivariate function definitions are no problem.

%_fricas,title=""
f3(x,y,z) == (x+2*y)*z 
%/_fricas



        	



%_fricas,title=""
f3(3,4,2)
%/_fricas


 
        	



%_fricas,title=""
f3(3.2,4.1,2) 
%/_fricas



        	




