// :indentSize=4:lineSeparator=\n:noTabs=false:tabSize=4:folding=explicit:collapseFolds=0:
//Copyright (C) 2008 Ted Kosan
/* {{{ License.
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */ //}}}


void remove_output_folds()
{
	
	//Test for read only files.
	if(buffer.isReadOnly())
	{
		Macros.error(view, "This file is read only.");
		return;
	}
	
		lineCount = buffer.getLineCount();
		
		//System.out.println("VVVV " + lineCount);
	
		stack = new java.util.Stack();
		
		for(int lineNumber = 1; lineNumber < lineCount; lineNumber++)
		{
			//System.out.println("TTTTT " + buffer.getLineText(lineNumber));
			
			if(buffer.isFoldStart(lineNumber))
			{
				
				if(buffer.getLineText(lineNumber).trim().contains("preserve=\"false\"")) //startsWith("%output"))
				{
					//System.out.println("SSSSS" + buffer.getLineText(lineNumber));
					
					foldType = buffer.getLineText(lineNumber).split(",")[0];
					
					foldInfo = new java.util.ArrayList();
					foldInfo.add(foldType);
					foldInfo.add(buffer.getLineStartOffset(lineNumber));
					//inOutputFold = true;
					stack.push(foldInfo);
				}
				
			}
			
			if(buffer.isFoldEnd(lineNumber) && ! stack.empty() )
			{
				if(buffer.getLineText(lineNumber).trim().contains("%/"))//startsWith("%/output"))
				{
					//System.out.println("EEEEEE" + buffer.getLineText(lineNumber));
					//inOutputFold = false;
					
					startFoldInfo = stack.pop();
					
					startFoldType = foldInfo.get(0);
					foldStartOffset = foldInfo.get(1);
					
					endFoldType = buffer.getLineText(lineNumber);
					if(endFoldType.charAt(0) == '.')
					{
						endFoldType = endFoldType.substring(1,endFoldType.length());
						endFoldType =" " + endFoldType;
					}
					endFoldType = endFoldType.split(",")[0];
					endFoldType = endFoldType.replace("/","");
					
					if(endFoldType.equalsIgnoreCase(startFoldType) )
					{
						foldEndOffset = buffer.getLineEndOffset(lineNumber);
						buffer.remove(foldStartOffset, foldEndOffset - foldStartOffset);
						lineCount = buffer.getLineCount();
						lineNumber = 1;
					}
					else
					{
						stack.push(startFoldInfo);
					}
				}//end if.
			}//end if.
		}//end for
	
}//end.

remove_output_folds();
