//Run the yacas script that is in the current buffer.

import org.mathrider.jyacasplugin.JYacasInterpreter;
import java.io.File;
import java.io.BufferedWriter;
import org.gjt.sp.jedit.textarea.Selection.Range;
import org.gjt.sp.jedit.textarea.Selection;

buffer.save(view,null);

path = buffer.getPath();


if(path.endsWith(".ys")){
	
	//Remove Windows drive letter from the path.
	if(path.indexOf(":") != -1){
		path = path.split(":")[1];
		
		//Chance window's backslashes to forward slashes.
		path = path.replace("\\","/");
		//System.out.println(path);
	}
		
	runCommandInConsole(view,"JYacas","Load(\""+path+"\");");
	//interpreter=JYacasInterpreter.getInstance();
	

	//result = interpreter.evaluate("Load(\""+path+"\");");
	
	//System.out.println(result);
}else if (path.endsWith(".mrn")){
	textArea.selectFold();
	fold  = textArea.getSelection()[0];
	foldStart = fold.getStart();
	foldEnd = fold.getEnd();
	codeStartLine = fold.getStartLine()+1;
	codeEndLine = fold.getEndLine()-1;
	codeStartIndex = fold.getStart(textArea.getBuffer(),codeStartLine);
	codeEndIndex = fold.getEnd(textArea.getBuffer(),codeEndLine);
	codeSelection = new Range(codeStartIndex, codeEndIndex);
	textArea.setSelection(codeSelection);

	
	allFoldText = textArea.getSelectedText().replaceAll("\\s+$", "");
	//replaceAll("^\\s+", "");Remove whitespace at end of string.
	//replaceAll("\\s+$", "");Remove whitespace at beginning of string.
	
	textArea.setSelection(null);  
//	
//	//text = text.substring(3,text.length()-3);
//	
	//Do not include subfold as code.
	subFoldIndex = allFoldText.indexOf("{{{");
	if(subFoldIndex != -1)
	{
		codeText = allFoldText.substring(0,subFoldIndex).replaceAll("\\s+$", "");
	}
	else
	{
		codeText = allFoldText;
	}
	
	//System.out.println("YYYY: " + codeText);

//	noCrLf = text.replace("\n","").replace("\r","");
	isolatedCodeLength = codeText.length();
	isolatedCodeEndIndex = codeStartIndex + isolatedCodeLength;
	
	textArea.setCaretPosition(isolatedCodeEndIndex);

	
	try {
        // Create temp file.
        File tempFile = File.createTempFile("mathrider", ".mrn_tmp");
    
        // Delete temp file when program exits.
        tempFile.deleteOnExit();
    
        // Write to temp file
        BufferedWriter out = new BufferedWriter(new FileWriter(tempFile));
        out.write(codeText);
        out.close();
		

    		
		//Obtain fold type.
		
		
		
		
		if(true)
		{
			//JYacas section.
			interpreter = JYacasInterpreter.getInstance();
			
			result = "";
			status = "";
			try 
			{   
				tempFilePath = tempFile.getAbsolutePath();
				
				//Remove Windows drive letter from the path.
				if(tempFilePath.indexOf(":") != -1){
					tempFilePath = tempFilePath.split(":")[1];
			
					//Change window's backslashes to forward slashes.
					tempFilePath = tempFilePath.replace("\\","/");
				}//end if
			
				//System.out.println(tempFilePath);
        	
				result = interpreter.evaluate("Load(\""+tempFilePath+"\");");
	//Sy	stem.out.println("Out> " + result);
				
					
			}catch(net.sf.yacas.Yacasexception ye) 
			{
				result = ye.getMessage();
				status = "Error:";
			}
			
			
			if(result != null )
			{
				
				if(result.startsWith("True:"))
				{
					result = result.substring(5,result.length());//Remove True: which is returned by Load.
				}
				else if (result.startsWith("True"))
				{
					result = result.substring(4,result.length());//Remove True which is returned by Load.
				}
					
				
				status = "Output:";
				//System.out.println("Out> " + result);
				
				
				//Determine how many lines are in the result.
				numberOfLines = 0;
				charIndex = 0;
				while(charIndex != result.length()){
					if(result.charAt(charIndex) == "\n"){
						numberOfLines++;
					}
					charIndex++;
				}//end while
				
				
				//Make room at the end of the current fold for output and place output there.
				currentCaretPosition = textArea.getCaretPosition();
        	
        	
				rangeSelection = new Range(isolatedCodeEndIndex, codeEndIndex);
				
				textArea.setSelection(rangeSelection);
				
				result = result.trim();
				
			
				void displayResult()
				{
					//Buffer update needs to be done later in the AWT thread because of needing
					// to wait for the buffer to be saved (which was requested earlier).
					void run()
					{
				
						result = result.replaceAll("\n","\n      ");
						textArea.setSelectedText("\n\n     {{{" + status + "\n      "+ result + "\n     }}}\n",false);
				 
						textArea.setCaretPosition(currentCaretPosition);
						
						buffer.save(view,null);
					}
					VFSManager.runInAWTThread(this);
				
				}//end method.
				
				displayResult();
							
        	
			}//end if.
			
				
		}//end if.
		else if(true)
		{
		}//end else
    } 
	catch (IOException e) 
	{
		e.printStackTrace();
    }
	

	

}//end else if.
	


// :indentSize=4:lineSeparator=\n:noTabs=false:tabSize=4:folding=explicit:collapseFolds=1:
