%mathpiper

Use("org/mathpiper/assembledscripts/proposed.rep/xSolve.mpi");

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



%mathpiper,scope="private"

// a bunch of expressions for testing
expressions := {};
Push( expressions, 4 );
Push( expressions, -4 );
Push( expressions, 3*y^2 - Sin(Pi*y) );
Push( expressions, a*x+b*x^2 );
Push( expressions, -a*x+b*x^2 );
Push( expressions, -a*x-b*x^2 );
Push( expressions, +a*x+b*x^2 );
Push( expressions, a*x + b*x^2-c/x+d/x^2 );
Push( expressions, a1/(b1+c1*x^2) );
Push( expressions, x+Sin(x) );
Push( expressions, x-Sin(x) );
Push( expressions, a*x+Sin(x) );
Push( expressions, Sin(x)-x );
Push( expressions, Sqrt(x) );
Push( expressions, Sqrt(1/x) );
Push( expressions, Sqrt(1/(x^2+1)) );
Push( expressions, Sqrt((1-x)/(1+x)) );
Push( expressions, 1/x+1/x^2 );
Push( expressions, a/(x+1)+b/(x-1) );
Push( expressions, (1-x)^(3/2) );
Push( expressions, a*(x-3*x^2) );
Push( expressions, (x+2*x^3)/c );

nn := Length( expressions );
For( i:=1, i<=nn, i++ )
[
    f := PopBack( expressions );
    Echo("-------------------------------------------------------------------");
    Echo(">>> new expression: ",f);
    //r:=V(xTerms(f));
    r:=xTerms2(f);
    Echo({r});
];
%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      -------------------------------------------------------------------
      >>> new expression: 4 
      <<    1>> stack : {4} 
      {4} 
      -------------------------------------------------------------------
      >>> new expression: -4 
      <<    1>> stack : {-4} 
      {-4} 
      -------------------------------------------------------------------
      >>> new expression: 3*y^2-Sin(y*Pi) 
      <<    3>> stack : {-,3*y^2,Sin(y*Pi)} 
      {-,3*y^2,Sin(y*Pi)} 
      -------------------------------------------------------------------
      >>> new expression: a*x+b*x^2 
      <<    3>> stack : {+,a*x,b*x^2} 
      {+,a*x,b*x^2} 
      -------------------------------------------------------------------
      >>> new expression: b*x^2-a*x 
      <<    3>> stack : {-,b*x^2,a*x} 
      {-,b*x^2,a*x} 
      -------------------------------------------------------------------
      >>> new expression: -(a*x+b*x^2) 
      <<    2>> stack : {-,a*x+b*x^2} 
      {-,a*x+b*x^2} 
      -------------------------------------------------------------------
      >>> new expression: a*x+b*x^2 
      <<    3>> stack : {+,a*x,b*x^2} 
      {+,a*x,b*x^2} 
      -------------------------------------------------------------------
      >>> new expression: a*x+b*x^2-c/x+d/x^2 
      <<    3>> stack : {+,a*x+b*x^2-c/x,d/x^2} 
      {+,a*x+b*x^2-c/x,d/x^2} 
      -------------------------------------------------------------------
      >>> new expression: a1/(b1+c1*x^2) 
      <<    3>> stack : {/,a1,b1+c1*x^2} 
      {/,a1,b1+c1*x^2} 
      -------------------------------------------------------------------
      >>> new expression: x+Sin(x) 
      <<    3>> stack : {+,x,Sin(x)} 
      {+,x,Sin(x)} 
      -------------------------------------------------------------------
      >>> new expression: x-Sin(x) 
      <<    3>> stack : {-,x,Sin(x)} 
      {-,x,Sin(x)} 
      -------------------------------------------------------------------
      >>> new expression: a*x+Sin(x) 
      <<    3>> stack : {+,a*x,Sin(x)} 
      {+,a*x,Sin(x)} 
      -------------------------------------------------------------------
      >>> new expression: Sin(x)-x 
      <<    3>> stack : {-,Sin(x),x} 
      {-,Sin(x),x} 
      -------------------------------------------------------------------
      >>> new expression: Sqrt(x) 
      <<    2>> stack : {Sqrt,x} 
      {Sqrt,x} 
      -------------------------------------------------------------------
      >>> new expression: Sqrt(1/x) 
      <<    2>> stack : {Sqrt,1/x} 
      {Sqrt,1/x} 
      -------------------------------------------------------------------
      >>> new expression: Sqrt(1/(x^2+1)) 
      <<    2>> stack : {Sqrt,1/(x^2+1)} 
      {Sqrt,1/(x^2+1)} 
      -------------------------------------------------------------------
      >>> new expression: Sqrt((1-x)/(x+1)) 
      <<    2>> stack : {Sqrt,(1-x)/(x+1)} 
      {Sqrt,(1-x)/(x+1)} 
      -------------------------------------------------------------------
      >>> new expression: 1/x+1/x^2 
      <<    3>> stack : {+,1/x,1/x^2} 
      {+,1/x,1/x^2} 
      -------------------------------------------------------------------
      >>> new expression: a/(x+1)+b/(x-1) 
      <<    3>> stack : {+,a/(x+1),b/(x-1)} 
      {+,a/(x+1),b/(x-1)} 
      -------------------------------------------------------------------
      >>> new expression: (1-x)^(3/2) 
      <<    3>> stack : {^,1-x,3/2} 
      {^,1-x,3/2} 
      -------------------------------------------------------------------
      >>> new expression: a*(x-3*x^2) 
      <<    3>> stack : {*,a,x-3*x^2} 
      {*,a,x-3*x^2} 
      -------------------------------------------------------------------
      >>> new expression: (x+2*x^3)/c 
      <<    3>> stack : {/,x+2*x^3,c} 
      {/,x+2*x^3,c}
.   %/output


