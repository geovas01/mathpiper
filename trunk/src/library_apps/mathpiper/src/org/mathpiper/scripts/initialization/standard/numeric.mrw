%mathpiper,def="true"

/* def file definitions
N
NonN
InNumericMode
InVerboseMode

*/

/* Implementation of numeric mode */
LocalSymbols(Numeric) [
  Set(Numeric,False);



  // evaluate numerically with given precision
  LocalSymbols(prev'Numeric, prev'digits, numeric'result) Macro("N",{expr,digits})
  [ // we were in non-numeric mode
      Local(prev'Numeric, prev'digits, numeric'result,errorString);
      Set(prev'digits, BuiltinPrecisionGet());
      BuiltinPrecisionSet(@digits);
      AssignCachedConstantsN();
      Set(prev'Numeric,Numeric);
      Set(Numeric, True);
      Set(errorString,"");
      TrapError(Set(numeric'result, Eval(@expr)),Set(errorString,GetCoreError()));
      Set(Numeric,prev'Numeric);
      If(Not Numeric,[
          // clear constants
          ClearCachedConstantsN();
      ]);
      BuiltinPrecisionSet(prev'digits);
      Check(errorString="",errorString);
      numeric'result;
  ];

  LocalSymbols(dig,ex) Macro("N",{expr})
  [
    Local(dig,ex);
    Set(dig,BuiltinPrecisionGet());
    Set(ex,Hold(@expr));
    `N(@ex,@dig);
  ];

 

  LocalSymbols(result) Macro("NonN",{expr})
  [
    Local(result);
    GlobalPush(Numeric);
    Numeric := False;
    result := (@expr);
    Numeric := GlobalPop();
    result;
  ];

  Function("InNumericMode",{}) Numeric;

]; //LocalSymbols(Numeric)

%/mathpiper