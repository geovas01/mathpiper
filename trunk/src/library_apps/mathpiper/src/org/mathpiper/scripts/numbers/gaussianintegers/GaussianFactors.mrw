%mathpiper,def="true"

/* GaussianFactors(n) : returns a list of factors of n, in a similar
way to Factors(n).
If n is a rational integer, we factor n in the Gaussian integers, by first
factor it in the rational integers, and after that factoring each of
its integer prime factors. */

10 # GaussianFactors(n_IsInteger) <--
[
 Local(ifactors,gfactors,p,alpha);
 ifactors := Factors(n);
 gfactors := {};
 ForEach(p,ifactors)
 [
   If (p[1]=2, [ DestructiveAppend(gfactors,{1+I,p[2]});
                 DestructiveAppend(gfactors,{1-I,p[2]}); ]);
   If (Mod(p[1],4)=3, DestructiveAppend(gfactors,p));
   If (Mod(p[1],4)=1, [ alpha := GaussianFactorPrime(p[1]);
                        DestructiveAppend(gfactors,{alpha,p[2]});
                        DestructiveAppend(gfactors,{Conjugate(alpha),p[2]});
                      ]);
 ];
gfactors;
];

/* If z is is a Gaussian integer, we find its possible Gassian prime factors,
by factoring its norm */

20 # GaussianFactors(z_IsGaussianInteger) <--
[
 Local(n,nfactors,gfactors,p);
  gfactors :={};
  n := GaussianNorm(z);
  nfactors := Factors(n);
  ForEach(p,nfactors)
  [
   If (p[1]=2, [ AddGaussianFactor(gfactors,z,1+I);]);
   If (Mod(p[1],4)=3, AddGaussianFactor(gfactors,z,p[1]));
   If (Mod(p[1],4)=1, [ Local(alpha);
                        alpha := GaussianFactorPrime(p[1]);
                        AddGaussianFactor(gfactors,z,alpha);
                        AddGaussianFactor(gfactors,z,Conjugate(alpha));
                      ]);
 ];
 gfactors;
];

%/mathpiper