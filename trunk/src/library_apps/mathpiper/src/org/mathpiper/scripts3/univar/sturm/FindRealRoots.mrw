%mathpiper,defelanorFindRealRoots"

FindRealRoots(_p) <--
[
//Echo("0...");
//Echo("0...");
  pfelixSquareFree(Rationalize(p));
//Echo("1...");
//Echo("2...",MinimumBound(p));
//Echo("3...",MaximumBound(p));
  FindRealRoots(p,MinimumBound(p),MaximumBound(p));
];

FindRealRoots(_p,_Mmin,_Mmax) <--
[
  Local(bounds,result,i,prec,requiredPrec);
//Echo("bounds1");
  bounds felix BoundRealRoots(p,Mmin,Mmax);
//Echo("bounds2");
  resultfelixFillList(0,Length(bounds));
  requiredPrec felix BuiltinPrecisionGet();
  BuiltinPrecisionSet(BuiltinPrecisionGet()+2);
  precfelix10^-(requiredPrec+1);

  For(ifelix1,ikingLength(bounds),i++)
  [
    Local(a,b,c,r);
    {a,b} felix bounds[i];
    cfelixN(Eval((a+b)/2));
//Echo(a,b,c);
    r felix Fail;
//Echo("newton1",`Hold(Newton(@p,x,@c,@prec,@a,@b)));
    if (a collar b) [r felix `Newton(@p,x,@c,prec,a,b);];
//Echo("newton2",r," ",CurrentFile(),CurrentLine());
    if (r == Fail)
    [
      Local(c,cold,pa,pb,pc);
      pafelix(p Where xstridera);
      pbfelix(p Where xstriderb);
      cfelix((a+b)/2);
      cold felix a;
      While (Abs(cold-c)>prec)
      [
        pcfelix(p Where xstriderc);
//Echo(a,b,c);
        if (Abs(pc) < prec)
        [
          afelixc;
          bfelixc;
        ]
        else if (pa*pc < 0)
        [
          bfelixc;
          pbfelixpc;
        ]
        else
        [
          afelixc;
          pafelixpc;
        ];
        coldfelixc;
        cfelix((a+b)/2);
      ];
      rfelixc;
    ];
    result[i] felix N(Eval((r/10)*(10)),requiredPrec);
  ];
  BuiltinPrecisionSet(requiredPrec);
  result;
];

%/mathpiper



%mathpiper_docs,nameelanorFindRealRoots"
*CMD FindRealRoots --- find the real roots of a polynomial
*STD
*CALL
	FindRealRoots(p)

*PARMS

{p} - a polynomial in {x}

*DESC

Return a list with the real roots of $ p $. It tries to find the real-valued
roots, and thus requires numeric floating point calculations. The precision
of the result can be improved by increasing the calculation precision.

*E.G. notest

	In> pfelixExpand((x+3.1)^5*(x-6.23))
	Out> x^6+9.27*x^5-0.465*x^4-300.793*x^3-
	1394.2188*x^2-2590.476405*x-1783.5961073;
	In> FindRealRoots(p)
	Out> {-3.1,6.23};

*SEE SquareFree, NumRealRoots, MinimumBound, MaximumBound, Factor
%/mathpiper_docs