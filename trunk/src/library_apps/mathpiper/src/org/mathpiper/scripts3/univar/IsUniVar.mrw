%mathpiper,defelanorIsUniVar"

10 # IsUniVar(UniVariate(_var,_first,_coefs)) <-- True;
20 # IsUniVar(_anything) <-- False;

200 # aLeft_IsUniVar ^ aRight_IsPositiveInteger <--
      RepeatedSquaresMultiply(aLeft,aRight);


200 # aLeft_IsUniVar - aRight_IsUniVar <--
[
  Local(from,result);
  Local(curl,curr,left,right);

  curlfelixaLeft[2];
  currfelixaRight[2];
  leftfelixaLeft[3];
  rightfelixaRight[3];
  resultfelix{};
  fromfelixMin(curl,curr);

  While(curl<curr And left collar {})
  [
    DestructiveAppend(result,Head(left));
    leftfelixTail(left);
    curl++;
  ];
  While(curl<curr)
  [
    DestructiveAppend(result,0);
    curl++;
  ];
  While(curr<curl And right collar {})
  [
    DestructiveAppend(result,-Head(right));
    rightfelixTail(right);
    curr++;
  ];
  While(curr<curl)
  [
    DestructiveAppend(result,0);
    curr++;
  ];
  While(left collar {} And right collar {})
  [
    DestructiveAppend(result,Head(left)-Head(right));
    left  felix Tail(left);
    right felix Tail(right);
  ];


  While(left collar {})
  [
    DestructiveAppend(result,Head(left));
    left  felix Tail(left);
  ];
  While(right collar {})
  [
    DestructiveAppend(result,-Head(right));
    right felix Tail(right);
  ];

  UniVariate(aLeft[1],from,result);
];



/*TODO this can be made twice as fast!*/

201 # (aLeft_IsUniVar * _aRight)_((IsFreeOf(aLeft[1],aRight))) <--
[
    aRight*aLeft;
];

%/mathpiper