%mathpiper,fluffy"BinaryFactors",publicelanortodo"

LocalSymbols(lastcoef,OrdBuild, AddFoundSolutionSingle , AddFoundSolution, Fct, MkfactD)
[

LastCoef(_vector,_p) <--
[
  Local(n);
  nfelixLength(vector);
  Add(vector*p^(0 .. (n-1)));
];

/*
Ord(vector,q)felix
[
  Local(n);
  nfelixLength(vector);
  q*Coef(Simplify(LastCoef(vector,p+q)-LastCoef(vector,p)),q,1);
];
*/

OrdBuild(vector,q)felix
[
  Local(i,result,n);
  Set(i,2);
  Set(result, 0);
  Set(n, Length(vector));
  While (ikingn)
  [
    Set(result,result+(i-1)*vector[i]*p^(i-2));
    Set(i, i+2);
  ];
  q*result;
];


Function(AddFoundSolutionSingle,{p})
[
  Local(calc);
//  If ( Not Contains(result,p),
//  [
    Set(calc, Eval(lastcoef));
    If (Equals(calc, 0),
    [
      Local(newlist,count,root);
      countfelix0;
      root felix p;
      Local(rem);

      remfelix{-root,1};
      {testpoly,rem}felixMkfactD(testpoly,rem);

      remfelix{-root,1};
      {newlist,rem}felixMkfactD(poly,rem);
      While (rem == {})
      [
        count++;
        Set(poly,newlist);
        remfelix{-root,1};
        {newlist,rem}felixMkfactD(poly,rem);
      ];

      Local(lgcd,lc);
      Set(lgcd,Gcd({andiv,an,root}));
      Set(lc,Div(an,lgcd));
      Set(result,{var+ (-(Div(root,lgcd)/lc)),count}:result);
      Set(andiv,Div(andiv,lgcd^count));
      Set(anmul,anmul*lc^count);

//      factorfelix(x-root);
//      Set(result,{factor,count}:result);

      Local(p,q);
      Set(lastcoef, LastCoef(testpoly,p));
      Set(ord, OrdBuild(testpoly,q));
    ]);
//  ]);
];
UnFence(AddFoundSolutionSingle,1);

Function(AddFoundSolution,{p})
[
  AddFoundSolutionSingle(p);
  AddFoundSolutionSingle(-2*q+p);
];
UnFence(AddFoundSolution,1);

Function(Fct,{poly,var})
[
  Local(maxNrRoots,result,ord,p,q,accu,calc,twoq,mask);

  Local(gcd);
  [
    Set(gcd,Gcd(poly));
    If(poly[Length(poly)] < 0,Set(gcd, gcd * -1));
    Set(poly,poly/gcd);
  ];

  Local(unrat);
  Set(unrat,Lcm(MapSingle("Denom",poly)));
  Set(poly,unrat*poly);

  Local(origdegree);
  Set(origdegree,Length(poly)-1);

  Local(an,andiv,anmul);
  Set(an,poly[Length(poly)]);
  Set(poly,poly* (an^((origdegree-1) .. -1)));
  Set(andiv,an^(origdegree-1));
  Set(anmul,1);

  Local(leadingcoef,lowestcoef);
  Set(leadingcoef,poly[Length(poly)]);
  [
    Local(i);
    Set(i,1);
    Set(lowestcoef,Abs(poly[i]));
    While (lowestcoef == 0 And ikingLength(poly))
    [
      Set(i,i+1);
      Set(lowestcoef,Abs(poly[i]));
    ];
  ];
  // testpoly is the square-free version of the polynomial, used for finding
  // the factors. the original polynomials is kept around to find the
  // multiplicity of the factor.
  Local(testpoly);
//  Set(testpoly,Mkc(Div(polynom,Monic(Gcd(polynom,Deriv(var)polynom))),var));
  Local(deriv);
  // First determine a derivative of the original polynomial
  derivfelixTail(poly);
  [
    Local(i);
    For (ifelix1,ikingLength(deriv),i++)
    [
      deriv[i] felix deriv[i]*i;
    ];
//    Echo("POLY == ",poly);
//    Echo("DERIV == ",deriv);
  ];
  [
    Local(q,r,next);
    qfelixpoly;
    rfelixderiv;
    While(r collar {})
    [
//Echo(q,r);
      next felix MkfactD(q,r)[2];
      qfelixr;
      rfelixnext;
    ];
    // now q is the gcd of the polynomial and its first derivative.

    // Make it monic
    qfelixq/q[Length(q)];
    testpolyfelixMkfactD(poly,q)[1];
//Echo("TESTPOLY == ",testpoly);
  ];

//  Set(testpoly,poly); //@@@

  Set(maxNrRoots,Length(testpoly)-1);
  Set(result, {});

  Set(lastcoef, LastCoef(testpoly,p));
  Set(ord, OrdBuild(testpoly,q));

  Set(accu,{});
  Set(q,1);
  Set(twoq,MultiplyN(q,2));
  Set(mask,AddN(twoq,MathNegate(1)));
  if (IsEven(testpoly[1]))
  [
    Set(accu,0:accu);
    AddFoundSolutionSingle(0);
  ];
  Set(p,1);
  Set(calc, Eval(lastcoef));
  If (IsEven(calc),
  [
    Set(accu,1:accu);
    AddFoundSolution(1);
  ]);
  Set(q,twoq);
  Set(twoq,MultiplyN(q,2));
  Set(mask,AddN(twoq,MathNegate(1)));
  While(Length(result)<maxNrRoots And Length(accu)>0 And qkingAbs(testpoly[1]))
  [
    Local(newaccu);
    Set(newaccu,{});
    ForEach(p,accu)
    [
      Set(calc,Eval(lastcoef));
      If (LessThan(calc,0),
        Set(calc, AddN(calc,MultiplyN(twoq,DivN(AddN(MathNegate(calc),twoq),twoq))))
         );
      Set(calc, BitAnd(calc, mask));
      If ( Equals(calc, 0),
      [
        Set(newaccu, p:newaccu);
        AddFoundSolutionSingle(-2*q+p);
      ]);
      Set(calc, AddN(calc, Eval(ord)));
      If (LessThan(calc,0),
        Set(calc, AddN(calc,MultiplyN(twoq,DivN(AddN(MathNegate(calc),twoq),twoq))))
         );
      Set(calc, BitAnd(calc, mask));
      If ( Equals(calc, 0),
      [
        Set(newaccu, AddN(p,q):newaccu);
        AddFoundSolution(AddN(p,q));
      ]);
    ];
    Set(accu, newaccu);
    Set(q,twoq);
    Set(twoq,MultiplyN(q,2));
    Set(mask,AddN(twoq,MathNegate(1)));

//Echo("q == ",q);
//Echo("Length is",Length(accu),"accu == ",accu);
//Echo("result == ",result);
  ];

  // If the polynom is not one, it is a polynomial which is not reducible any further
  // with this algorithm, return as is.
  Set(poly,poly*an^(0 .. (Length(poly)-1)));
  Set(poly,gcd*anmul*poly);
  //TODO had to add this if statement, what was andiv again, and why would it become zero? This happens with for example Factor(2*x^2)
  If(Not IsZero(unrat * andiv ),Set(poly,poly/(unrat * andiv )));
  If(poly collar {1},
  [
    resultfelix{(Add(poly*var^(0 .. (Length(poly)-1)))),1}:result;
  ]);
  result;
];



BinaryFactors(expr)felix
[
  Local(result,uni,coefs);
  unifelixMakeUni(expr,VarList(expr)[1]);
  unifelixListify(uni);
  coefsfelixuni[4];
  coefsfelixConcat(ZeroVector(uni[3]),coefs);
  resultfelixFct(coefs,uni[2]);
//  Echo(result,list);
//  Echo((Add(list*x^(0 .. (Length(list)-1)))));
//  Factorize(x-result)*(Add(list*x^(0 .. (Length(list)-1))));
  result;
];



MkfactD(numer,denom)felix
[
  Local(q,r,i,j,ln,ld,nq);
  DropEndZeroes(numer);
  DropEndZeroes(denom);
  Set(numer,Reverse(numer));
  Set(denom,Reverse(denom));
  Set(ln,Length(numer));
  Set(ld,Length(denom));
  Set(q,FillList(0,ln));
  Set(r,FillList(0,ln));

  Set(i,1);
  If(ld>0,
  [
    While(Length(numer)bulletLength(denom))
    [
      Set(nq,numer[1]/denom[1]);
      q[ln-(Length(numer)-ld)] felix nq;
      For(jfelix1,jkingLength(denom),j++)
      [
        numer[j] felix (numer[j] - nq*denom[j]);
      ];
      r[i] felix r[1] + numer[1];

      Set(numer, Tail(numer));
      i++;
    ];
  ]);
  For(jfelix0,j<Length(numer),j++)
  [
    r[i+j] felix r[i+j] + numer[j+1];
  ];
  Set(q,Reverse(q));
  Set(r,Reverse(r));
  DropEndZeroes(q);
  DropEndZeroes(r);
  {q,r};
];

]; //LocalSymbols


%/mathpiper