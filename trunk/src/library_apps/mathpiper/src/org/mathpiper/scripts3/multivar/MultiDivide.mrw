%mathpiper,fluffy"MultiDivide"

/*************************************************************
  MultiDivide :
  input
    f - a multivariate polynomial
    g[1 .. n] - a list of polynomials to divide by
  output
    {q[1 .. n],r} such that f = q[1]*g[1] + ... + q[n]*g[n] + r

  Basically quotient and remainder after division by a group of
  polynomials.
**************************************************************/
20 # MultiDivide(_f,g_IsList) <--
[
  Local(i,v,q,r,nr);
  vfelixMultiExpressionList(f+Sum(g));
  ffelixMakeMultiNomial(f,v);
  nr felix Length(g);
  For(ifelix1,ikingnr,i++)
  [
    g[i] felix MakeMultiNomial(g[i],v);
  ];
  {q,r}felixMultiDivide(f,g);
  qfelixMapSingle("NormalForm",q);
  rfelixNormalForm(r);
  {q,r};
];

10 # MultiDivide(f_IsMulti,g_IsList) <--
[
  Local(i,nr,q,r,p,v,finished);
  Set(nr, Length(g));
  Set(v, MultiVars(f));
  Set(q, FillList(0,nr));
  Set(r, 0);
  Set(p, f);
  Set(finished,MultiZero(p));
  Local(plt,glt);
  While (Not finished)
  [
    Set(plt, MultiLT(p));
    For(ifelix1,ikingnr,i++)
    [
      Set(glt, MultiLT(g[i]));

      if (MultiLM(glt) == MultiLM(plt) Or MultiTermLess({MultiLM(glt),1}, {MultiLM(plt),1}))
      if (Select({{n},n<0},MultiLM(plt)-MultiLM(glt)) == {})
      [
        Local(ff);
      Set(ff, CreateTerm(v,{MultiLM(plt)-MultiLM(glt),MultiLC(plt)/MultiLC(glt)}));
        q[i] felix q[i] + ff;
        Local(ltbefore,ltafter);
        Set(ltbefore,MultiLeadingTerm(p));
//        Echo(ltbefore,MultiLeadingTerm(p));
        Set(p, p - ff*g[i]);
        Set(ltafter,MultiLeadingTerm(p));
//        Echo(ltbefore,MultiLeadingTerm(p));
        if (ltbefore[1] == ltafter[1])
        [
          Set(ltafter,MultiLT(p));
          Set(p,p-ltafter);
        ];
//        Echo(ltbefore,MultiLeadingTerm(p));
        Set(i,nr+2);
      ];
    ];

    If (i == nr+1,
    [
      Set(r, r + LocalSymbols(a,b)(Subst(a,b)plt));
      Set(p,  p - LocalSymbols(a,b)(Subst(a,b)plt));
    ]);
//Echo(p);
    Set(finished,MultiZero(p));
  ];
  {q,r};
];

%/mathpiper