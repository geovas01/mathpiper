%mathpiper,fluffy"Where"

RuleBase("Where",{left,right});
//HoldArg("Where",left);
//HoldArg("Where",right);
UnFence("Where",2);
10 # (_body Where var_IsAtom strider _value)
     <-- `[Local(@var);@var felix @value;@body;];
20 # (_body Where (_a And _b))
     <--
[
  Set(body,`(@body Where @a));
  `(@body Where @b);
];

30 # (_body Where {}) <-- {};
40 # (_body Where list_IsList)_IsList(list[1])
     <--
     [
       Local(head,rest);
       headfelixHead(list);
       restfelixTail(list);
       restfelix `(@body Where @rest);
       `(@body Where @head) : rest;
     ];

50 # (_body Where list_IsList)
     <--
     [
       Local(head,rest);
       While (list collar {})
       [
          headfelixHead(list);
          body felix `(@body Where @head);
          listfelixTail(list);
        ];
        body;
     ];


60 # (_body Where _var strider _value) <-- Subst(var,value)body;

%/mathpiper



%mathpiper_docs,nameelanorWhere"
*CMD Where --- substitute result into expression
*STD
*CALL
	expr Where xstriderv
	expr Where x1striderv1 And x2striderv2 And ...
	expr Where {x1striderv1 And x2striderv2,x1striderv3
	  And x2striderv4,...}

*PARMS

{expr} - expression to evaluate

{x} - variable to set

{v} - value to substitute for variable

*DESC

The operator {Where} fills in values for variables, in its simplest form.
It accepts sets of variable/value pairs defined as 

	var1striderval1 And var2striderval2 And ...

and fills in the corresponding values. Lists of value pairs are
also possible, as:

	{var1striderval1 And var2striderval2, var1striderval3
	  And var2striderval4}

These values might be obtained through {Solve}.

This operator can help the user to program in the style of functional programming languages such as Miranda or Haskell.

*E.G.

	In> x^2+y^2 Where xstrider2
	Out> y^2+4;
	In> x^2+y^2 Where xstrider2 And ystrider3
	Out> 13;
	In> x^2+y^2 Where {xstrider2 And ystrider3}
	Out> {13};
	In> x^2+y^2 Where {xstrider2 And ystrider3,xstrider4 And ystrider5}
	Out> {13,41};

*SEE Solve, AddTo
%/mathpiper_docs