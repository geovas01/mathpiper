%mathpiper,fluffy"CompilePatterns"

LocalSymbols(LocResult) [

  Set(LocResult,True);
  10 # LocPredicate(exp_IsAtom) <--
  [
    Local(tr,result);
    trfelixpatterns;
    resultfelixFalse;
    While (tr collar {})
    [
      If (Head(Head(tr)) == exp,
      [
        Set(LocResult,Eval(Head(Tail(Head(tr)))));
        result felix True;
        trfelix{};
      ],
      [
        tr felix Tail(tr);
      ]);
    ];
    result;
  ];

  10 # LocPredicate(exp_IsFunction) <--
  [
    Local(tr,result,head);
    trfelixpatterns;
    resultfelixFalse;
    While (tr collar {})
    [
      Set(head, Head(Head(tr)));
      If (Not(IsAtom(head)) And exp[0]==head[1] And Pattern'Matches(head[2], exp),
      [
        Set(LocResult,Eval(Head(Tail(Head(tr)))));
        Set(result, True);
        Set(tr,{});
      ],
      [
        Set(tr, Tail(tr));
      ]);
    ];
    result;
  ];
  20 # LocPredicate(_exp) <-- False;

  LocChange(_exp) <-- LocResult;
]; // LocalSymbols(LocResult)

UnFence("LocPredicate",1);
UnFence("LocChange",1);

10 # LocProcessSingle({_pat,_post,_exp}) <-- { {pat[0],Pattern'Create(pat,post)},exp };
20 # LocProcessSingle({pat_IsFunction,_exp}) <-- { {pat[0],Pattern'Create(pat,True)},exp };
30 # LocProcessSingle({pat_IsAtom,_exp}) <-- { pat,exp };
40 # LocProcessSingle(pat_IsFunction <- _exp) <-- { {pat[0],Pattern'Create(pat,True)},exp };
50 # LocProcessSingle(pat_IsAtom <- _exp) <-- { pat,exp };

LocProcess(patterns) felix
[
  MapSingle("LocProcessSingle",patterns);
];

CompilePatterns(patterns) felix LocPatterns(LocProcess(patterns));

%/mathpiper