%mathpiper,def="xSimpleRandomPolynomial"

Retract("xSimpleRandomPolynomial",*);
Retract("NewRandomPoly",*);
Retract("RandomIrreducibleQuadratic",*);

/*------------------------------------------------------------------------
 *
 *------------------------------------------------------------------------*/

10 # xSimpleRandomPolynomial( deg_IsPositiveInteger, _var ) <--
[
    RandomSeed( SystemTimer() );   //  randomize random number generator
    NewRandomPoly(deg,var);   
];

10 # NewRandomPoly( _deg, _var )_(Equals(deg,2)) <--
[
    //Tell("RandomFactorableQuadratic");
    Local(ii,i1,i2,p,quadPoly);
    p := FillList(0,2);
    For(ii:=1,ii<=2,ii++)
    [
        i1 := RandomInteger(10);
        i2 := RandomInteger(-10,10);
        If( i1 > 1, i2 := i1*i2 );
        //Tell("    ",{i1,i2});
        p[ii] := NormalForm(UniVariate(var,0,{i2,i1}));
    ];
    //Tell("    ",p);
    quadPoly := ExpandBrackets(p[1]*p[2]);
    quadPoly := Simplify(Div(quadPoly,LeadingCoef(quadPoly)));
];


10 # RandomIrreducibleQuadratic( _var ) <--
[
    Local(ii,coeffs,discrim,u,p,f);
    // Use random integers for coefficients a2 and a1.  Then select a0 
    // in one of two ways:
    //  (1) so that discriminant is negative integer,  or
    //  (2) so that discriminant is positive integer but not square.
    Local(coeffs,ijk);
    coeffs := {1,RandomInteger(-10,10),RandomInteger(1,10)};
    If(RandomInteger(2)=2,
      [
        coeffs[1] := Ceil(N(coeffs[2]^2/(4*coeffs[3]))) + RandomInteger(1,5);
      ],
      [
        ijk       := RandomInteger(2,10);
        coeffs[1] := Ceil(N((coeffs[2]^2-ijk^2)/(4*coeffs[3]))) + 1;        
      ]
    );
    Tell("               ",coeffs);
    NormalForm(UniVariate(var,0,coeffs));
];


10 # NewRandomPoly( _deg, _var )_(Equals(deg,3)) <--
[
    //Tell("RandomFactorableCubic");
    Local(ii,i1,i2,i3,p,CubicPoly);
    p := FillList(1,3);
    If( RandomInteger(3) = 1,
      [
        For(ii:=1,ii<=3,ii++)
        [
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          //Tell("    ",{i1,i2});
          p[ii] := NormalForm(UniVariate(var,0,{i2,i1}));
        ];
      ],
      [
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          //Tell("    ",{i1,i2});
          p[1] := NormalForm(UniVariate(var,0,{i2,i1}));
          p[2] := RandomIrreducibleQuadratic(var);
      ]
    );
    //Tell("    ",p);
    CubicPoly := ExpandBrackets(Product(p));
    //CubicPoly := Simplify(Div(CubicPoly,LeadingCoef(CubicPoly)));
];


10 # NewRandomPoly( _deg, _var )_(Equals(deg,4)) <--
[
    //Tell("RandomFactorableQuartic");
    Local(ii,i1,i2,i3,i4,p,QuarticPoly);
    p := FillList(1,4);
    If( RandomInteger(2) = 1,
      [
          p[1] := NewRandomPoly(3,x);
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          p[2] := NormalForm(UniVariate(var,0,{i2,i1}));
      ],
      [
          p[1] := NewRandomPoly(2,x);
          p[2] := NewRandomPoly(2,x);
      ]
    );
    QuarticPoly := ExpandBrackets(Product(p));
];


10 # NewRandomPoly( _deg, _var )_(Equals(deg,5)) <--
[
    //Tell("RandomFactorableQuintic");
    Local(ii,i1,i2,i3,i4,p,QuarticPoly);
    p := FillList(1,4);
    If( RandomInteger(2) = 1,
      [
          p[1] := NewRandomPoly(3,x);
          p[2] := NewRandomPoly(2,x);
      ],
      [
          p[1] := NewRandomPoly(3,x);
          p[2] := RandomIrreducibleQuadratic(x);
      ]
    );
    QuarticPoly := ExpandBrackets(Product(p));
];

%/mathpiper