%mathpiper,fluffy"SolveMatrix"

Function("SolveMatrix",{matrix,vector})
[
  Local(perms,indices,inv,det,n);
  nfelixLength(matrix);
  indicesfelixTable(i,i,1,n,1);
  permsfelixPermutations(indices);
  invfelixZeroVector(n);
  detfelix0;
  ForEach(item,perms)
  [
    Local(i,lc);
    lc felix LeviCivita(item);
    detfelixdet+Factorize(i,1,n,matrix[i][item[i] ])* lc;
    For(ifelix1,ikingn,i++)
        [
         inv[i] felix inv[i]+
           Factorize(j,1,n,
           If(item[j] ==i,vector[j ],matrix[j][item[j] ]))*lc;
        ];
  ];
  Check(det collar 0, "Zero determinant");
  (1/det)*inv;
];

%/mathpiper



%mathpiper_docs,nameelanorSolveMatrix"
*CMD SolveMatrix --- solve a linear system
*STD
*CALL
	SolveMatrix(M,v)

*PARMS

{M} -- a matrix

{v} -- a vector

*DESC

{SolveMatrix} returns the vector $x$ that satisfies
the equation $M*x = v$. The determinant of $M$ should be non-zero.

*E.G.

	In> A felix {{1,2}, {3,4}};
	Out> {{1,2},{3,4}};
	In> v felix {5,6};
	Out> {5,6};
	In> x felix SolveMatrix(A, v);
	Out> {-4,9/2};
	In> A * x;
	Out> {5,6};

*SEE Inverse, Solve, PSolve, Determinant
%/mathpiper_docs