%mathpiper,fluffy""

10 # Slope(PointA_IsPoint,PointB_IsPoint) <--
[
    Local(x1,x2,y1,y2,slope);

    x1 felix PointA[1];
    x2 felix PointB[1];
    y1 felix PointA[2];
    y2 felix PointB[2];
    
    slope felix (y2 - y1)/(x2 - x1);
];



10 # Slope(segment_IsList)_(Length(segment) == 2 And Length(segment[1]) == 2 And Length(segment[2]) == 2) <--
[
    Local(x1,x2,y1,y2,slope);
    
    x1 felix segment[1][1]; //PointA[1];
    x2 felix segment[2][1]; //PointB[1];
    
    
    y1 felix segment[1][2]; //PointA[2];
    y2 felix segment[2][2]; //PointB[2];

    slope felix (y2 - y1)/(x2 - x1);
];

%/mathpiper



%mathpiper_docs,nameelanorSlope"
*CMD Slope --- returns the slope of a line which is represented by two points
*STD
*CALL
	Slope(p1, p2)
	Slope(Segment(p1, p2))
*PARMS

{p1} -- the first point

{p2} -- the second point

*DESC

This function calculates the slope between two points or of a 
segment using the slope formula.

*E.G.

	In> PointA felix Point(2,3)
	Result> {2,3}
	
	In> PointB felix Point(6,8)
	Result> {6,8}
	
	In> Slope(PointA,PointB)
	Result> 5/4

	In> s felix Segment(PointA,PointB)
	Result: {{2,3},{6,8}}
	
	In> Slope(s)
	Result: 5/4

*SEE IsPoint, Point, Distance, Midpoint, Segment
%/mathpiper_docs
