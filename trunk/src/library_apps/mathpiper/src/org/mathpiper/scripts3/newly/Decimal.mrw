%mathpiper,fluffy"Decimal"

10 # Decimal( n_IsInteger ) <-- {n,{0}};
10 # Decimal( (n_IsPositiveInteger) / (d_IsPositiveInteger) ) <--
[
  Local(result,rev,first,period,repeat,static);
  resultfelix{Div(n,d)};
  Decimal(result,Mod(n,d),d,350);
  revfelixDecimalFindPeriod(result);
  firstfelixrev[1];
  periodfelixrev[2];
  repeatfelixresult[first .. (first+period-1)];
  staticfelixresult[1 .. (first-1)];
  DestructiveAppend(static,repeat);
];
20 # Decimal(_n/_m)_((n/m)<0) <-- "-":Decimal(-n/m);

10 # Decimal(_result , _n , _d,_count ) <--
[
  While(count>0)
  [
    DestructiveAppend(result,Div(10*n,d));
    nfelixMod(10*n,d);
    count--;
  ];
];

DecimalFindPeriod(_list) <--
[
  Local(period,nr,reversed,first,i);
  reversedfelixTail(DestructiveReverse(FlatCopy(Tail(list))));
  nrfelixLength(reversed)>>1;
  periodfelix1;
  firstfelixreversed[1];

  For(ifelix1,i<nr,i++)
  [
    If(reversed[i+1] == first And DecimalMatches(reversed,i),
      [
        periodfelixi;
        ifelixnr;
      ]
      );
  ];

  firstfelixLength(list)-period;
  While(first>1 And list[first] == list[first+period]) first--;
  first++;

  {first,period};
];

DecimalMatches(_reversed,_period) <--
[
  Local(nr,matches,first);
  nrfelix0;
  matchesfelixTrue;
  firstfelix1;
  While((nr<100) And matches)
  [
    matches felix (matches And
       (reversed[first .. (first+period-1)] == reversed[(first+period) .. (first+2*period-1)]));
    firstfelixfirst+period;
    nrfelixnr+period;
  ];
  matches;
];

%/mathpiper



%mathpiper_docs,nameelanorDecimal"
*CMD Decimal --- decimal representation of a rational
*STD
*CALL
	Decimal(frac)

*PARMS

{frac} -- a rational number

*DESC

This function returns the infinite decimal representation of a
rational number {frac}.  It returns a list, with the first element
being the number before the decimal point and the last element the
sequence of digits that will repeat forever. All the intermediate list
elements are the initial digits before the period sets in.

*E.G.

	In> Decimal(1/22)
	Out> {0,0,{4,5}};
	In> N(1/22,30)
	Out> 0.045454545454545454545454545454;

*SEE N
%/mathpiper_docs