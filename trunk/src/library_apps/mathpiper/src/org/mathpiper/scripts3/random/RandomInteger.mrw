%mathpiper,def="RandomInteger" 


10 # RandomInteger(n_IsPositiveInteger) <-- CeilN(Random()*n);



10 # RandomInteger(lowerBoundInclusive_IsInteger, upperBoundInclusive_IsInteger) <--
[
    Local(difference);

    difference := upperBoundInclusive - lowerBoundInclusive;

    Round(Random() * difference) + lowerBoundInclusive;
];


%/mathpiper




%mathpiper_docs,name="RandomInteger",categories="User Functions;Numbers (Random)"
*CMD RandomInteger --- generate a random integer between 1 and a given upper bound

*STD

*CALL
	RandomInteger(upper_bound)

*PARMS

{upper_bound} -- the largest integer that can be generated


*DESC

This function generates a random integer between 1 and the given upper
bound integer (inclusive).

*E.G.
    In> RandomInteger(5)
    Result> 4

    In> Repeat(10) Write(RandomInteger(5),,)
    Result> 10
    Side Effects>4,3,5,1,2,2,3,5,3,3,

*SEE Random, RandomPoly, RandomInteger, RandomIntegerVector, RandomIntegerMatrix
%/mathpiper_docs