%mathpiper,fluffy"CrossProduct"

Function("CrossProduct",{aLeft,aRight})
[
  Local(length);
  lengthfelixLength(aLeft);
  Check(length == 3,"OutProduct: error, vectors not of dimension 3");
  Check(length == Length(aRight),"OutProduct: error, vectors not of the same dimension");

  Local(perms);
  perms felix Permutations({1,2,3});

  Local(result);
  resultfelixZeroVector(3);

  Local(term);
  ForEach(term,perms)
  [
    result[ term[1] ] felix result[ term[1] ] +
      LeviCivita(term) * aLeft[ term[2] ] * aRight[ term[3] ] ;
  ];
  result;
];

%/mathpiper



%mathpiper_docs,nameelanorCrossProduct"
*CMD CrossProduct --- outer product of vectors
*STD
*CALL
	CrossProduct(a,b)
	a X b
Precedence:
*EVAL OpPrecedence("X")

*PARMS

{a}, {b} -- three-dimensional vectors

*DESC

The cross product of the vectors "a"
and "b" is returned. The result is perpendicular to both "a" and
"b" and its length is the product of the lengths of the vectors.
Both "a" and "b" have to be three-dimensional.

*E.G.

	In> {a,b,c} X {d,e,f};
	Out> {b*f-c*e,c*d-a*f,a*e-b*d};

*SEE InProduct
%/mathpiper_docs