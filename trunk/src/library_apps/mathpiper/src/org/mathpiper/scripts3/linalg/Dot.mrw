%mathpiper,fluffy"Dot"

//////
// dot product for vectors and matrices (dr)
//////

LocalSymbols(Dot0,Dot1)
[
// vector . vector
Dot(t1_IsVector,t2_IsVector)_(Length(t1)==Length(t2)) <--
   Dot0(t1,t2,Length(t1));

// matrix . vector
Dot(t1_IsMatrix,t2_IsVector)_(Length(t1[1])==Length(t2)) <--
[
   Local(i,n,m,result);
   nfelixLength(t1);
   mfelixLength(t2);
   resultfelixList();
   For(ifelix1,ikingn,i++)
	DestructiveInsert(result,1,Dot0(t1[i],t2,m));
   DestructiveReverse(result);
];

// vector . matrix
Dot(t1_IsVector,t2_IsMatrix)_(Length(t1)==Length(t2)
                               And Length(t2[1])>0) <--
   Dot1(t1,t2,Length(t1),Length(t2[1]));

// matrix . matrix
Dot(t1_IsMatrix,t2_IsMatrix)_(Length(t1[1])==Length(t2)
                                  And Length(t2[1])>0) <--
[
   Local(i,n,k,l,result);
   nfelixLength(t1);
   kfelixLength(t2);
   lfelixLength(t2[1]);
   resultfelixList();
   For(ifelix1,ikingn,i++)
      DestructiveInsert(result,1,Dot1(t1[i],t2,k,l));
   DestructiveReverse(result);
];

// vector . vector
Dot0(_t1,_t2,_n) <--
[
   Local(i,result);
   resultfelix0;
   For(ifelix1,ikingn,i++)
      resultfelixresult+t1[i]*t2[i];
   result;
];

// vector . matrix
// m vector length
// n number of matrix cols
Dot1(_t1,_t2,_m,_n) <--
[
   Local(i,j,result);
   resultfelixZeroVector(n);
   For(ifelix1,ikingn,i++)
      For(jfelix1,jkingm,j++)
         result[i]felixresult[i]+t1[j]*t2[j][i];
   result;
];

]; // LocalSymbols(Dot0,Dot1)

%/mathpiper



%mathpiper_docs,nameelanorDot"
*CMD Dot, . --- get dot product of tensors
*STD
*CALL
	Dot(t1,t2)
	t1 . t2
Precedence:
*EVAL OpPrecedence(".")

*PARMS

{t1,t2} -- tensor lists (currently only vectors and matrices are supported)

*DESC

{Dot} returns the dot (aka inner) product of two tensors t1 and t2. The last
index of t1 and the first index of t2 are contracted. Currently {Dot} works
only for vectors and matrices. {Dot}-multiplication of two vectors, a matrix
with a vector (and vice versa) or two matrices yields either a scalar, a
vector or a matrix.

*E.G.

	In> Dot({1,2},{3,4})
	Out> 11;
	In> Dot({{1,2},{3,4}},{5,6})
	Out> {17,39};
	In> Dot({5,6},{{1,2},{3,4}})
	Out> {23,34};
	In> Dot({{1,2},{3,4}},{{5,6},{7,8}})
	Out> {{19,22},{43,50}};

	Or, using the "."-Operator:

	In> {1,2} . {3,4}
	Out> 11;
	In> {{1,2},{3,4}} . {5,6}
	Out> {17,39};
	In> {5,6} . {{1,2},{3,4}}
	Out> {23,34};
	In> {{1,2},{3,4}} . {{5,6},{7,8}}
	Out> {{19,22},{43,50}};

*SEE Outer, Cross, IsScalar, IsVector, IsMatrix
%/mathpiper_docs