%mathpiper,def="DefinePattern",private="true"

RuleBase("DefinePattern",{leftOperand, rightOperand, rulePrecedence, postPredicate});



Rule("DefinePattern",4,9,Equals(Type(leftOperand),"_"))
[
    DefinePattern(leftOperand[1], rightOperand, rulePrecedence, leftOperand[2]);
];



Rule("DefinePattern",4,10,True)
[
      Local(patternFlat,patternVariables, pattern, patternOperator, arg, arity);
      
      Set(patternFlat, Listify(leftOperand)); //Turn the pattern into a list.
      
      Set(patternVariables, Tail(patternFlat)); //Remove the function name from the list.
      
      Set(patternOperator,String(Head(patternFlat))); //Obtain the function name.
      
      Set(arity,Length(patternVariables)); //Obtain the arity of the function.
      
      DefLoadFunction(patternOperator);  //Load the function if it exists.
    
      /*
            If the function does not exist, create it.
      */
      If(Not(RuleBaseDefined(patternOperator,arity)),
         [
          MacroRuleBase(patternOperator,MakeVector(arg,arity));
         ]
        );
    
      Set(pattern,Pattern'Create(patternVariables,postPredicate));
    
      MacroRulePattern(patternOperator,arity,rulePrecedence, pattern)rightOperand;
    
      True;
];

%/mathpiper