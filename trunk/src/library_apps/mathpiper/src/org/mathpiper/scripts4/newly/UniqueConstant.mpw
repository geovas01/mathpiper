%mathpiper,def="UniqueConstant"

UniqueConstant() <--
[
  Local(result);
  result := String(LocalSymbols(C)(C));
  Atom(StringMidGet(2,Length(result)-1,result));
];

%/mathpiper



%mathpiper_docs,name="UniqueConstant",categories="User Functions;Variables"
*CMD UniqueConstant --- create a unique identifier
*STD
*CALL
	UniqueConstant()

*DESC

This function returns a unique constant atom each time you call
it. The atom starts with a C character, and a unique number is
appended to it.

*E.G.

	In> UniqueConstant()
	Out> C9
	In>  UniqueConstant()
	Out> C10

*SEE LocalSymbols

*CMD LocalSymbols --- create unique local symbols with given prefix
*STD
*CALL
	LocalSymbols(var1, var2, ...) body

*PARMS

{var1}, {var2}, ... -- atoms, symbols to be made local

{body} -- expression to execute

*DESC

Given the symbols passed as the first arguments to LocalSymbols a set of local
symbols will be created, and creates unique ones for them, typically of the
form {$<symbol><number>}, where {symbol} was the symbol entered by the user,
and {number} is a unique number. This scheme was used to ensure that a generated
symbol can not accidentally be entered by a user.

This is useful in cases where a guaranteed free variable is needed,
for example, in the macro-like functions ({For}, {While}, etc.).

*E.G. notest

	In> LocalSymbols(a,b)a+b
	Out> $a6+ $b6;

*SEE UniqueConstant
%/mathpiper_docs