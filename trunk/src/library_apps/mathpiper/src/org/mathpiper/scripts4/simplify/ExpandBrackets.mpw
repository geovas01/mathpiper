%mathpiper,def="ExpandBrackets"

//Retract("ExpandBrackets",*);

10 # ExpandBrackets(xx_IsZero) <-- 0;

20 # ExpandBrackets(xx_IsRationalFunction) <-- 
[
    Local(N,D);
    N := Add(ReassembleListTerms(DisassembleExpression(Numerator(xx))));
    D := Add(ReassembleListTerms(DisassembleExpression(Denominator(xx))));
    (N/D);
];

30 # ExpandBrackets(_xx) <--  Add(ReassembleListTerms(DisassembleExpression(xx)));


//ExpandBrackets(_xx) <-- SimpExpand(SimpImplode(SimpFlatten(xx)));
//ExpandBrackets(x) := NormalForm(MM(x));

%/mathpiper


    



%mathpiper_docs,name="ExpandBrackets",categories="User Functions;Polynomials (Operations)"
*CMD ExpandBrackets --- expand all brackets
*STD
*CALL
	ExpandBrackets(expr)

*PARMS

{expr} -- an expression

*DESC

This command tries to expand all the brackets by repeatedly using the
distributive laws $a * (b+c) = a*b + a*c$ and $(a+b) * c = a*c + b*c$.
It goes further than {Expand}, in that it expands all brackets.

*E.G.

In> Expand((a-x)*(b-x),x)
Result: x^2-(b+a)*x+a*b;
In> Expand((a-x)*(b-x),{x,a,b})
Result: x^2-(b+a)*x+b*a;
In> ExpandBrackets((a-x)*(b-x))
Result: a*b-x*b+x^2-a*x;

*SEE Expand
%/mathpiper_docs