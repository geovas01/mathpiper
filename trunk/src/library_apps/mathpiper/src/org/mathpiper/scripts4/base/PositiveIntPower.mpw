%mathpiper,def="PositiveIntPower",scope="private"

// first define the binary exponentiation algorithm, MathIntPower.
// Later, the PowerN function will be defined through IntPower and MathLn/ExpN. Note that ExpN uses IntPower.

// power x^n only for non-negative integer n
Defun("PositiveIntPower", {x,n})
[
  Local(result,unit);
  If(IsLessThan(n,0), False,
  [
	SetVariable(unit,1);	 // this is a constant, initial value of the power
	SetVariable(result, unit);
	If(IsEqual(n,0),unit,
	 If(IsEqual(n,1),x,
	  [
		While(IsGreaterThan(n,0))
		[
			If(
				IsEqual(BitAnd(n,1), 1),
//				If(
//					IsEqual(result,unit), // if result is already assigned
//					SetVariable(result, x), // avoid multiplication
					SetVariable(result, MultiplyN(result,x))
//				)
			);
			SetVariable(x, MultiplyN(x,x));
			SetVariable(n,ShiftRight(n,1));
		];
		result;
	  ]
	 )
	);
  ]);
];

%/mathpiper