%group

    %piper,output="geogebra"  //Note: make indent level of output one more level than the indent level of the fold.  
        Write(2+2);

        %geogebra
          4
        %end

    %end
        
%end


%beanshell
import java.io.*;
//Print the contents of the Piper script zip file.
 instance = org.mathrider.jpiperplugin.JPiperInterpreter.getInstance();
 scriptZip = instance.getScriptsZip();
 entries = scriptZip.entries();
 
 while( entries.hasMoreElements())
 {
    element = entries.nextElement();
    System.out.println("XXXXX " + element);
 }
 
 entry = scriptZip.getEntry("assoc.rep/code.pi");
 System.out.println("YYYYYY " + entry);
 
 fis = scriptZip.getInputStream(entry);
 //
        entry = entry.toString().replaceAll("/","-");
         // Create temp file.
        File tempFile = File.createTempFile(entry, ".pi");
    
        // Delete temp file when program exits.
        tempFile.deleteOnExit();
    
	//File originFile = new File("c:\\file1.txt");
    //File destinationFile = new File("c:\\file1.txt");
    //if (!originFile.exists() || destinationFile.exists()) {
      //return;
    //}
    try {
      byte[] readData = new byte[1024];
      //FileInputStream fis = new FileInputStream(originFile);
      FileOutputStream fos = new FileOutputStream(tempFile);
      int i = fis.read(readData);

      while (i != -1) {
        fos.write(readData, 0, i);
        i = fis.read(readData);
      }
      fis.close();
      fos.flush();
      fos.close();
    } catch (IOException e) {
      System.out.println(e);
    }//end try/catch.
    
    
    
    //textArea = org.gjt.sp.jedit.jEdit.createTextArea();
    
    activeView = org.gjt.sp.jedit.jEdit.getActiveView();
    
    //buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());
    
   // jf = new javax.swing.JFrame();
   // cf = jf.getContentPane();
   // cf.add(textArea);
   // jf.show();
   
   
				void delayDisplay()
				{
					//Buffer update needs to be done later in the AWT thread because of needing
					// to wait for the buffer to be saved (which was requested earlier).
					void run()
					{
						buffer = org.gjt.sp.jedit.jEdit.openFile(activeView, tempFile.getAbsolutePath());//

					}
					org.gjt.sp.jedit.io.VFSManager.runInAWTThread(this);
				
				}//end method.
				
	delayDisplay();

    %error 
      Sourced file: C:\DOCUME~1\Ted\LOCALS~1\Temp\mathrider49640.mws_tmp : Cannot access field: toString, on object: assoc.rep/code.pi entry .toString .replaceAll ( "/" , "-" )  Line: 33
    %end

%end


%piper
c := Sum(i,1,11,1/(i*(i+1)));
Write(V(N(c)));

f := 10/(10+1);
Write(N(f));

    %output
      11/12 10/11
    %end

%end

%piper
k := 10;
g := k/(k+1) + 1/((k+1) * ((k+1)+1));
h := (k+1) / (k+1)+1;
Write(g, h);

    %output
      11/12 2
    %end

%end

%piper
Set(e,2.71828182847786963038);
f(x) = N((.6*10^-6)* D(x) 40*(e^(-15000*x))*Sin(30000*x));
Write(f(x));

    %output
      6e-7*(40*2.71828182847786963038^(-15000*x)*30000*Cos(30000*x)+(-600000)*2.71828182847786963038^(-15000*x)*Sin(30000*x))
    %end

%end
f(x) := (.6*10^-6) *

%piper
Set(e,Exp(1));
a := (.6*10^-6) * N((.6*10^-6)* D(x) 40*(e^(-15000*x))*Sin(30000*x));
Write(a);

    %output
      (3.6e-7*(40*Exp(1)^(-15000*x)*30000*Cos(30000*x)+(-600000)*Exp(1)^(-15000*x)*Sin(30000*x)))/1000000
    %end

%end

%piper
Set(e,2.71828);
df := D(x) 40*e^(-15000*x)*Sin(30000*x);
Write(df);

    %output
      40*2.71828^(-15000*x)*30000*Cos(30000*x)+(-40)*2.71828^(-15000*x)*15000*Ln(2.71828)*Sin(30000*x)
    %end

%end

%piper
Write(25!);

    %output
      15511210043330985984000000
    %end

%end

%piper
b := (6*a + 5) / (a + 2);
Write(b);

    %output
      (6*a+5)/(a+2)
    %end

%end

%piper
c := 



;
d := k * e(k-1);
%end



%piper

e := 2.71828;
d(x) := N(Eval((0.6*10^-6) * D(x) 40*(e^(-15000*x))*Sin(30000*x) ));
y := d(0);
Write(y);

    %output
      0.72
    %end

%end







%piper,macro="P2D_GeoGebra"
f(a) := (6*a + 5)/(a+2);
b := 1;
ForEach(x,1 .. 10)
    [
        c := f(b);
        Write(N(Eval(c)));
        b := c;
    ];

    %output
      3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508
    %end

%end


%beanshell,name="P2D_GeoGebra",scope="global"


P2D_GeoGebra(str)
{
    vals = str.split(" ");
    
    x = 0;
    for(val:vals)
    {
        ggb.evalCommand("(" + x++ +"," + val + ")");
    }//end for.

    output(str);
    
}

data = "3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508";
P2D_GeoGebra(data);

    %output 
      3.66666666666666666667 4.76470588235294117647 4.96521739130434782609 4.99500624219725343321 4.99928609673389255756 4.99989800341688553433 4.99998542884723967725 4.99999791840241548584 4.99999970262882806839 4.99999995751840220508
    %end

%end


%piper,output="latex"
    /* This is a great example problem to use in MathRider.
    1) Enter expression.
    2) If it is a complicated expression, view it in LaTeX form to make sure it has been entered
    correctly.  In this problem, if parentheses are not placed around the exponents then then the
    expression is evaluated differently than if they are present.
    3) Adjust the expression until it is correct.
    */
    
    a :=((1-x^(2*k))/(1-x))*((1-x^(2*(k+1)))/(1-x));
    Write(a);

    %hoteqn
      $\frac{\left( 1 - x ^{2 \left( k + 1\right) }\right)  \left( 1 - x ^{2 k}\right) }{\left( 1 - x\right)  ^{2}} $
    %end

%end

%piper, output="latex"

Write(Simplify(a));

    %hoteqn
      $\frac{x ^{2 k + 2 \left( k + 1\right) } - x ^{2 \left( k + 1\right) } + 1 - x ^{2 k}}{x ^{2} - 2 x + 1} $

        %output
          HotEqn updated.
        %end

    %end

%end




%piper,output=""

    
    a := (((1-x^(2*k))/(1-x))*(1 + x^(2*(k+1)-1)));
    Write(Simplify(a));

    %output
      (x^(2*(k+1)-1)-x^(2*k+2*(k+1)-1)+1-x^(2*k))/(1-x)
    %end

%end



%piper,output=""

    
    a := Hold(((1-x^(2^k))/(1-x))*(1 + x^(2^((k+1)-1))));
    b := Hold((1-x^(2^(k+1)))/(1-x));
    Write(a:Eval(a):Simplify(a));
    //Write(TestPiper(a,b));

    %output
      (1-x^2^k)/(1-x)*(1+x^2^(k+1-1)):((x^2^k+1)*(1-x^2^k))/(1-x):(1-x^2^k^2)/(1-x)
    %end

%end



%piper,output="latex"

    
    a :=  Hold((1+x^2^k) * (1-x^2^k) );
    b := Hold( 1/2 *(k+1)*(k+2) );
    Write(a:Simplify(a));

    %hoteqn
      $\left( 1 + x ^{2 ^{k}}\right)  \left( 1 - x ^{2 ^{k}}\right) :1 - x ^{2 ^{k ^{2}}}$

        %output
          HotEqn updated.
        %end

    %end

%end

%piper
    a := (1-x^2^k) * (1+x^2^k);
    Write(Simplify(FullForm(a)));

    %output
      (* 
          (- 1 
            (^ x 
              (^ 2 k )))
          (+ 
            (^ x 
              (^ 2 k ))1 ))
      1-x^2^k^2
    %end

%end

%piper

a := FromString("(* 
          (- 1 
            (^ x 
              (^ 2 k )))
          (+ 
            (^ x 
              (^ 2 k ))1 ))") LispRead();
              
Write(a);

    %output
      (1-x^2^k)*(x^2^k+1)
    %end

%end

%piper

a := FromString("(* 3 (MathSin 4))") LispRead();
              
Write(Eval(a));

    %output
      -2.2704074859
    %end

%end





%piper
//Why doesn't this work?
a := FromString("(+ 5 .5 2.5  )") LispRead();
              
Write(Eval(a));

    %output
      +(5,.5,2.5)
    %end

%end


%piper
//Why doesn't this work?
a := FromString("(+ 1 2 3)") LispRead();
              
Write(a);

    %output
      +(1,2,3)
    %end

%end

%piper,output=""
//Good example problem for newbies book.  From problem 19 in "Mathematical Reasoning".
a(k) := (k+2)/(2*k+2);
b(k) := ( ((k+1)/(2*k)) * (1-(1/(k+1)^2) ) );
c(k) := (k+1)/(2*k) - (k+1)/(2*k*(k+1)^2);
d(k) := (k^3+3*k^2+2*k)/(2*k^3+4*k^2+2*k);
e(k) := (k^2+3*k+2)/(2*k^2+4*k+2);


//Write(d(k));
Write(TestPiper(a(k),e(k)));
//Write(Together(c(k)));
//Write(Simplify(c(k)));
//Write(Factor(Numer(Together(c(k)))):Factor(Denom(Together(c(k)))));

    %output
      True
    %end

%end


%beanshell
ProcessBuilder pb = new ProcessBuilder("C:\\Program Files\\Maxima-5.15.0\\bin\\maxima.bat");
 //Map<String, String> env = pb.environment();
 //env.put("VAR1", "myValue");
 //env.remove("OTHERVAR");
 //env.put("VAR2", env.get("VAR1") + "suffix");
 //pb.directory("myDir");
 Process p = pb.start();
%end


%beanshell
command = new java.util.ArrayList();
command.add("C:\\Program Files\\Maxima-5.15.0\\bin\\maxima.bat");
ProcessBuilder pb = new ProcessBuilder(command);
 //Map<String, String> env = pb.environment();
 //env.put("VAR1", "myValue");
 //env.remove("OTHERVAR");
 //env.put("VAR2", env.get("VAR1") + "suffix");
 //pb.directory("myDir");
 Process p = pb.start();
 in = p.getInputStream();
 out = p.getOutputStream();
 sb = new StringBuffer();
 //cv = s.read();
 //s.read();
while(in.available() == 0)
{
}

 while(in.available() != 0)
 {
    cv = in.read();
    ch = (char)cv;
    //System.out.println("xxxx " + ch);
    sb.append(ch);
 }
 
 System.out.println("xxxx " + sb.toString());
 
 
//Write then read.
sb.delete(0,sb.length());
outmess = "2+2;\n".getBytes();
out.write(outmess);
out.flush();
 while(in.available() == 0)
{
}

 while(in.available() != 0)
 {
    cv = in.read();
    ch = (char) cv;
    //System.out.println("xxxx " + ch);
    sb.append(ch);
 }
 
  System.out.println("xxxx " + sb.toString());

    %output 
      
    %end

%end



%beanshell
maxima() 
{
    command = new java.util.ArrayList();
    command.add("C:\\Program Files\\Maxima-5.15.0\\bin\\maxima.bat");
    pb = new ProcessBuilder(command);
    //Map<String, String> env = pb.environment();
    //env.put("VAR1", "myValue");
    //env.remove("OTHERVAR");
    //env.put("VAR2", env.get("VAR1") + "suffix");
    //pb.directory("myDir");
    Process p = pb.start();
    inputStream = p.getInputStream();
    outputStream = p.getOutputStream();
    sb = new StringBuffer();
    
    keepRunning = true;
    
    
    send(snd)
    {
    }
    
    run() 
    {
	
		
		while(keepRunning)
        {

			serialAvailable = inputStream.available();
			if(serialAvailable > 0)
            {
				byte[] bytes = new byte[serialAvailable];
				inputStream.read( bytes, 0, serialAvailable );
                System.out.println("GGGGGGG " + new String( bytes));

				//self.terminalOutputStream.write( bytes )
				
				//event = utility.DataEvent( self, bytes, self.packetMode )
				
				//self.notifyListeners( event )
            }//end if.
            
            Thread.sleep( 30 );
        }//end while.
        
    }//end run.
    return this;
    
}//end maxima.

max = maxima();

new Thread( max ).start();

    %output 
      
    %end

%end



%beanshell
class SerialPort( Runnable ):
	
	def __init__( self, name ):
		
		self.inputStream = None
		self.outputStream = None
		self.hardwareSerialPort = None  
		self.name = name
		self.description = None
		self.keepRunning = 1
		
		self.protocol = None
		
		self.packetMode = 0
		
		#Hack
		#self.inByte = 65
		
		self.inByteFIFO = utility.FIFO( None, "inByteFIFO, SerialPort" )
		
		self.listeners = []
		
		self.serialTerminal = serialterminalgui.SerialTerminal()
		
		self.serialTerminal.setSerialPort( self )
		
		#Note: temporary test.
		self.terminalOutputStream = jutility.PipedOutputStream( self.serialTerminal.inputStream )
		self.terminalInputStream = jutility.PipedInputStream( self.serialTerminal.outputStream )
		

		
		Thread( self.serialTerminal, self.name+"_terminal"  ).start()
		
		Thread( self, self.name  ).start()  #Note: It looks like SerialPort is being started too soon.

		#self.addEventListener( self.serialTerminal )


		self.dummyPort = utility.DummySerialPort()
		
		#self.lineHolder = utility.FIFO( None )
		

		
		
	def sendData( self, data ):
		self.outputStream.write( data )
		
	def write( self, byte ):
		pass
		
	def getName( self ):
		return self.name
		
	def getDescription( self ):
		return self.description
		
	def addDataEventListener( self, listener ):
		self.listeners.append( listener )
		
	def notifyListeners( self, dataEvent ):
		
		for listener in self.listeners:
			listener.dataEvent( dataEvent )
			
			
			
	def close( self ):
		
		self.keepRunning = 0
		
		if self.hardwareSerialPort != None:
			self.hardwareSerialPort.close()
			
		self.outputStream.close()
		self.inputStream.close()
		
		self.serialTerminal.close()
		
		self.terminalOutputStream.close()
		self.terminalInputStream.close()
		
		
	def toPacketMode( self ):
		self.packetMode = 1
			
			
	def run( self ):
		
		#Note: Hack to prevent issuing inputStream.available() to None reference.
		while self.inputStream == None:
			Thread.sleep( 10 )		
		
		while self.keepRunning == 1:
			
			
			
			serialAvailable = self.inputStream.available()
			if serialAvailable > 0 :
				bytes = jarray.zeros( serialAvailable, 'b' )
				
				self.inputStream.read( bytes, 0, serialAvailable )

				self.terminalOutputStream.write( bytes )
				
				event = utility.DataEvent( self, bytes, self.packetMode )
				
				self.notifyListeners( event )
				                                              
#				#Grab lines.
#				for singleByte in bytes:
#					
#					if singleByte != 0x0a:
#						self.lineHolder.push( chr( singleByte ) )
#					else:
#						line = ''.join( self.lineHolder.getLine() )
#						self.serialTerminal.appendMessage( line )
#						
#						event = utility.DataEvent( self, line )
#						
#						self.notifyListeners( event )
#						
						
				
					
			terminalAvailable = self.terminalInputStream.available()
			if  terminalAvailable > 0:
				bytes = jarray.zeros( terminalAvailable, 'b' )
				self.terminalInputStream.read( bytes, 0, terminalAvailable)
				
				
				
				
				self.outputStream.write( bytes )


			Thread.sleep( 30 )

%end

%maxima,name="test"
2+3;
5+7;
print("hello");

    %output,name="test"
      
    %end

%end


%beanshell,scope="ide"
v = view;
		dwm = v.getDockableWindowManager();
		con = dwm.getDockable("console");
        con.setShell("Maxima");

    %output 
      
    %end

%end

%lisp
(defun compress (x)
    ;;If a cons was passed in then compress it.
    (if (consp x)
        (compr (car x) 1 (cdr x))
        ;;Else just return what was passed in.
        x))
        
;;; elt: element.  n: number in a sequence. lst: the rest of the list.
(defun compr (elt n lst)
    ;; If the rest of the list is null, then just call n-elts once.
    (if (null lst)
        (list (n-elts elt n))
        
        ;; If the rest of the list is not null then set the variable next to the next character in the list.
        (let ((next (car lst)))
        
            ;; If element is the same as the next character in the list then compress again.
            (if (eql next elt)
                (compr elt (+ n 1) (cdr lst))
            
                ;; If element is not the same then 
                (cons (n-elts elt n)
                    (compr next 1 (cdr lst )))))))
                
(defun n-elts (elt n)
    (if (> n 1)
        (list n elt)
        elt))


    %output
      
    %end

%end


MAXIMA> (compress '(1 1 1))

  1> (COMPRESS (1 1 1))
    2> (COMPR 1 1 (1 1))
      3> (COMPR 1 2 (1))
        4> (COMPR 1 3 NIL)
          5> (N-ELTS 1 3)
          <5 (N-ELTS (3 1))
        <4 (COMPR ((3 1)))
      <3 (COMPR ((3 1)))
    <2 (COMPR ((3 1)))
  <1 (COMPRESS ((3 1)))
((3 1))



%beanshell,scope="ide"

import javax.swing.*;
import javax.swing.tree.*;
import java.awt.event.*;
import java.awt.*;

docker = jEdit.getActiveView().getDockableWindowManager();
frame = new javax.swing.JFrame();



infoNode(name, description)
{
    public String toString()
    {
        return name;
    }//end method.
    
    return this;
}//end scripted object.

//{{{ functions array.
functions = new String[][]
{
{"+","Arithmetic addition.","Alphabetical","Number Operations"},
{"-","Arithmetic subtraction or negation.","Alphabetical","Number Operations"},
{"*","Arithmetic multiplication.","Alphabetical","Number Operations"},
{"/","Arithmetic division.","Alphabetical","Number Operations"},
{"^","Arithmetic power.","Alphabetical","Number Operations"},
{"<<","","Alphabetical"},
{">>","","Alphabetical"},
{"Abs","","Alphabetical"},
{"Add","","Alphabetical"},
{"Append","","Alphabetical"},
{"Apply","","Alphabetical"},
{"ArcCos","","Alphabetical"},
{"ArcSin","","Alphabetical"},
{"ArcTan","","Alphabetical"},
{"Arg","","Alphabetical"},
{"Array'Create","","Alphabetical"},
{"Array'CreateFromList","","Alphabetical"},
{"Array'Get","","Alphabetical"},
{"Array'Set","","Alphabetical"},
{"Array'Size","","Alphabetical"},
{"Array'ToList","","Alphabetical"},
{"Assert","","Alphabetical"},
{"Assoc","","Alphabetical"},
{"AssocDelete","","Alphabetical"},
{"AssocIndices","","Alphabetical"},
{"Atom","","Alphabetical"},
{"BaseVector","","Alphabetical"},
{"Bernoulli","","Alphabetical"},
{"BernoulliDistribution","","Alphabetical"},
{"BigOh","","Alphabetical"},
{"Bin","","Alphabetical"},
{"BinomialDistribution","","Alphabetical"},
{"BinSplitData","","Alphabetical"},
{"BinSplitFinal","","Alphabetical"},
{"BinSplitNum","","Alphabetical"},
{"BitAnd","","Alphabetical"},
{"BitOr","","Alphabetical"},
{"BitXor","","Alphabetical"},
{"Bodied","","Alphabetical"},
{"BracketRational","","Alphabetical"},
{"BubbleSort","","Alphabetical"},
{"Builtin'Precision'Get","","Alphabetical"},
{"Builtin'Precision'Set","","Alphabetical"},
{"CachedConstant","","Alphabetical"},
{"CanProve","","Alphabetical"},
{"Catalan","","Alphabetical"},
{"CatalanNumber","","Alphabetical"},
{"Ceil","","Alphabetical"},
{"CForm","","Alphabetical"},
{"CharacteristicEquation","","Alphabetical"},
{"Check","","Alphabetical"},
{"ChiSquareTest","","Alphabetical"},
{"Cholesky","","Alphabetical"},
{"Clear","","Alphabetical"},
{"ClearError","","Alphabetical"},
{"ClearErrors","","Alphabetical"},
{"Coef","","Alphabetical"},
{"CoFactor","","Alphabetical"},
{"Complex","","Alphabetical"},
{"Concat","","Alphabetical"},
{"ConcatStrings","","Alphabetical"},
{"Conjugate","","Alphabetical"},
{"Contains","","Alphabetical"},
{"Content","","Alphabetical"},
{"ContFrac","","Alphabetical"},
{"ContFracEval","","Alphabetical"},
{"ContFracList","","Alphabetical"},
{"Cos","","Alphabetical"},
{"Count","","Alphabetical"},
{"CrossProduct","","Alphabetical"},
{"Curl","","Alphabetical"},
{"CurrentFile","","Alphabetical"},
{"CurrentLine","","Alphabetical"},
{"Cyclotomic","","Alphabetical"},
{"D","","Alphabetical"},
{"Decimal","","Alphabetical"},
{"DefaultTokenizer","","Alphabetical"},
{"DefLoad","","Alphabetical"},
{"DefMacroRuleBase","","Alphabetical"},
{"DefMacroRuleBaseListed","","Alphabetical"},
{"Degree","","Alphabetical"},
{"Delete","","Alphabetical"},
{"Denom","","Alphabetical"},
{"DestructiveAppend","","Alphabetical"},
{"DestructiveDelete","","Alphabetical"},
{"DestructiveInsert","","Alphabetical"},
{"DestructiveReplace","","Alphabetical"},
{"DestructiveReverse","","Alphabetical"},
{"Determinant","","Alphabetical"},
{"Diagonal","","Alphabetical"},
{"DiagonalMatrix","","Alphabetical"},
{"Difference","","Alphabetical"},
{"Div","","Alphabetical"},
{"Diverge","","Alphabetical"},
{"Divisors","","Alphabetical"},
{"DivisorsList","","Alphabetical"},
{"DivisorsSum","","Alphabetical"},
{"Dot","","Alphabetical"},
{"Drop","","Alphabetical"},
{"DumpErrors","","Alphabetical"},
{"Echo","","Alphabetical"},
{"EigenValues","","Alphabetical"},
{"EigenVectors","","Alphabetical"},
{"Eliminate","","Alphabetical"},
{"EndOfFile","","Alphabetical"},
{"Equals","","Alphabetical"},
{"Euler","","Alphabetical"},
{"Eulerian","","Alphabetical"},
{"Eval","","Alphabetical"},
{"EvalFormula","","Alphabetical"},
{"EvaluateHornerScheme","","Alphabetical"},
{"Exp","","Alphabetical"},
{"Expand","","Alphabetical"},
{"ExpandBrackets","","Alphabetical"},
{"ExtraInfo'Get","","Alphabetical"},
{"ExtraInfo'Set","","Alphabetical"},
{"Factor","","Alphabetical"},
{"FactorialSimplify","","Alphabetical"},
{"Factorize","","Alphabetical"},
{"Factors","","Alphabetical"},
{"FermatNumber","","Alphabetical"},
{"FillList","","Alphabetical"},
{"Find","","Alphabetical"},
{"FindFile","","Alphabetical"},
{"FindFunction","","Alphabetical"},
{"FindRealRoots","","Alphabetical"},
{"FlatCopy","","Alphabetical"},
{"Flatten","","Alphabetical"},
{"Floor","","Alphabetical"},
{"For","","Alphabetical"},
{"ForEach","","Alphabetical"},
{"FromBase","","Alphabetical"},
{"FromFile","","Alphabetical"},
{"FromString","","Alphabetical"},
{"FullForm","","Alphabetical"},
{"FuncList","","Alphabetical"},
{"FuncListArith","","Alphabetical"},
{"FuncListSome","","Alphabetical"},
{"Function","","Alphabetical"},
{"Gamma","","Alphabetical"},
{"GarbageCollect","","Alphabetical"},
{"GaussianFactors","","Alphabetical"},
{"GaussianGcd","","Alphabetical"},
{"GaussianNorm","","Alphabetical"},
{"Gcd","","Alphabetical"},
{"GenericTypeName","","Alphabetical"},
{"GetCoreError","","Alphabetical"},
{"GetError","","Alphabetical"},
{"GetErrorTableau","","Alphabetical"},
{"GetTime","","Alphabetical"},
{"GlobalPop","","Alphabetical"},
{"GlobalPush","","Alphabetical"},
{"GoldenRatio","","Alphabetical"},
{"GreaterThan","","Alphabetical"},
{"GuessRational","","Alphabetical"},
{"HarmonicNumber","","Alphabetical"},
{"HasExpr","","Alphabetical"},
{"HasExprArith","","Alphabetical"},
{"HasExprSome","","Alphabetical"},
{"HasFunc","","Alphabetical"},
{"HasFuncArith","","Alphabetical"},
{"HasFuncSome","","Alphabetical"},
{"Head","","Alphabetical"},
{"HeapSort","","Alphabetical"},
{"HessianMatrix","","Alphabetical"},
{"HilbertInverseMatrix","","Alphabetical"},
{"HilbertMatrix","","Alphabetical"},
{"Hold","","Alphabetical"},
{"HoldArg","","Alphabetical"},
{"HoldArgNr","","Alphabetical"},
{"Horner","","Alphabetical"},
{"I","","Alphabetical"},
{"Identity","","Alphabetical"},
{"If","","Alphabetical"},
{"Im","","Alphabetical"},
{"Infinity","","Alphabetical"},
{"Infix","","Alphabetical"},
{"InNumericMode","","Alphabetical"},
{"InProduct","","Alphabetical"},
{"Insert","","Alphabetical"},
{"Integrate","","Alphabetical"},
{"Intersection","","Alphabetical"},
{"IntLog","","Alphabetical"},
{"IntNthRoot","","Alphabetical"},
{"IntPowerNum","","Alphabetical"},
{"InVerboseMode","","Alphabetical"},
{"Inverse","","Alphabetical"},
{"InverseTaylor","","Alphabetical"},
{"IsAmicablePair","","Alphabetical"},
{"IsAtom","","Alphabetical"},
{"IsBodied","","Alphabetical"},
{"IsBoolean","","Alphabetical"},
{"IsBound","","Alphabetical"},
{"IsCarmichaelNumber","","Alphabetical"},
{"IsCFormable","","Alphabetical"},
{"IsComposite","","Alphabetical"},
{"IsConstant","","Alphabetical"},
{"IsCoprime","","Alphabetical"},
{"IsDiagonal","","Alphabetical"},
{"IsError","","Alphabetical"},
{"IsEven","","Alphabetical"},
{"IsEvenFunction","","Alphabetical"},
{"IsFreeOf","","Alphabetical"},
{"IsFunction","","Alphabetical"},
{"IsGaussianInteger","","Alphabetical"},
{"IsGaussianPrime","","Alphabetical"},
{"IsGaussianUnit","","Alphabetical"},
{"IsGeneric","","Alphabetical"},
{"IsHermitian","","Alphabetical"},
{"IsIdempotent","","Alphabetical"},
{"IsInfinity","","Alphabetical"},
{"IsInfix","","Alphabetical"},
{"IsIrregularPrime","","Alphabetical"},
{"IsList","","Alphabetical"},
{"IsLowerTriangular","","Alphabetical"},
{"IsMatrix","","Alphabetical"},
{"IsNegativeInteger","","Alphabetical"},
{"IsNegativeNumber","","Alphabetical"},
{"IsNegativeReal","","Alphabetical"},
{"IsNonObject","","Alphabetical"},
{"IsNonZeroInteger","","Alphabetical"},
{"IsNotZero","","Alphabetical"},
{"IsNumber","","Alphabetical"},
{"IsNumericList","","Alphabetical"},
{"IsOdd","","Alphabetical"},
{"IsOddFunction","","Alphabetical"},
{"IsOrthogonal","","Alphabetical"},
{"IsPositiveInteger","","Alphabetical"},
{"IsPositiveNumber","","Alphabetical"},
{"IsPositiveReal","","Alphabetical"},
{"IsPostfix","","Alphabetical"},
{"IsPrefix","","Alphabetical"},
{"IsPrime","","Alphabetical"},
{"IsPrimePower","","Alphabetical"},
{"IsPromptShown","","Alphabetical"},
{"IsQuadraticResidue","","Alphabetical"},
{"IsRational","","Alphabetical"},
{"IsScalar","","Alphabetical"},
{"IsSkewSymmetric","","Alphabetical"},
{"IsSmallPrime","","Alphabetical"},
{"IsSquareFree","","Alphabetical"},
{"IsSquareMatrix","","Alphabetical"},
{"IsString","","Alphabetical"},
{"IsSymmetric","","Alphabetical"},
{"IsTwinPrime","","Alphabetical"},
{"IsUnitary","","Alphabetical"},
{"IsUpperTriangular","","Alphabetical"},
{"IsVector","","Alphabetical"},
{"IsZero","","Alphabetical"},
{"IsZeroVector","","Alphabetical"},
{"JacobianMatrix","","Alphabetical"},
{"JacobiSymbol","","Alphabetical"},
{"KnownFailure","","Alphabetical"},
{"LagrangeInterpolant","","Alphabetical"},
{"LambertW","","Alphabetical"},
{"LaplaceTransform","","Alphabetical"},
{"Lcm","","Alphabetical"},
{"LeadingCoef","","Alphabetical"},
{"LeftPrecedence","","Alphabetical"},
{"LegendreSymbol","","Alphabetical"},
{"Length","","Alphabetical"},
{"LessThan","","Alphabetical"},
{"LeviCivita","","Alphabetical"},
{"Limit","","Alphabetical"},
{"LispRead","","Alphabetical"},
{"LispReadListed","","Alphabetical"},
{"List","","Alphabetical"},
{"Listify","","Alphabetical"},
{"Ln","","Alphabetical"},
{"LnCombine","","Alphabetical"},
{"LnExpand","","Alphabetical"},
{"Load","","Alphabetical"},
{"Local","","Alphabetical"},
{"LocalSymbols","","Alphabetical"},
{"LogicTest","","Alphabetical"},
{"LogicVerify","","Alphabetical"},
{"Macro","","Alphabetical"},
{"MakeVector","","Alphabetical"},
{"Map","","Alphabetical"},
{"MapArgs","","Alphabetical"},
{"MapSingle","","Alphabetical"},
{"MatchLinear","","Alphabetical"},
{"MathAbs","","Alphabetical"},
{"MathAdd","","Alphabetical"},
{"MathAnd","","Alphabetical"},
{"MathArcCos","","Alphabetical"},
{"MathArcCosh","","Alphabetical"},
{"MathArcSin","","Alphabetical"},
{"MathArcSinh","","Alphabetical"},
{"MathArcTan","","Alphabetical"},
{"MathArcTanh","","Alphabetical"},
{"MathCeil","","Alphabetical"},
{"MathCos","","Alphabetical"},
{"MathCosh","","Alphabetical"},
{"MathDiv","","Alphabetical"},
{"MathDivide","","Alphabetical"},
{"MathExp","","Alphabetical"},
{"MathFloor","","Alphabetical"},
{"MathGcd","","Alphabetical"},
{"MathGetExactBits","","Alphabetical"},
{"MathLog","","Alphabetical"},
{"MathMod","","Alphabetical"},
{"MathMultiply","","Alphabetical"},
{"MathNot","","Alphabetical"},
{"MathOr","","Alphabetical"},
{"MathPower","","Alphabetical"},
{"MathSetExactBits","","Alphabetical"},
{"MathSin","","Alphabetical"},
{"MathSinh","","Alphabetical"},
{"MathSqrt","","Alphabetical"},
{"MathSubtract","","Alphabetical"},
{"MathTan","","Alphabetical"},
{"MathTanh","","Alphabetical"},
{"MatrixPower","","Alphabetical"},
{"MatrixSolve","","Alphabetical"},
{"Max","","Alphabetical"},
{"MaxEvalDepth","","Alphabetical"},
{"MaximumBound","","Alphabetical"},
{"Min","","Alphabetical"},
{"MinimumBound","","Alphabetical"},
{"Minor","","Alphabetical"},
{"Mod","","Alphabetical"},
{"Moebius","","Alphabetical"},
{"MoebiusDivisorsList","","Alphabetical"},
{"Monic","","Alphabetical"},
{"MultiplyNum","","Alphabetical"},
{"N","","Alphabetical"},
{"NearRational","","Alphabetical"},
{"NewLine","","Alphabetical"},
{"Newton","","Alphabetical"},
{"NewtonNum","","Alphabetical"},
{"NextPrime","","Alphabetical"},
{"NFunction","","Alphabetical"},
{"Nl","","Alphabetical"},
{"NonN","","Alphabetical"},
{"Normalize","","Alphabetical"},
{"Not","","Alphabetical"},
{"NrArgs","","Alphabetical"},
{"Nth","","Alphabetical"},
{"NthRoot","","Alphabetical"},
{"Numer","","Alphabetical"},
{"NumRealRoots","","Alphabetical"},
{"Object","","Alphabetical"},
{"OdeOrder","","Alphabetical"},
{"OdeSolve","","Alphabetical"},
{"OdeTest","","Alphabetical"},
{"OldSolve","","Alphabetical"},
{"OMDef","","Alphabetical"},
{"OMForm","","Alphabetical"},
{"OMRead","","Alphabetical"},
{"OpLeftPrecedence","","Alphabetical"},
{"OpPrecedence","","Alphabetical"},
{"OpRightPrecedence","","Alphabetical"},
{"OrthoG","","Alphabetical"},
{"OrthogonalBasis","","Alphabetical"},
{"OrthoGSum","","Alphabetical"},
{"OrthoH","","Alphabetical"},
{"OrthoHSum","","Alphabetical"},
{"OrthoL","","Alphabetical"},
{"OrthoLSum","","Alphabetical"},
{"OrthonormalBasis","","Alphabetical"},
{"OrthoP","","Alphabetical"},
{"OrthoPoly","","Alphabetical"},
{"OrthoPolySum","","Alphabetical"},
{"OrthoPSum","","Alphabetical"},
{"OrthoT","","Alphabetical"},
{"OrthoTSum","","Alphabetical"},
{"OrthoU","","Alphabetical"},
{"OrthoUSum","","Alphabetical"},
{"Outer","","Alphabetical"},
{"PAdicExpand","","Alphabetical"},
{"Partition","","Alphabetical"},
{"PatchLoad","","Alphabetical"},
{"PatchString","","Alphabetical"},
{"PDF","","Alphabetical"},
{"Permutations","","Alphabetical"},
{"Pi","","Alphabetical"},
{"Plot2D","","Alphabetical"},
{"Plot3DS","","Alphabetical"},
{"Pop","","Alphabetical"},
{"PopBack","","Alphabetical"},
{"PopFront","","Alphabetical"},
{"Postfix","","Alphabetical"},
{"Prefix","","Alphabetical"},
{"PrettyForm","","Alphabetical"},
{"PrimitivePart","","Alphabetical"},
{"PrintList","","Alphabetical"},
{"Prog","","Alphabetical"},
{"ProperDivisors","","Alphabetical"},
{"ProperDivisorsSum","","Alphabetical"},
{"Pslq","","Alphabetical"},
{"PSolve","","Alphabetical"},
{"Push","","Alphabetical"},
{"RadSimp","","Alphabetical"},
{"RamanujanSum","","Alphabetical"},
{"Random","","Alphabetical"},
{"RandomIntegerMatrix","","Alphabetical"},
{"RandomIntegerVector","","Alphabetical"},
{"RandomPoly","","Alphabetical"},
{"RandomSeed","","Alphabetical"},
{"RandVerifyArithmetic","","Alphabetical"},
{"Rationalize","","Alphabetical"},
{"Re","","Alphabetical"},
{"Read","","Alphabetical"},
{"ReadCmdLineString","","Alphabetical"},
{"ReadToken","","Alphabetical"},
{"RemoveDuplicates","","Alphabetical"},
{"Replace","","Alphabetical"},
{"Retract","","Alphabetical"},
{"Reverse","","Alphabetical"},
{"ReversePoly","","Alphabetical"},
{"RightAssociative","","Alphabetical"},
{"RightPrecedence","","Alphabetical"},
{"Rng","","Alphabetical"},
{"RngCreate","","Alphabetical"},
{"RngSeed","","Alphabetical"},
{"Round","","Alphabetical"},
{"RoundTo","","Alphabetical"},
{"Rule","","Alphabetical"},
{"RuleBase","","Alphabetical"},
{"RuleBaseArgList","","Alphabetical"},
{"RuleBaseListed","","Alphabetical"},
{"Secure","","Alphabetical"},
{"Select","","Alphabetical"},
{"Set","","Alphabetical"},
{"SetGlobalLazyVariable","","Alphabetical"},
{"ShiftLeft","","Alphabetical"},
{"ShiftRight","","Alphabetical"},
{"Sign","","Alphabetical"},
{"Simplify","","Alphabetical"},
{"Sin","","Alphabetical"},
{"Solve","","Alphabetical"},
{"SolveMatrix","","Alphabetical"},
{"Space","","Alphabetical"},
{"Sparsity","","Alphabetical"},
{"Sqrt","","Alphabetical"},
{"SquareFree","","Alphabetical"},
{"SquareFreeDivisorsList","","Alphabetical"},
{"StirlingNumber1","","Alphabetical"},
{"String","","Alphabetical"},
{"StringMid'Get","","Alphabetical"},
{"StringMid'Set","","Alphabetical"},
{"Subfactorial","","Alphabetical"},
{"Subst","","Alphabetical"},
{"SuchThat","","Alphabetical"},
{"Sum","","Alphabetical"},
{"SumForDivisors","","Alphabetical"},
{"SumTaylorNum","","Alphabetical"},
{"Swap","","Alphabetical"},
{"SylvesterMatrix","","Alphabetical"},
{"SystemCall","","Alphabetical"},
{"Table","","Alphabetical"},
{"TableForm","","Alphabetical"},
{"Tail","","Alphabetical"},
{"Take","","Alphabetical"},
{"Tan","","Alphabetical"},
{"Taylor","","Alphabetical"},
{"TestPiper","","Alphabetical"},
{"TeXForm","","Alphabetical"},
{"Time","","Alphabetical"},
{"ToBase","","Alphabetical"},
{"ToeplitzMatrix","","Alphabetical"},
{"ToFile","","Alphabetical"},
{"ToStdout","","Alphabetical"},
{"ToString","","Alphabetical"},
{"Trace","","Alphabetical"},
{"TraceExp","","Alphabetical"},
{"TraceRule","","Alphabetical"},
{"TraceStack","","Alphabetical"},
{"Transpose","","Alphabetical"},
{"TrapError","","Alphabetical"},
{"TrigSimpCombine","","Alphabetical"},
{"TruncRadian","","Alphabetical"},
{"Type","","Alphabetical"},
{"Undefined","","Alphabetical"},
{"UnFence","","Alphabetical"},
{"UnFlatten","","Alphabetical"},
{"Union","","Alphabetical"},
{"UniqueConstant","","Alphabetical"},
{"UnList","","Alphabetical"},
{"Until","","Alphabetical"},
{"Use","","Alphabetical"},
{"V, InVerboseMode","","Alphabetical"},
{"VandermondeMatrix","","Alphabetical"},
{"VarList","","Alphabetical"},
{"VarListArith","","Alphabetical"},
{"VarListSome","","Alphabetical"},
{"Verify","","Alphabetical"},
{"VerifyArithmetic","","Alphabetical"},
{"VerifyDiv","","Alphabetical"},
{"While","","Alphabetical"},
{"WithValue","","Alphabetical"},
{"Write","","Alphabetical"},
{"WriteString","","Alphabetical"},
{"WronskianMatrix","","Alphabetical"},
{"XmlExplodeTag","","Alphabetical"},
{"XmlTokenizer","","Alphabetical"},
{"ZeroMatrix","","Alphabetical"},
{"ZeroVector","","Alphabetical"},
{"Zeta","","Alphabetical"}
};

jlist = new java.util.Vector();


categories = new DefaultMutableTreeNode("Categories");
categories.add(new DefaultMutableTreeNode(new org.mathrider.piperdocsplugin.FunctionInfo("Predicates","test")));

for(row = 0;row < functions.length;row++)
{
    //Populate JList.
    jlist.addElement(functions[row][0]);
    
    //Populate JTree.
    for(column=2; column < functions[row].length; column++)
    {
        category = functions[row][column];
        System.out.println("XXXXX " + functions[row][column]);
        
        
        boolean hasCategory = false;
        global.children = categories.children();
        for(DefaultMutableTreeNode child:children)
        {
            if(child.getUserObject().toString().equalsIgnoreCase(category)) //Add leaf to existing category.
            {
                child.add(new DefaultMutableTreeNode(new org.mathrider.piperdocsplugin.FunctionInfo(functions[row][0],functions[row][1]) ));
                hasCategory = true;
            }

            
        }//end for.
        
        if(hasCategory == false)
        {
            leaf = new DefaultMutableTreeNode(new org.mathrider.piperdocsplugin.FunctionInfo(functions[row][0],functions[row][1]));
            category = new DefaultMutableTreeNode(functions[row][column]);
            category.add(leaf);
            categories.add(category);
        }
        
/*
        if(categories.containsKey(category)) //Add leaf to existing category.
        {
            categoryNode = categories.get(category);
            categoryNode.add(new DefaultMutableTreeNode(functions[row][0]));
        }
        else //Create new category and add leaf;
        {
            categoryLeaf = new DefaultMutableTreeNode(functions[row][0]);
            categoryNode = new DefaultMutableTreeNode(categoryLeaf);
            categories.put(category,categoryNode);
        }
 
*/
    }//end for.

    
}//end for/

tree = new org.mathrider.piperdocsplugin.FunctionInfoTree(categories);


ToolTipManager.sharedInstance().registerComponent(tree);

tree.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
//tree.addTreeSelectionListener(this);
treeView = new JScrollPane(tree);
frame.add(treeView, BorderLayout.EAST);


list = new javax.swing.JList(jlist);
    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    list.addListSelectionListener(this);
    JScrollPane pane = new JScrollPane(list);
 
    frame.add(pane, BorderLayout.WEST);


contentPane = frame.getContentPane();

frame.pack();
frame.setAlwaysOnTop(true);
frame.setTitle("MathRider");
frame.setSize(new Dimension(250, 200));
frame.setResizable(true);
frame.setPreferredSize(new Dimension(250, 200));
frame.setLocationRelativeTo(null); // added
frame.show();

    %output 
      
    %end

%end
