%mathpiper,name="information"
url :=  "mathpiper.org/exercises/arithmetic.mpw";
title := "Arithmetic";
version := .01;
author := "tkosan";
description := "Basic arithmetic exercises.";


%/mathpiper

    %output,preserve="false"
      Result: "Basic arithmetic exercises."
.   %/output






%mathpiper,name="configuration"
[
configuration := 
{
    //{"operation", {"String","+","-","*","/"}},
    {"numberOneLow", "Integer" },
    {"numberOneHigh", "Integer"},
    {"numberTwoLow", "Integer"},
    {"numberTwoHigh", "Integer"},
};



VarSetFunctionsCreate(configuration) :=
[
    varNames := AssocIndices(configuration);

    ForEach(varName, varNames)
    [
        
        functionName := varName : "Set";
        
        variableTypeCheckPredicateAtom := ToAtom(configuration[varName] : "?");
        
        varNameParameterAtom := ToAtom(varName : "Var");
        
        varNameAtom := ToAtom(varName);

        `Function(@functionName,{@varNameParameterAtom})
        [
            Check(@variableTypeCheckPredicateAtom(@varNameParameterAtom), "Argument", "Invalid Argument: " : ToString(Eval(@varNameParameterAtom)) : ".");
            
            @varNameAtom := @varNameParameterAtom;
        
            True;
        ];
    
    ];

];


VarSetFunctionsCreate(configuration);
];

%/mathpiper

    %output,preserve="false"
      Result: True
      
      Side Effects:
      Function("numberTwoHighSet",{numberTwoHighVar})
      [
          Check(Integer?(numberTwoHighVar),"Argument","Invalid Argument: ":ToString(Eval(numberTwoHighVar)):".");
          numberTwoHigh:=numberTwoHighVar;
          True;
      ]
      Function("numberTwoLowSet",{numberTwoLowVar})
      [
          Check(Integer?(numberTwoLowVar),"Argument","Invalid Argument: ":ToString(Eval(numberTwoLowVar)):".");
          numberTwoLow:=numberTwoLowVar;
          True;
      ]
      Function("numberOneHighSet",{numberOneHighVar})
      [
          Check(Integer?(numberOneHighVar),"Argument","Invalid Argument: ":ToString(Eval(numberOneHighVar)):".");
          numberOneHigh:=numberOneHighVar;
          True;
      ]
      Function("numberOneLowSet",{numberOneLowVar})
      [
          Check(Integer?(numberOneLowVar),"Argument","Invalid Argument: ":ToString(Eval(numberOneLowVar)):".");
          numberOneLow:=numberOneLowVar;
          True;
      ]
      
.   %/output









%mathpiper,name="defaultInitialization"

numberOneLow := 2;
numberOneHigh := 9;

numberTwoLow := 2;
numberTwoHigh := 9;

operation := "+";

%/mathpiper

    %output,preserve="false"
      Result: "+"
.   %/output





%mathpiper,name="ExerciseEngine"

oldnumberOne := Infinity;
oldnumberTwo := Infinity;

attempt := 0;

QuestionAsk() :=
[
    Until(Not? (oldnumberOne =? numberOne And? oldnumberTwo =? numberTwo))
    [
        
        numberOne := RandomInteger(numberOneLow, numberOneHigh);
        
        numberTwo := RandomInteger(numberTwoLow, numberTwoHigh);
        
        
        if(operation =? "-")
        [                                                                 
            While(numberOne =? numberTwo)
            [
                numberOne := RandomInteger(numberOneLow, numberOneHigh);
            ];
            
            If( numberOne <? numberTwo, [temp := numberOne; numberOne := numberTwo; numberTwo := temp;]);
        ];
        
    ]; 
        

    oldnumberOne := numberOne;
    oldnumberTwo := numberTwo;
    
    question := ToString(numberOne) :" " : operation :" ": ToString(numberTwo);
    
    answer := Apply(operation, {numberOne, numberTwo});
    
    
    question;
  
];




QuestionCheck(input) :=
[
    attempt++;
    
    If(answer =? input, True, False);
];






%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output











