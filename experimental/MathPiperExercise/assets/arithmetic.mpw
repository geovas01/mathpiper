%mathpiper,name="information"
url :=  "mathpiper.org/exercises/arithmetic.mpw";
title := "Arithmetic";
version := .01;
author := "tkosan";
description := "Basic arithmetic exercises.";


%/mathpiper

    %output,preserve="false"
      Result: "Basic arithmetic exercises."
.   %/output










%mathpiper,name="configuration"
[

    

    configurations := 
    {
        //{"operation", {"String","+","-","*","/"}},
        {{"name", "numberOneLow"}, {"type", "Integer"}, {"value","2"}},
        {{"name", "numberOneHigh"}, {"type", "Integer"}, {"value","9"}},
        {{"name", "numberTwoLow"},  {"type", "Integer"}, {"value","2"}},
        {{"name", "numberTwoHigh"}, {"type", "Integer"}, {"value","9"}},
        {{"name", "operation"}, {"type", "String"}, {"value","+"}},
    };
    
    
    ForEach(configuration, configurations)
    [
        name := configuration["name"];
        
        If(configuration["type"] =? "Integer", value := ToAtom(configuration["value"]), value := configuration["value"]);
        `Bind(@name, @value);
    ];
    
    
    VarSetFunctionsCreate(configurations) :=
    [
        //varNames := AssocIndices(configuration);
    
        //ForEach(varName, varNames)
        ForEach(configuration, configurations)
        [
            varName := configuration["name"];
            
            functionName := varName ~ "Set";
            
            variableTypeCheckPredicateAtom := ToAtom(configuration["type"] ~ "?");
            
            varNameParameterAtom := ToAtom(varName ~ "Var");
            
            varNameAtom := ToAtom(varName);
    
            `Function(@functionName,{@varNameParameterAtom})
            [
                Check(@variableTypeCheckPredicateAtom(@varNameParameterAtom), "Argument", "Invalid Argument: " ~ ToString(Eval(@varNameParameterAtom)) ~ ".");
                
                @varNameAtom := @varNameParameterAtom;
            
                True;
            ];
        
        ];
    
    ];
    
    
    VarSetFunctionsCreate(configurations);
    
    
    ConfigurationsGet() :=
    [
        result := "";
        ForEach(configuration, configurations)
        [
            result := (result ~ configuration["name"] ~ "," ~ configuration["type"] ~ "," ~ configuration["value"] ~ ";");
        ];
        
        result;
    
    ];
    
];

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output
















%mathpiper,name="ExerciseEngine"

oldnumberOne := Infinity;
oldnumberTwo := Infinity;

attempt := 0;

QuestionAsk() :=
[
    Until(Not? (oldnumberOne =? numberOne And? oldnumberTwo =? numberTwo))
    [
        
        numberOne := RandomInteger(numberOneLow, numberOneHigh);
        
        numberTwo := RandomInteger(numberTwoLow, numberTwoHigh);
        
        
        if(operation =? "-")
        [                                                                 
            While(numberOne =? numberTwo)
            [
                numberOne := RandomInteger(numberOneLow, numberOneHigh);
            ];
            
            If( numberOne <? numberTwo, [temp := numberOne; numberOne := numberTwo; numberTwo := temp;]);
        ];
        
    ]; 
        

    oldnumberOne := numberOne;
    oldnumberTwo := numberTwo;
    
    question := ToString(numberOne) ~" " ~ operation ~" "~ ToString(numberTwo);
    
    answer := Apply(operation, {numberOne, numberTwo});
    
    
    question;
  
];




QuestionCheck(input) :=
[
    attempt++;
    
    If(answer =? input, True, False);
];






%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output






%mathpiper,title=""

    ForEach(configuration, configurations)
    [
        name := configuration["name"];
        value := ToAtom(configuration["value"]);
        `Bind(@name, @value);
    ];

%/mathpiper

    %output,preserve="false"
      Result: True
.   %/output



